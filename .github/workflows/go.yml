name: Go

on:
  push:
    branches:
      - master
      - develop
    tags:
      - build*
  pull_request:
    branches:
      - master
      - develop

env:
  GOGETCMD: "go get -v -t -d ./..."
  GOTESTCMD: "go test -timeout 1200s --tags \"json1\" -v ./..."
  TESTSCRIPT: "test/python/main.py"
  GOPRIVATE: github.com/stackql/*
  GH_ACCESS_TOKEN: ${{ secrets.ACTIONS_PRIVATE_PACKAGE_SECRET }}
  PLANCACHEENABLED: "true"

jobs:

  winbuild:
    name: Windows Build
    runs-on: windows-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.18
      id: go
    
    - name: Set up mingw
      uses: egor-tensin/setup-mingw@v2
      id: gccsetup

    - name: Choco install postgres
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: "install --force postgresql13 openssl"

    - name: Get rid of disruptive line endings before checkout
      run: |
        git config --global core.autocrlf false

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    
    - name: Git Ref Parse
      id: git_ref_parse
      run: |
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}

    - name: Install Python dependencies
      run: |
        pip3 install PyYaml
        pip3 install robotframework
    
    - name: Generate rewritten registry for simulations
      run: |
        python3 test\python\registry-rewrite.py

    - name: Get dependencies
      run: |
        go env -w GOPRIVATE="github.com/stackql/*"
        git config --global url."https://$env:GHACCESSTOKEN@github.com/".insteadOf "https://github.com/"
        git --no-pager config --list
        go get -v -t -d ./...
      env:
        GOGETCMD: ${{env.GOGETCMD}}
        CGO_ENABLED: 1
        GHACCESSTOKEN: ${{env.GH_ACCESS_TOKEN}}
        GOPRIVATE: ${{env.GOPRIVATE}}

    - name: Generate Build Flags and Build
      env:
        BUILDCOMMITSHA: ${{github.sha}}
        BUILDBRANCH: ${{github.ref}}
        BUILDPLATFORM: ${{runner.os}}
        BUILDPATCHVERSION: ${{github.run_number}}
        CGO_ENABLED: 1
        GH_ACCESS_TOKEN: ${{env.GH_ACCESS_TOKEN}}
        GOPRIVATE: ${{env.GOPRIVATE}}
      run: |
        git config --global url.https://$env:GH_ACCESS_TOKEN@github.com/.insteadOf https://github.com/
        $Version = convertfrom-stringdata (get-content ./version.txt -raw)
        $BuildMajorVersion = $Version.'MajorVersion'
        $BuildMinorVersion = $Version.'MinorVersion'
        if("$env:BUILDBRANCH".EndsWith('develop')) {
          $BuildPatchVersion = $env:BUILDPATCHVERSION
        }else {
          $BuildPatchVersion = $env:BUILDPATCHVERSION
        }
        $BuildCommitSHA = $env:BUILDCOMMITSHA
        $BuildShortCommitSHA = "$BuildCommitSHA".Substring(0,6)
        $BuildDate = (Get-Date -UFormat "%a %b %e %H:%M:%S UTC %Y").ToString()
        $BuildPlatform = $env:BUILDPLATFORM
        $PlanCacheEnabled = $env:PLANCACHEENABLED	
            
        Write-Output $BuildMajorVersion
        Write-Output $BuildMinorVersion
        Write-Output $BuildPatchVersion
        Write-Output $BuildCommitSHA
        Write-Output $BuildShortCommitSHA
        Write-Output $BuildDate
        Write-Output $BuildPlatform
        
        echo "BUILDMAJORVERSION=$BuildMajorVersion" >> $GITHUB_ENV
        echo "BUILDMINORVERSION=$BuildMinorVersion" >> $GITHUB_ENV
        echo "BUILDPATCHVERSION=$BuildPatchVersion" >> $GITHUB_ENV

        go build -x -v --tags "json1" -ldflags "-X github.com/stackql/stackql/internal/stackql/cmd.BuildMajorVersion=$BuildMajorVersion `
          -X github.com/stackql/stackql/internal/stackql/cmd.BuildMinorVersion=$BuildMinorVersion `
          -X github.com/stackql/stackql/internal/stackql/cmd.BuildPatchVersion=$BuildPatchVersion `
          -X github.com/stackql/stackql/internal/stackql/cmd.BuildCommitSHA=$BuildCommitSHA `
          -X github.com/stackql/stackql/internal/stackql/cmd.BuildShortCommitSHA=$BuildShortCommitSHA `
          -X 'github.com/stackql/stackql/internal/stackql/cmd.BuildDate=$BuildDate' `
          -X 'stackql/internal/stackql/planbuilder.PlanCacheEnabled=$PlanCacheEnabled' `
          -X github.com/stackql/stackql/internal/stackql/cmd.BuildPlatform=$BuildPlatform" `
          -o build/ ./...

    - name: Test
      if: success()
      run: go test -timeout 1200s --tags "json1" -v ./...

    - name: Mock Server Download
      run: |
        mvn org.apache.maven.plugins:maven-dependency-plugin:3.0.2:copy `
        '-Dartifact=org.mock-server:mockserver-netty:5.12.0:jar:shaded' `
        '-DoutputDirectory=test/downloads'

    - name: Create certificates for robot tests
      run: |
        openssl req -x509 -keyout test/server/mtls/credentials/pg_server_key.pem -out test/server/mtls/credentials/pg_server_cert.pem -config test/server/mtls/openssl.cnf -days 365
        openssl req -x509 -keyout test/server/mtls/credentials/pg_client_key.pem -out test/server/mtls/credentials/pg_client_cert.pem -config test/server/mtls/openssl.cnf -days 365
        openssl req -x509 -keyout test/server/mtls/credentials/pg_rubbish_key.pem -out test/server/mtls/credentials/pg_rubbish_cert.pem -config test/server/mtls/openssl.cnf -days 365 

    - name: Run robot mocked functional tests
      if: success()
      env:
        PSQL_EXE: C:\Program Files\PostgreSQL\13\bin\psql
      run: |
        cmd /c "robot test\robot\functional"

    - name: Output from mocked functional tests
      if: always()
      run: |
        cat ./output.xml
    
    - name: Run robot integration tests
      if: success() && startsWith(${{ steps.git_ref_parse.outputs.SOURCE_TAG }}, 'build-release')
      env:
        PSQL_EXE: C:\Program Files\PostgreSQL\13\bin\psql
      run: |
        robot test/robot/integration
    
    - name: Prepare Test DB
      if: success()
      run: copy test/db/db.sqlite test/db/tmp/python-tests-tmp-db.sqlite

    - name: Test Script
      if: success()
      run: python.exe test/python/main.py

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      if: success()
      with:
        name: stackql_windows_amd64
        path: build/stackql.exe

  linuxbuild:
    name: Linux Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.18
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    
    - name: Git Ref Parse
      id: git_ref_parse
      run: |
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
    
    - name: Set up GCC
      uses: egor-tensin/setup-gcc@v1
      id: gccsetup
      with:
        platform: x64
        cygwin: 0
    
    - name: Install psql
      run: |
          sudo apt-get update
          sudo apt-get install --yes --no-install-recommends postgresql-client

    - name: Install Python dependencies
      run: |
        pip3 install PyYaml
        pip3 install robotframework
    
    - name: Generate rewritten registry for simulations
      run: |
        python3 test/python/registry-rewrite.py
      
    - name: Get dependencies
      run: |
        git config --global url.https://$GH_ACCESS_TOKEN@github.com/.insteadOf https://github.com/
        $GOGETCMD
      env:
        GOGETCMD: ${{env.GOGETCMD}}
        GH_ACCESS_TOKEN: ${{env.GH_ACCESS_TOKEN}}
        GOPRIVATE: ${{env.GOPRIVATE}}

    - name: Generate Build Flags and Build
      env:
        BUILDCOMMITSHA: ${{github.sha}}
        BUILDBRANCH: ${{github.ref}}
        BUILDPLATFORM: ${{runner.os}}
        BUILDPATCHVERSION: ${{github.run_number}}
      run: |
        source version.txt
        BUILDMAJORVERSION=$MajorVersion
        BUILDMINORVERSION=$MinorVersion
        if [[ ! "$BUILDBRANCH" == *develop ]]
          then
          BUILDPATCHVERSION="${BUILDPATCHVERSION}"
        fi
        BUILDSHORTCOMMITSHA=$(echo $BUILDCOMMITSHA | cut -c 1-7)
        BUILDDATE=$(date)
        echo "BUILDMAJORVERSION: ${BUILDMAJORVERSION}"
        echo "BUILDMINORVERSION: ${BUILDMINORVERSION}"
        echo "BUILDPATCHVERSION: ${BUILDPATCHVERSION}"
        echo "BUILDBRANCH: ${BUILDBRANCH}"
        echo "BUILDCOMMITSHA: ${BUILDCOMMITSHA}"
        echo "BUILDSHORTCOMMITSHA: ${BUILDSHORTCOMMITSHA}"
        echo "BUILDDATE: ${BUILDDATE}"
        echo "BUILDPLATFORM: ${BUILDPLATFORM}"

        echo "BUILDMAJORVERSION=$BUILDMAJORVERSION" >> $GITHUB_ENV
        echo "BUILDMINORVERSION=$BUILDMINORVERSION" >> $GITHUB_ENV
        echo "BUILDPATCHVERSION=$BUILDPATCHVERSION" >> $GITHUB_ENV

        go build -x -v --tags "json1" -ldflags "-X github.com/stackql/stackql/internal/stackql/cmd.BuildMajorVersion=$BUILDMAJORVERSION \
        -X github.com/stackql/stackql/internal/stackql/cmd.BuildMinorVersion=$BUILDMINORVERSION \
        -X github.com/stackql/stackql/internal/stackql/cmd.BuildPatchVersion=$BUILDPATCHVERSION \
        -X github.com/stackql/stackql/internal/stackql/cmd.BuildCommitSHA=$BUILDCOMMITSHA \
        -X github.com/stackql/stackql/internal/stackql/cmd.BuildShortCommitSHA=$BUILDSHORTCOMMITSHA \
        -X \"github.com/stackql/stackql/internal/stackql/cmd.BuildDate=$BUILDDATE\" \
        -X \"stackql/internal/stackql/planbuilder.PlanCacheEnabled=$PLANCACHEENABLED\" \
        -X github.com/stackql/stackql/internal/stackql/cmd.BuildPlatform=$BUILDPLATFORM" \
        -o build/ ./...
      
    - name: Test
      if: success()
      run: go test -timeout 1200s --tags "json1" -v ./...

    - name: Mock Server Download
      run: |
        mvn \
        org.apache.maven.plugins:maven-dependency-plugin:3.0.2:copy \
        -Dartifact=org.mock-server:mockserver-netty:5.12.0:jar:shaded \
        -DoutputDirectory=test/downloads

    - name: Create certificates for robot tests
      run: |
        openssl req -x509 -keyout test/server/mtls/credentials/pg_server_key.pem -out test/server/mtls/credentials/pg_server_cert.pem -config test/server/mtls/openssl.cnf -days 365
        openssl req -x509 -keyout test/server/mtls/credentials/pg_client_key.pem -out test/server/mtls/credentials/pg_client_cert.pem -config test/server/mtls/openssl.cnf -days 365
        openssl req -x509 -keyout test/server/mtls/credentials/pg_rubbish_key.pem -out test/server/mtls/credentials/pg_rubbish_cert.pem -config test/server/mtls/openssl.cnf -days 365 

    - name: Run robot mocked functional tests
      if: success()
      run: |
        robot test/robot/functional

    - name: Output from mocked functional tests
      if: always()
      run: |
        cat ./output.xml
    
    - name: Run robot integration tests
      if: success() && startsWith(${{ steps.git_ref_parse.outputs.SOURCE_TAG }}, 'build-release')
      run: |
        robot test/robot/integration
    
    - name: Prepare Test DB
      if: success()
      run: cp test/db/db.sqlite test/db/tmp/python-tests-tmp-db.sqlite

    - name: Test Script
      if: success()
      run: python3 $TESTSCRIPT
      env:
        TESTSCRIPT: ${{env.TESTSCRIPT}}

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      if: success()
      with:
        name: stackql_linux_amd64
        path: build/stackql

  macosbuild:
    name: MacOS Build
    runs-on: macos-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.18
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    
    - name: Git Ref Parse
      id: git_ref_parse
      run: |
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}

    - name: Install Python dependencies
      run: |
        pip3 install PyYaml
        pip3 install robotframework
    
    - name: Generate rewritten registry for simulations
      run: |
        python3 test/python/registry-rewrite.py

    - name: Get dependencies
      run: |
        git config --global url.https://$GH_ACCESS_TOKEN@github.com/.insteadOf https://github.com/
        $GOGETCMD
      env:
        GOGETCMD: ${{env.GOGETCMD}}
        CGO_ENABLED: 1
        GH_ACCESS_TOKEN: ${{env.GH_ACCESS_TOKEN}}
        GOPRIVATE: ${{env.GOPRIVATE}}

    - name: Generate Build Flags and Build
      env:
        BUILDCOMMITSHA: ${{github.sha}}
        BUILDBRANCH: ${{github.ref}}
        BUILDPLATFORM: ${{runner.os}}
        BUILDPATCHVERSION: ${{github.run_number}}
        CGO_ENABLED: 1
      run: |
        source version.txt
        BUILDMAJORVERSION=$MajorVersion
        BUILDMINORVERSION=$MinorVersion
        if [[ ! "$BUILDBRANCH" == *develop ]]
          then
          BUILDPATCHVERSION="${BUILDPATCHVERSION}"
        fi
        BUILDSHORTCOMMITSHA=$(echo $BUILDCOMMITSHA | cut -c 1-7)
        BUILDDATE=$(date)
        echo "BUILDMAJORVERSION: ${BUILDMAJORVERSION}"
        echo "BUILDMINORVERSION: ${BUILDMINORVERSION}"
        echo "BUILDPATCHVERSION: ${BUILDPATCHVERSION}"
        echo "BUILDBRANCH: ${BUILDBRANCH}"
        echo "BUILDCOMMITSHA: ${BUILDCOMMITSHA}"
        echo "BUILDSHORTCOMMITSHA: ${BUILDSHORTCOMMITSHA}"
        echo "BUILDDATE: ${BUILDDATE}"
        echo "BUILDPLATFORM: ${BUILDPLATFORM}"

        echo "BUILDMAJORVERSION=$BUILDMAJORVERSION" >> $GITHUB_ENV
        echo "BUILDMINORVERSION=$BUILDMINORVERSION" >> $GITHUB_ENV
        echo "BUILDPATCHVERSION=$BUILDPATCHVERSION" >> $GITHUB_ENV

        go build -x -v --tags "json1" -ldflags "-X github.com/stackql/stackql/internal/stackql/cmd.BuildMajorVersion=$BUILDMAJORVERSION \
        -X github.com/stackql/stackql/internal/stackql/cmd.BuildMinorVersion=$BUILDMINORVERSION \
        -X github.com/stackql/stackql/internal/stackql/cmd.BuildPatchVersion=$BUILDPATCHVERSION \
        -X github.com/stackql/stackql/internal/stackql/cmd.BuildCommitSHA=$BUILDCOMMITSHA \
        -X github.com/stackql/stackql/internal/stackql/cmd.BuildShortCommitSHA=$BUILDSHORTCOMMITSHA \
        -X \"github.com/stackql/stackql/internal/stackql/cmd.BuildDate=$BUILDDATE\" \
        -X \"stackql/internal/stackql/planbuilder.PlanCacheEnabled=$PLANCACHEENABLED\" \
        -X github.com/stackql/stackql/internal/stackql/cmd.BuildPlatform=$BUILDPLATFORM" \
        -o build/ ./...

    - name: Test
      if: success()
      run: go test -timeout 1200s --tags "json1" -v ./...

    - name: Mock Server Download
      run: |
        mvn \
        org.apache.maven.plugins:maven-dependency-plugin:3.0.2:copy \
        -Dartifact=org.mock-server:mockserver-netty:5.12.0:jar:shaded \
        -DoutputDirectory=test/downloads

    - name: Create certificates for robot tests
      run: |
        openssl req -x509 -keyout test/server/mtls/credentials/pg_server_key.pem -out test/server/mtls/credentials/pg_server_cert.pem -config test/server/mtls/openssl.cnf -days 365
        openssl req -x509 -keyout test/server/mtls/credentials/pg_client_key.pem -out test/server/mtls/credentials/pg_client_cert.pem -config test/server/mtls/openssl.cnf -days 365
        openssl req -x509 -keyout test/server/mtls/credentials/pg_rubbish_key.pem -out test/server/mtls/credentials/pg_rubbish_cert.pem -config test/server/mtls/openssl.cnf -days 365 

    - name: Run robot mocked functional tests
      if: success()
      run: |
        robot test/robot/functional

    - name: Output from mocked functional tests
      if: always()
      run: |
        cat ./output.xml
    
    - name: Run robot integration tests
      if: success() && startsWith(${{ steps.git_ref_parse.outputs.SOURCE_TAG }}, 'build-release')
      run: |
        robot test/robot/integration
    
    - name: Prepare Test DB
      if: success()
      run: cp test/db/db.sqlite test/db/tmp/python-tests-tmp-db.sqlite
        
    - name: Test Script
      if: success()
      run: python3 $TESTSCRIPT
      env:
        TESTSCRIPT: ${{env.TESTSCRIPT}}

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      if: success()
      with:
        name: stackql_darwin_amd64
        path: build/stackql

  macosarmbuild:
    name: MacOS ARM Build
    runs-on: macos-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.16
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        git config --global url.https://$GH_ACCESS_TOKEN@github.com/.insteadOf https://github.com/
        $GOGETCMD
      env:
        GOGETCMD: ${{env.GOGETCMD}}
        CGO_ENABLED: 1
        GH_ACCESS_TOKEN: ${{env.GH_ACCESS_TOKEN}}
        GOPRIVATE: ${{env.GOPRIVATE}}

    - name: Generate Build Flags and Build
      env:
        BUILDCOMMITSHA: ${{github.sha}}
        BUILDBRANCH: ${{github.ref}}
        BUILDPLATFORM: "darwin_arm64"
        BUILDPATCHVERSION: ${{github.run_number}}
        CGO_ENABLED: 1
      run: |
        source version.txt
        BUILDMAJORVERSION=$MajorVersion
        BUILDMINORVERSION=$MinorVersion
        if [[ ! "$BUILDBRANCH" == *develop ]]
          then
          BUILDPATCHVERSION="${BUILDPATCHVERSION}"
        fi
        BUILDSHORTCOMMITSHA=$(echo $BUILDCOMMITSHA | cut -c 1-7)
        BUILDDATE=$(date)
        echo "BUILDMAJORVERSION: ${BUILDMAJORVERSION}"
        echo "BUILDMINORVERSION: ${BUILDMINORVERSION}"
        echo "BUILDPATCHVERSION: ${BUILDPATCHVERSION}"
        echo "BUILDBRANCH: ${BUILDBRANCH}"
        echo "BUILDCOMMITSHA: ${BUILDCOMMITSHA}"
        echo "BUILDSHORTCOMMITSHA: ${BUILDSHORTCOMMITSHA}"
        echo "BUILDDATE: ${BUILDDATE}"
        echo "BUILDPLATFORM: ${BUILDPLATFORM}"


        echo "BUILDMAJORVERSION=$BUILDMAJORVERSION" >> $GITHUB_ENV
        echo "BUILDMINORVERSION=$BUILDMINORVERSION" >> $GITHUB_ENV
        echo "BUILDPATCHVERSION=$BUILDPATCHVERSION" >> $GITHUB_ENV

        GOOS=darwin GOARCH=arm64 \
        go build -x -v --tags "json1" -ldflags "-X github.com/stackql/stackql/internal/stackql/cmd.BuildMajorVersion=$BUILDMAJORVERSION \
        -X github.com/stackql/stackql/internal/stackql/cmd.BuildMinorVersion=$BUILDMINORVERSION \
        -X github.com/stackql/stackql/internal/stackql/cmd.BuildPatchVersion=$BUILDPATCHVERSION \
        -X github.com/stackql/stackql/internal/stackql/cmd.BuildCommitSHA=$BUILDCOMMITSHA \
        -X github.com/stackql/stackql/internal/stackql/cmd.BuildShortCommitSHA=$BUILDSHORTCOMMITSHA \
        -X \"github.com/stackql/stackql/internal/stackql/cmd.BuildDate=$BUILDDATE\" \
        -X \"stackql/internal/stackql/planbuilder.PlanCacheEnabled=$PLANCACHEENABLED\" \
        -X github.com/stackql/stackql/internal/stackql/cmd.BuildPlatform=$BUILDPLATFORM" \
        -o build/ ./...

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      if: success()
      with:
        name: stackql_darwin_arm64
        path: build/stackql

  dockerbuild:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    
    - name: Git Ref Parse
      id: git_ref_parse
      run: |
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
    
    - name: Install psql
      run: |
          sudo apt-get update
          sudo apt-get install --yes --no-install-recommends \
            postgresql-client \
            ca-certificates \
            openssl

    - name: Install Python dependencies
      run: |
        pip3 install PyYaml
        pip3 install robotframework
    
    - name: Extract Build Info and Persist
      env:
        BUILDCOMMITSHA: ${{github.sha}}
        BUILDBRANCH: ${{github.ref}}
        BUILDPLATFORM: ${{runner.os}}
        BUILDPATCHVERSION: ${{github.run_number}}
      run: |
        source version.txt
        BUILDMAJORVERSION=$MajorVersion
        BUILDMINORVERSION=$MinorVersion
        if [[ ! "$BUILDBRANCH" == *develop ]]
          then
          BUILDPATCHVERSION="${BUILDPATCHVERSION}"
        fi
        BUILDSHORTCOMMITSHA=$(echo $BUILDCOMMITSHA | cut -c 1-7)
        BUILDDATE=$(date)
        echo "BUILDMAJORVERSION: ${BUILDMAJORVERSION}"
        echo "BUILDMINORVERSION: ${BUILDMINORVERSION}"
        echo "BUILDPATCHVERSION: ${BUILDPATCHVERSION}"
        echo "BUILDBRANCH: ${BUILDBRANCH}"
        echo "BUILDCOMMITSHA: ${BUILDCOMMITSHA}"
        echo "BUILDSHORTCOMMITSHA: ${BUILDSHORTCOMMITSHA}"
        echo "BUILDDATE: ${BUILDDATE}"
        echo "BUILDPLATFORM: ${BUILDPLATFORM}"

        echo "BUILDMAJORVERSION=$BUILDMAJORVERSION" >> $GITHUB_ENV
        echo "BUILDMINORVERSION=$BUILDMINORVERSION" >> $GITHUB_ENV
        echo "BUILDPATCHVERSION=$BUILDPATCHVERSION" >> $GITHUB_ENV
    
    - name: Generate rewritten registry for simulations
      run: |
        python3 test/python/registry-rewrite.py --replacement-host=host.docker.internal

    - name: Pull Docker image for cache purposes
      run: |
        docker pull stackql/stackql:latest || echo 'could not pull image for cache purposes'

    - name: Create certificates for robot tests
      run: |
        openssl req -x509 -keyout test/server/mtls/credentials/pg_server_key.pem -out test/server/mtls/credentials/pg_server_cert.pem -config test/server/mtls/openssl.cnf -days 365
        openssl req -x509 -keyout test/server/mtls/credentials/pg_client_key.pem -out test/server/mtls/credentials/pg_client_cert.pem -config test/server/mtls/openssl.cnf -days 365
        openssl req -x509 -keyout test/server/mtls/credentials/pg_rubbish_key.pem -out test/server/mtls/credentials/pg_rubbish_cert.pem -config test/server/mtls/openssl.cnf -days 365 
        openssl req -x509 -keyout vol/srv/credentials/pg_server_key.pem -out  vol/srv/credentials/pg_server_cert.pem -config test/server/mtls/openssl.cnf -days 365
        openssl req -x509 -keyout vol/srv/credentials/pg_client_key.pem -out  vol/srv/credentials/pg_client_cert.pem -config test/server/mtls/openssl.cnf -days 365
        openssl req -x509 -keyout vol/srv/credentials/pg_rubbish_key.pem -out vol/srv/credentials/pg_rubbish_cert.pem -config test/server/mtls/openssl.cnf -days 365

    - name: Build image
      run: |
        docker-compose build credentialsgen
        docker-compose build mockserver
        docker-compose build stackqlsrv

    - name: Mock Server Download
      run: |
        mvn \
        org.apache.maven.plugins:maven-dependency-plugin:3.0.2:copy \
        -Dartifact=org.mock-server:mockserver-netty:5.12.0:jar:shaded \
        -DoutputDirectory=test/downloads

    - name: Debug info
      run: |
        echo "psql version info: $(psql --version)"
        echo ""
        echo "docker-compose version info: $(docker-compose -version)"
        echo ""
        echo "robot version info: $(robot --version)"
        echo ""
        echo "#### ps -ef output   ####"
        echo ""
        ps -ef
        echo ""
        echo "### ###"
        echo ""
        echo "#### docker version output   ####"
        echo ""
        docker version
        echo ""
        echo "### ###"
        echo ""
        echo "#### lsb_release output   ####"
        echo ""
        lsb_release || echo "lsb_release not present"
        echo ""
        echo "### ###"
        echo ""
        echo "#### env output   ####"
        echo ""
        env
        echo ""
        echo "### ###"
        echo ""

    - name: Run robot mocked functional tests
      if: success()
      timeout-minutes: 20
      run: |
        robot --variable EXECUTION_PLATFORM:docker -d test/robot/functional test/robot/functional

    - name: Output from mocked functional tests
      if: always()
      run: |
        cat ./test/robot/functional/output.xml

    - name: Run robot integration tests
      if: success() && startsWith(${{ steps.git_ref_parse.outputs.SOURCE_TAG }}, 'build-release')
      run: |
        robot  --variable EXECUTION_PLATFORM:docker -d test/robot/functional test/robot/integration
