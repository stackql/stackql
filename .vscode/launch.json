{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "inputs": [
    {
      "type": "pickString",
      "id": "queryString",
      "description": "SQL Query string",
      "options": [
        "select \"Key\", Size, StorageClass from  aws.s3.objects where region = 'ap-southeast-1' and bucket = 'stackql-trial-bucket-01' order by \"Key\" ASC;",
        "SELECT c.relname FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = 'public' AND c.relkind in ('r', 'p')",
        "select  kind, name  from  google.compute.acceleratorTypes where project = 'testing-project' and zone = 'australia-southeast1-a' order by name desc;",
        "select  kind, name  from  stackql_intel.\"google.compute.acceleratorTypes\" where project = 'testing-project' and zone like '%australia-southeast1-a' order by name desc;",
        "select name from google.compute.machineTypes where project = 'testing-project' and zone = 'australia-southeast1-a' order by name desc;",
        "select oid, typbasetype from pg_type where typname = 'lo'",
        "SELECT pg_backend_pid()",
        "select relname, nspname, relkind from pg_catalog.pg_class c, pg_catalog.pg_namespace n where relkind in ('r', 'v', 'm', 'f') and nspname not in ('pg_catalog', 'information_schema', 'pg_toast', 'pg_temp_1') and n.oid = relnamespace order by nspname, relname",
        "select r.name, col.login, col.type, col.role_name from stackql_analytics_github.repos.collaborators col inner join stackql_analytics_github.repos.repos r ON col.repo = r.name where col.owner = 'stackql' and r.org = 'stackql' order by r.name, col.login desc;",
        "SELECT * from stackql_intel.\"google.compute.acceleratorTypes\"",
        "select r.name, col.login, col.type, col.role_name from github.repos.collaborators col inner join github.repos.repos r ON col.repo = r.name where col.owner = 'dummyorg' and r.org = 'dummyorg' order by r.name, col.login desc;",
        "select r.name, col.login, col.type, col.role_name from github.repos.collaborators col inner join github.repos.repos r ON col.repo = r.name where col.owner = 'stackql' and r.org = 'stackql' order by r.name, col.login desc;",
        "select r.name, col.login, col.type, col.role_name from stackql_analytics_github.repos.collaborators col inner join stackql_analytics_github.repos.repos r ON col.repo = r.name where col.owner = 'stackql' and r.org = 'stackql' order by r.name, col.login desc;",
        "select ipCidrRange, sum(5) cc  from  google.container.\"projects.aggregated.usableSubnetworks\" where projectsId = 'testing-project' group by ipCidrRange having sum(5) >= 5 order by ipCidrRange desc;",
        "show providers;",
        "select u.name, om.login, u.two_factor_authentication AS is_two_fa_enabled from github.orgs.members om inner join github.users.users u on om.login = u.login AND u.username = om.login where om.org = 'dummyorg' order by u.name desc;",
        "select id, name, url from stackql_repositories;",
        "describe sumologic.users.users;",
        "select id from sumologic.collectors.collectors order by id desc;",
        "select VolumeId, Encrypted, Size from aws.ec2.volumes where region = 'ap-southeast-1' order by VolumeId asc;",
        "SELECT DISTINCT \"EventTime\", \"Identifier\" from aws.cloud_control.resource_requests where data__ResourceRequestStatusFilter='{}' and region = 'ap-southeast-1' order by \"Identifier\", \"EventTime\";",
        "select id, name, url from stackql_repositories where type = 'public';",
        "select aws_region, VolumeId, Size from aws_ec2_all_volumes;",
        "select count(VolumeId) as ct from aws_ec2_all_volumes;",
        "select Arn from aws_cc_bucket_detail;",
        "SELECT JSON_EXTRACT(Properties, '$.Arn') as Arn, JSON_EXTRACT(Properties, '$.BucketName') as BucketName, JSON_EXTRACT(Properties, '$.DomainName') as DomainName, JSON_EXTRACT(Properties, '$.RegionalDomainName') as RegionalDomainName, JSON_EXTRACT(Properties, '$.DualStackDomainName') as DualStackDomainName, JSON_EXTRACT(Properties, '$.WebsiteURL') as WebsiteURL, JSON_EXTRACT(Properties, '$.OwnershipControls.Rules[0].ObjectOwnership') as ObjectOwnership, IIF(JSON_EXTRACT(Properties, '$.PublicAccessBlockConfiguration.RestrictPublicBuckets') = 0, 'false', 'true') as RestrictPublicBuckets, IIF(JSON_EXTRACT(Properties, '$.PublicAccessBlockConfiguration.BlockPublicPolicy') = 0, 'false', 'true') as BlockPublicPolicy, IIF(JSON_EXTRACT(Properties, '$.PublicAccessBlockConfiguration.BlockPublicAcls') = 0, 'false', 'true') as BlockPublicAcls, IIF(JSON_EXTRACT(Properties, '$.PublicAccessBlockConfiguration.IgnorePublicAcls') = 0, 'false', 'true') as IgnorePublicAcls, JSON_EXTRACT(Properties, '$.Tags') as Tags FROM aws.cloud_control.resources WHERE region = 'ap-southeast-2' and data__TypeName = 'AWS::S3::Bucket' and data__Identifier = 'stackql-trial-bucket-01' ;",
        "SELECT i.zone, i.name, i.machineType, i.deletionProtection, '[{\"subnetwork\":\"' || JSON_EXTRACT(i.networkInterfaces, '$[0].subnetwork') || '\"}]', '[{\"boot\": true, \"initializeParams\": { \"diskSizeGb\": \"' || JSON_EXTRACT(i.disks, '$[0].diskSizeGb') || '\", \"sourceImage\": \"' || d.sourceImage || '\"}}]', i.labels FROM google.compute.instances i INNER JOIN google.compute.disks d ON i.name = d.name WHERE i.project = 'testing-project' AND i.zone = 'australia-southeast1-a' AND d.project = 'testing-project' AND d.zone = 'australia-southeast1-a' AND i.name LIKE '%' order by i.name DESC;",
        "select * from aws_cc_bucket_unfiltered where data__MaxResults = 2;",
        "select * from aws_cc_bucket_unfiltered where data__Identifier = 'stackql-trial-bucket-01';",
        "create or replace view self_created as select id, name, url from github.repos.repos where org = 'stackql';",
        "drop view if exists self_created ; ",
        "registry pull azure v23.01.00102 ; ",
        "registry pull azure ; ",
        "select * from aws.pseudo_s3.s3_bucket_listing where region = 'ap-southeast-2' and RegionalDomainName = 'stackql-trial-bucket-01.s3.ap-southeast-1.amazonaws.com';",
        "describe aws.pseudo_s3.s3_bucket_listing;",
        "select role_name from pgi.information_schema.applicable_roles where role_name = 'pg_database_owner';",
        "select r1.role_name from pgi.information_schema.applicable_roles r1 inner join pgi.information_schema.applicable_roles r2 on r1.role_name = r2.role_name order by r1.role_name desc;",
        "select rtg.table_catalog, rtg.table_schema, rtg.table_name, rtg.privilege_type, rtg.is_grantable, ar.is_grantable as role_is_grantable from pgi.information_schema.role_table_grants rtg inner join pgi.information_schema.applicable_roles ar on rtg.grantee = ar.grantee where rtg.table_name = 'pg_statistic' order by privilege_type desc;",
        "SELECT zone AS zone, count(kind) AS \"COUNT(kind)\" FROM (SELECT *    from stackql_intel.\"google.compute.acceleratorTypes\"    limit 3) AS virtual_table GROUP BY zone ORDER BY \"COUNT(kind)\" DESC LIMIT 1000;",
        "select * from (select VolumeId, Encrypted, Size from aws.ec2.volumes where region = 'ap-southeast-1' order by VolumeId asc) as zz;",
        "select * from (select id, name, url from github.repos.repos where org = 'stackql') zz;",
        "select * from zz1;",
        "SELECT \"isSharedCpu\" AS \"isSharedCpu\", count(name) AS \"COUNT(name)\" FROM   (SELECT * from google.compute.machineTypes where project = 'stackql-dev-01' and zone = 'australia-southeast1-a' limit 1000) AS virtual_table GROUP BY \"isSharedCpu\" ORDER BY \"COUNT(name)\" DESC LIMIT 100;",
        "select  kind, name, maximumCardsPerInstance  from  google.compute.accelerator_types where project = 'stackql-demo' and zone = 'australia-southeast1-a' order by name desc;",
        "select * from azure.billing.accounts;",
        "SELECT id, name FROM azure.compute.virtual_machines WHERE resourceGroupName = 'stackql-ops-cicd-dev-01' AND subscriptionId = '631d1c6d-2a65-43e7-93c2-688bfe4e1468';",
        "SELECT a.attname, pg_catalog.format_type(a.atttypid, a.atttypmod), ( SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid) FROM pg_catalog.pg_attrdef d WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef ) AS DEFAULT, a.attnotnull, a.attrelid as table_oid, pgd.description as comment, a.attgenerated as generated, (SELECT json_build_object( 'always', a.attidentity = 'a', 'start', s.seqstart, 'increment', s.seqincrement, 'minvalue', s.seqmin, 'maxvalue', s.seqmax, 'cache', s.seqcache, 'cycle', s.seqcycle) FROM pg_catalog.pg_sequence s JOIN pg_catalog.pg_class c on s.seqrelid = c.\"oid\" WHERE c.relkind = 'S' AND a.attidentity != '' AND s.seqrelid = pg_catalog.pg_get_serial_sequence( a.attrelid::regclass::text, a.attname )::regclass::oid ) as identity_options                 FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_description pgd ON ( pgd.objoid = a.attrelid AND pgd.objsubid = a.attnum) WHERE a.attrelid = '1' AND a.attnum > 0 AND NOT a.attisdropped ORDER BY a.attnum ;",
        "SELECT a.attname, (SELECT s.seqstart FROM pg_catalog.pg_sequence s WHERE s.seqrelid = pg_catalog.pg_get_serial_sequence( a.attrelid::regclass::text, a.attname )::regclass::oid ) as identity_options FROM pg_catalog.pg_attribute a ORDER BY a.attnum ;",
        "SELECT     cons.conname as name,     cons.conkey as key,     a.attnum as col_num,     a.attname as col_name FROM     pg_catalog.pg_constraint cons     join pg_attribute a       on cons.conrelid = a.attrelid AND         a.attnum = ANY(cons.conkey) WHERE     cons.conrelid = '16709' AND     cons.contype = 'u' ;",
        "select * from aws.ec2.instances where region = 'us-east-1';",
        "insert into aws.ec2.volumes(AvailabilityZone, Size, region, TagSpecification) select 'ap-southeast-1a', JSON(10), 'ap-southeast-1', JSON('[ { \"ResourceType\": \"volume\", \"Tag\": [ { \"Key\": \"stack\", \"Value\": \"production\" }, { \"Key\": \"name\", \"Value\": \"multi-tag-volume\" } ] } ]');",
        "select d1.name as n, d1.id, d2.id as d2_id from google.compute.disks d1 inner join google.compute.disks d2 on d1.id = d2.id where d1.project = 'testing-project' and d1.zone = 'australia-southeast1-b' and d2.project = 'testing-project' and d2.zone = 'australia-southeast1-b' order by d1.name ASC;",
        "show insert into google.compute.instances_iam_policies;",
        "select 1, 'xy', 2;",
        "select price_monthly from digitalocean.sizes.sizes ;",
        "INSERT INTO digitalocean.droplets.droplets ( data__name, data__region, data__size, data__image, data__backups, data__ipv6, data__monitoring, data__tags ) SELECT 'some.example.com', 'nyc3', 's-1vcpu-1gb', 'ubuntu-20-04-x64', true, true, true, '[\"env:prod\", \"web\"]';",
        "select * from aws.cloud_watch.log_events where region = 'ap-southeast-1' and data__logGroupName = 'LogGroupResourceExample' and data__logStreamName = 'test-01' and data__startTime = 1680528971832 ;",
        "begin; INSERT INTO digitalocean.droplets.droplets ( data__name, data__region, data__size, data__image, data__backups, data__ipv6, data__monitoring, data__tags ) SELECT 'some.example.com', 'nyc3', 's-1vcpu-1gb', 'ubuntu-20-04-x64', true, true, true, '[\"env:prod\", \"web\"]' ; INSERT INTO digitalocean.droplets.droplets ( data__name, data__region, data__size, data__image, data__backups, data__ipv6, data__monitoring, data__tags ) SELECT 'some.example.com', 'nyc3', 's-1vcpu-1gb', 'ubuntu-20-04-x64', true, true, true, '[\"env:prod\", \"web\"]' ; INSERT INTO digitalocean.droplets.droplets ( data__name, data__region, data__size, data__image, data__backups, data__ipv6, data__monitoring, data__tags ) SELECT 'error.example.com', 'nyc3', 's-1vcpu-1gb', 'ubuntu-20-04-x64', true, true, true, '[\"env:prod\", \"web\"]' ; commit;",
        "select 1;",
        "SELECT c.oid FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n  ON n.oid = c.relnamespace WHERE (n.nspname = 'information_schema') AND c.relname = 'attributes' AND c.relkind in ('r', 'v', 'm', 'f', 'p') ; ",
        "SELECT c.oid\n            FROM pg_catalog.pg_class c\n            LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace\n            WHERE (n.nspname = 'information_schema')\n            AND c.relname = 'attributes' AND c.relkind in\n            ('r', 'v', 'm', 'f', 'p')\n        ",
        "SELECT a.attname,\n              pg_catalog.format_type(a.atttypid, a.atttypmod),\n              (\n                SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid)\n                FROM pg_catalog.pg_attrdef d\n                WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum\n                AND a.atthasdef\n              ) AS DEFAULT,\n              a.attnotnull,\n              a.attrelid as table_oid,\n              pgd.description as comment,\n              a.attgenerated as generated,\n                              (SELECT json_build_object(\n                    'always', a.attidentity = 'a',\n                    'start', s.seqstart,\n                    'increment', s.seqincrement,\n                    'minvalue', s.seqmin,\n                    'maxvalue', s.seqmax,\n                    'cache', s.seqcache,\n                    'cycle', s.seqcycle)\n                FROM pg_catalog.pg_sequence s\n                JOIN pg_catalog.pg_class c on s.seqrelid = c.\"oid\"\n                WHERE c.relkind = 'S'\n                AND a.attidentity != ''\n                AND s.seqrelid = pg_catalog.pg_get_serial_sequence(\n                    a.attrelid::regclass::text, a.attname\n                )::regclass::oid\n                ) as identity_options                \n            FROM pg_catalog.pg_attribute a\n            LEFT JOIN pg_catalog.pg_description pgd ON (\n                pgd.objoid = a.attrelid AND pgd.objsubid = a.attnum)\n            WHERE a.attrelid = '13429'\n            AND a.attnum > 0 AND NOT a.attisdropped\n            ORDER BY a.attnum\n        ",
        "SELECT t.typname as \"name\",\n               pg_catalog.format_type(t.typbasetype, t.typtypmod) as \"attype\",\n               not t.typnotnull as \"nullable\",\n               t.typdefault as \"default\",\n               pg_catalog.pg_type_is_visible(t.oid) as \"visible\",\n               n.nspname as \"schema\"\n            FROM pg_catalog.pg_type t\n               LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace\n            WHERE t.typtype = 'd'\n        ",
        "SELECT t.typname as \"name\",\n               -- no enum defaults in 8.4 at least\n               -- t.typdefault as \"default\",\n               pg_catalog.pg_type_is_visible(t.oid) as \"visible\",\n               n.nspname as \"schema\",\n               e.enumlabel as \"label\"\n            FROM pg_catalog.pg_type t\n                 LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace\n                 LEFT JOIN pg_catalog.pg_enum e ON t.oid = e.enumtypid\n            WHERE t.typtype = 'e'\n        ORDER BY \"schema\", \"name\", e.oid",
        "SELECT a.attname FROM pg_attribute a JOIN ( SELECT unnest(ix.indkey) attnum, generate_subscripts(ix.indkey, 1) ord FROM pg_index ix WHERE ix.indrelid = '13420' AND ix.indisprimary ) k ON a.attnum=k.attnum WHERE a.attrelid = '13420'  ORDER BY k.ord ;",
        "select aws_region, volumeId, encrypted, size from aws_ec2_all_volumes ;",
        "select d1.name as n, d1.id, n1.description, s1.description as s1_description from google.compute.disks d1 inner join google.compute.networks n1 on d1.name = n1.name inner join google.compute.subnetworks s1 on d1.name = s1.name where d1.project = 'stackql-demo' and d1.zone = 'australia-southeast1-b' and n1.project = 'stackql-demo' and s1.project = 'stackql-demo' and s1.region = 'australia-southeast1' ;",
        "select Properties FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::S3::Bucket';",
        "select bucket_name from vvzz;",
        "create or replace view vvzz as select json_extract_path_text(Properties, 'BucketName') bucket_name, json_extract_path_text(Properties, 'VersioningConfiguration', 'Status') versioning FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::S3::Bucket' and data__Identifier = 'stackql-registry-artifacts';",
        "create or replace view sv_01 as select name, watchers from github.repos.repos where org = 'stackql' and watchers > 5;",
        "select UserName, PasswordLastUsed, CASE WHEN ( TO_TIMESTAMP(PasswordLastUsed, 'YYYY-MM-DDTHH:MI:SSZ') > (now() - interval '7 days' ) ) then true else false end as inactive from aws.iam.users WHERE region = 'us-east-1' and PasswordLastUsed is not null;",
        "select UserName, PasswordLastUsed, CASE WHEN ( strftime('%Y-%m-%d %H:%M:%SZ', PasswordLastUsed) > ( datetime('now', '-7 days' ) ) ) then true else false end as inactive from aws.iam.users WHERE region = 'us-east-1' and PasswordLastUsed is not null;",
        "CREATE OR REPLACE VIEW cross_cloud_users AS         select         'aws' as cloud,        UserName as user_name,        PasswordLastUsed as last_Login_time,        CASE           WHEN PasswordLastUsed is null then 'false'          WHEN PasswordLastUsed = '' then 'false'          WHEN (           TO_TIMESTAMP(PasswordLastUsed, 'YYYY-MM-DDTHH:MI:SSZ')           > (now() - interval '7 days' ) )         then 'true' else 'false' end as active         from aws.iam.users         WHERE         region = 'us-east-1'        UNION ALL        select           'google' as cloud,          json_extract(name, '$.fullName') as user_name,           lastLoginTime as last_Login_time,          CASE           WHEN lastLoginTime is null then 'false'          WHEN lastLoginTime = '' then 'false'          WHEN (           TO_TIMESTAMP(lastLoginTime, 'YYYY-MM-DDTHH:MI:SSZ')           > (now() - interval '7 days' ) )         then 'true' else 'false' end as active        from googleadmin.directory.users         where         domain = 'ryukit.com' ; select * from cross_cloud_users;",
        "select    aid.UserName as aws_user_name,   aid.PasswordLastUsed as aws_last_Login_time,   CASE      WHEN aid.PasswordLastUsed = '' then 'false'     WHEN (      TO_TIMESTAMP(aid.PasswordLastUsed, 'YYYY-MM-DDTHH:MI:SSZ')      > (now() - interval '7 days' ) )     then 'true'      else 'false'    end as aws_is_active,   json_extract(gad.name, '$.fullName') as google_user_name,    gad.lastLoginTime as google_last_Login_time,   CASE    WHEN gad.lastLoginTime is null then 'false'   WHEN gad.lastLoginTime = '' then 'false'   WHEN (    TO_TIMESTAMP(gad.lastLoginTime, 'YYYY-MM-DDTHH:MI:SSZ')    > (now() - interval '7 days' ) )  then 'true' else 'false' end as google_is_active from aws.iam.users aid LEFT OUTER JOIN googleadmin.directory.users gad ON lower(substr(aid.UserName, 1, 5)) = lower(substr(json_extract_path_text(gad.name, 'fullName'), 1, 5)) WHERE  aid.region = 'us-east-1' AND gad.domain = 'ryukit.com' ;",
        "select aid.UserName as aws_user_name, aid.PasswordLastUsed as aws_last_Login_time, CASE WHEN aid.PasswordLastUsed = '' then 'false' WHEN ( strftime('%Y-%m-%d %H:%M:%SZ', aid.PasswordLastUsed) > ( datetime('now', '-20 days' ) ) ) then 'true' else 'false' end as aws_is_active, json_extract(gad.name, '$.fullName') as google_user_name, gad.lastLoginTime as google_last_Login_time, CASE WHEN gad.lastLoginTime is null then 'false' WHEN gad.lastLoginTime = '' then 'false' WHEN ( strftime('%Y-%m-%d %H:%M:%SZ', gad.lastLoginTime) > ( datetime('now', '-20 days' ) ) ) then 'true' else 'false' end as google_is_active, lower(substr(json_extract(gad.name, '$.fullName'), 1, 5)) as aws_fuzz_name, lower(substr(aid.UserName, 1, 5)) as gcp_fuzz_name from aws.iam.users aid LEFT OUTER JOIN googleadmin.directory.users gad ON lower(substr(aid.UserName, 1, 5)) = lower(substr(json_extract(gad.name, '$.fullName'), 1, 5)) WHERE aid.region = 'us-east-1' AND gad.domain = 'ryukit.com' ;",
        "select aid.UserName as aws_user_name, aid.PasswordLastUsed as aws_last_Login_time, CASE WHEN aid.PasswordLastUsed = '' then 'false' WHEN ( TO_TIMESTAMP(aid.PasswordLastUsed, 'YYYY-MM-DDTHH:MI:SSZ') > (now() - interval '7 days' ) ) then 'true' else 'false' end as aws_is_active, json_extract(gad.name, '$.fullName') as google_user_name, gad.lastLoginTime as google_last_Login_time, CASE WHEN gad.lastLoginTime is null then 'false' WHEN gad.lastLoginTime = '' then 'false' WHEN ( TO_TIMESTAMP(gad.lastLoginTime, 'YYYY-MM-DDTHH:MI:SSZ') > (now() - interval '7 days' ) ) then 'true' else 'false' end as google_is_active from aws.iam.users aid LEFT OUTER JOIN googleadmin.directory.users gad ON lower(substr(aid.UserName, 1, 5)) = lower(substr(json_extract_path_text(gad.name, 'fullName'), 1, 5)) WHERE aid.region = 'us-east-1' AND gad.domain = 'ryukit.com' ;",
        "select nw.name as network_name, split_part(sn.network, '/', 10) as sn_fuzz  from google.compute.networks nw LEFT OUTER JOIN google.compute.subnetworks sn  on lower(nw.name) = lower(split_part(sn.network, '/', 10))    where nw.project = 'testing-project' and sn.region = 'australia-southeast1' and sn.project = 'testing-project' order by network_name; commit;",
        "begin; insert into googleadmin.directory.users(data__primaryEmail) values ('somejimbo@grubit.com'); rollback;",
        "begin; insert into googleadmin.directory.users(data__primaryEmail) values ('joeblow@grubit.com'); rollback;",
        "select count(*) from stackql_repositories;",
        "select count(*) as repository_count from stackql_repositories;",
        "select * from google.compute.instances where project = 'stackql-demo';",
        "SELECT * FROM google.cloudasset.assets WHERE parent = 'projects/stackql-demo';",
        "select sn.name from google.compute.subnetworks_iam_policies ip join google.compute.subnetworks sn  on ip.resource = sn.name and ip.region = split_part(sn.region, '/', 8) where ip.project = 'stackql-demo' and sn.project = 'stackql-demo' ;",
        "select * from google.compute.firewalls where project = 'stackql-demo' and JSON_EXTRACT(sourceRanges, '$[0]') = '0.0.0.0/0';",
        "select *, JSON_EXTRACT(sourceRanges, '$[0]') sr  from google.compute.firewalls where project = 'stackql-demo' and sr = '0.0.0.0/0';",
        "select *, json_extract_path_text(sourceRanges, '0') as sr from google.compute.firewalls where project = 'stackql-demo' and json_extract_path_text(sourceRanges, '0') = '0.0.0.0/0';",
        "select *, JSON_EXTRACT(sourceRanges, '$[0]') sr  from google.compute.firewalls, json_each(sourceRanges) where project = 'stackql-demo' and JSON_EXTRACT(sourceRanges, '$[0]') = '0.0.0.0/0';",
        "select count(*) from stackql_repositories;",
        "select *, JSON_EXTRACT(sourceRanges, '$[0]') sr  from google.compute.firewalls, json_each(sourceRanges) where project = 'stackql-demo';",
        "select fw.id, JSON_EXTRACT(fw.sourceRanges, '$[0]') sr  from google.compute.firewalls fw, json_each(sourceRanges) where project = 'stackql-demo';",
        "select fw.id, JSON_EXTRACT(fw.sourceRanges, '$[0]') sr, json_each.value as source_range  from google.compute.firewalls fw, json_each(sourceRanges) where project = 'stackql-demo';",
        "select fw.id, rd.value as source_range  from google.compute.firewalls fw, json_array_elements_text(sourceRanges) as rd where project = 'stackql-demo';",
        "select * from stackql_gossip;",
        "select * from stackql_notes order by priority desc;",
        "select note, gossip from stackql_notes sn inner join stackql_gossip sg on case when sn.priority = 1000 then 'opinion' else 'tech' end = sg.category  order by sn.priority desc;",
        "create materialized view silly_mv as select * from google.compute.firewalls where project = 'stackql-demo';",
        "create materialized view mv_one as select 1 as one;",
        "create materialized view silly_mv as select * from google.compute.firewalls where project = 'stackql-demo'; select * from silly_mv;",
        "drop materialized view mv_one;",
        "create materialized view mv_one as select 1 as one; drop materialized view mv_one; select * from mv_one; create materialized view mv_one as select 1 as one; select * from mv_one;",
        "create materialized view mv_one as select 1 as one; refresh materialized view mv_one;",
        "create materialized view silly_mv as select * from google.compute.firewalls where project = 'stackql-demo'; refresh materialized view silly_mv; select * from silly_mv;",
        "refresh materialized view stackql_gossip;",
        "insert into stackql_notes(note, priority) values ('this is a test', 2000); select note from stackql_notes order by priority desc;",
        "insert into stackql_notes(note, priority) select name from google.compute.firewalls where project = 'stackql-demo'; select * from silly_mv;",
        "select gossip, 3000 from stackql_gossip;",
        "create table my_silly_table(id int, name text, magnitude numeric); insert into my_silly_table(id, name, magnitude) values (1, 'one', 1.0); insert into my_silly_table(id, name, magnitude) values (2, 'two', 2.0); insert into my_silly_table(id, name, magnitude) values (3, 'three', 3.0); select name, magnitude from my_silly_table order by magnitude desc;",
        "update stackql_notes set priority = 1100 where priority = 1000; select note, priority from stackql_notes order by priority desc;",
        "delete from stackql_notes where priority = 2000; select note, priority from stackql_notes order by priority desc;",
        "update stackql_notes set priority = 1100 where priority = 1000;",
        "create table my_silly_table(id int, name text, magnitude numeric); insert into my_silly_table(id, name, magnitude) values (1, 'one', 1.0); insert into my_silly_table(id, name, magnitude) values (2, 'two', 2.0); select name, magnitude from my_silly_table order by magnitude desc; update my_silly_table set magnitude = 1.5 where id = 1; select name, magnitude from my_silly_table order by magnitude desc; drop table my_silly_table;",
        "delete from stackql_notes; select note, priority from stackql_notes order by priority desc;",
        "SELECT memoryInfo, hypervisor, autoRecoverySupported, instanceType, SPLIT_PART(processorInfo, '\n', 3) as processorArch, currentGeneration, freeTierEligible, hibernationSupported, SPLIT_PART(vCpuInfo, '\n', 2) as vCPUs, bareMetal, burstablePerformanceSupported, dedicatedHostsSupported,  region FROM aws.ec2.instance_types WHERE region = 'us-east-1';",
        "SELECT * FROM aws.ec2.instance_types WHERE region = 'us-east-1';",
        "CREATE MATERIALIZED VIEW vw_ec2_instance_types AS SELECT memoryInfo, hypervisor, autoRecoverySupported, instanceType, SPLIT_PART(processorInfo, '\n', 3) as processorArch, currentGeneration, freeTierEligible, hibernationSupported, SPLIT_PART(vCpuInfo, '\n', 2) as vCPUs, bareMetal, burstablePerformanceSupported, dedicatedHostsSupported,  region FROM aws.ec2.instance_types WHERE region = 'us-east-1'; SELECT i.instanceId, i.instanceType, it.vCPUs, it.memoryInfo FROM aws.ec2.instances i INNER JOIN vw_ec2_instance_types it ON i.instanceType = it.instanceType WHERE i.region = 'us-east-1';",
        "create materialized view vw_aws_usr as select * from aws.iam.users where region = 'us-east-1'; select u1.Arn, u2.UserName, u1.region from aws.iam.users u1 inner join vw_aws_usr u2 on u1.Arn = u2.Arn where u1.region = 'us-east-1' and u2.region = 'us-east-1' ;",
        "create materialized view org_celebrity_contributors as ( select login, contributions FROM github.repos.contributors WHERE owner = 'stackql' AND repo = 'go-openapistackql' UNION ALL select login, contributions FROM github.repos.contributors WHERE owner = 'stackql' AND repo = 'stackql' UNION ALL select login, contributions FROM github.repos.contributors WHERE owner = 'stackql' AND repo = 'stackql-provider-registry') ;",
        "create materialized view org_celeb_contributors as select login, contributions FROM github.repos.contributors WHERE owner = 'stackql' AND repo = 'go-openapistackql' UNION ALL select login, contributions FROM github.repos.contributors WHERE owner = 'stackql' AND repo = 'stackql' UNION ALL select login, contributions FROM github.repos.contributors WHERE owner = 'stackql' AND repo = 'stackql-provider-registry' ;"
      ],
      "default": "show providers;"
    },
    {
      "type": "pickString",
      "id": "registryString",
      "description": "Registry Configuration",
      "options": [
        "{ \"url\": \"file://${workspaceFolder}/test/registry-sandbox\", \"localDocRoot\": \"${workspaceFolder}/test/registry-sandbox\", \"verifyConfig\": { \"nopVerify\": true } }",
        "{ \"url\": \"file://${workspaceFolder}/test/registry\", \"localDocRoot\": \"${workspaceFolder}/test/registry\", \"verifyConfig\": { \"nopVerify\": true } }",
        "{ \"url\": \"file://${workspaceFolder}/test/registry-mocked\", \"localDocRoot\": \"${workspaceFolder}/test/registry-mocked\", \"verifyConfig\": { \"nopVerify\": true } }",
        "{ \"url\": \"file://${workspaceFolder}/test/registry-mocked-native\", \"localDocRoot\": \"${workspaceFolder}/test/registry-mocked-native\", \"verifyConfig\": { \"nopVerify\": true } }",
        "{ \"url\": \"file://${workspaceFolder}/test/registry-advanced\", \"localDocRoot\": \"${workspaceFolder}/test/registry-advanced\", \"verifyConfig\": { \"nopVerify\": true } }",
        "{ \"url\": \"file://${workspaceFolder}/build/.stackql\", \"localDocRoot\": \"${workspaceFolder}/build/.stackql\" }",
        "{ \"url\": \"file://${workspaceFolder}/examples/empty-registry\", \"localDocRoot\": \"${workspaceFolder}/examples/empty-registry\" }",
        "{ \"url\": \"https://cdn.statically.io/gh/stackql/stackql-provider-registry/main/providers\", \"localDocRoot\": \"${workspaceFolder}/test/registry\" }",
        "{ \"url\": \"https://cdn.statically.io/gh/stackql/stackql-provider-registry/dev/providers\" }",
        "{ \"url\": \"https://registry-dev.stackql.app/providers\" }",
        "{ \"url\": \"https://registry.stackql.app/providers\" }"
      ],
      "default": "{ \"url\": \"file://${workspaceFolder}/test/registry\", \"localDocRoot\": \"${workspaceFolder}/test/registry\", \"verifyConfig\": { \"nopVerify\": true } }"
    },
    {
      "type": "pickString",
      "id": "authString",
      "description": "Auth Input arg String",
      "default": "{ \"azure\": { \"type\": \"azure_default\" }, \"digitalocean\": { \"type\": \"bearer\", \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/digitalocean-key.txt\" }, \"google\": { \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/stackql-security-reviewer.json\" },  \"googleadmin\": { \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/ryuk-it-query.json\" }, \"okta\": { \"credentialsfilepath\": \"${workspaceFolder}/keys/okta-token.txt\", \"type\": \"api_key\" }, \"github\": { \"type\": \"basic\", \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/github-key.txt\" }, \"aws\": { \"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/aws-secret-key.txt\", \"keyID\": \"AKIA376P4FQSS2ONB2NS\" }, \"netlify\": { \"type\": \"api_key\", \"valuePrefix\": \"Bearer \", \"credentialsfilepath\": \"${workspaceFolder}/keys/netlify-token.txt\"  }, \"k8s\": { \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/k8s-token.txt\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \" }, \"sumologic\": { \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/sumologic-token.txt\", \"type\": \"basic\" } }",
      "options": [
        "{ \"azure\": { \"type\": \"azure_default\" }, \"digitalocean\": { \"type\": \"bearer\", \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/digitalocean-key.txt\" }, \"google\": { \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/stackql-security-reviewer.json\" },  \"googleadmin\": { \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/ryuk-it-query.json\" }, \"okta\": { \"credentialsfilepath\": \"${workspaceFolder}/keys/okta-token.txt\", \"type\": \"api_key\" }, \"github\": { \"type\": \"basic\", \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/github-key.txt\" }, \"aws\": { \"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/aws-secret-key.txt\", \"keyID\": \"AKIA376P4FQSS2ONB2NS\" }, \"netlify\": { \"type\": \"api_key\", \"valuePrefix\": \"Bearer \", \"credentialsfilepath\": \"${workspaceFolder}/keys/netlify-token.txt\"  }, \"k8s\": { \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/k8s-token.txt\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \" }, \"sumologic\": { \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/sumologic-token.txt\", \"type\": \"basic\" } }",
        "{ \"google\": { \"credentialsfilepath\": \"${workspaceFolder}/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\" }, \"googleadmin\": { \"credentialsfilepath\": \"${workspaceFolder}/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\" },s \"okta\": { \"credentialsfilepath\": \"${workspaceFolder}/test/assets/credentials/dummy/okta/api-key.txt\", \"type\": \"api_key\", \"valuePrefix\": \"SSWS \" }, \"github\": { \"type\": \"basic\", \"credentialsfilepath\": \"${workspaceFolder}/test/assets/credentials/dummy/okta/api-key.txt\" }, \"aws\": { \"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"${workspaceFolder}/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"AKIA376P4FQSS2ONB2NS\" }, \"netlify\": { \"type\": \"api_key\", \"valuePrefix\": \"Bearer \", \"credentialsfilepath\": \"${workspaceFolder}/test/assets/credentials/dummy/netlify/netlify-token.txt\"  }, \"k8s\": { \"credentialsfilepath\": \"${workspaceFolder}/test/assets/credentials/dummy/k8s/k8s-token.txt\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \" }, \"sumologic\": { \"credentialsfilepath\": \"${workspaceFolder}/test/assets/credentials/dummy/sumologic/sumologic-token.txt\", \"type\": \"basic\" } }",
        "{ \"pgi\": { \"type\": \"sql_data_source::postgres\", \"sqlDataSource\": { \"dsn\": \"postgres://stackql:stackql@127.0.0.1:8432\" } }, \"azure\": { \"type\": \"azure_default\" }, \"google\": { \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/stackql-security-reviewer.json\" }, \"okta\": { \"credentialsfilepath\": \"${workspaceFolder}/keys/okta-token.txt\", \"type\": \"api_key\" }, \"github\": { \"type\": \"basic\", \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/github-key.txt\" }, \"aws\": { \"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/aws-secret-key.txt\", \"keyID\": \"AKIA376P4FQSS2ONB2NS\" }, \"netlify\": { \"type\": \"api_key\", \"valuePrefix\": \"Bearer \", \"credentialsfilepath\": \"${workspaceFolder}/keys/netlify-token.txt\"  }, \"k8s\": { \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/k8s-token.txt\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \" }, \"sumologic\": { \"credentialsfilepath\": \"${workspaceFolder}/keys/integration/sumologic-token.txt\", \"type\": \"basic\" } }",
        "{ \"digitalocean\": { \"username_var\": \"DUMMY_DIGITALOCEAN_USERNAME\", \"password_var\": \"DUMMY_DIGITALOCEAN_PASSWORD\", \"type\": \"bearer\" } }"
      ]
    },
    {
      "type": "pickString",
      "id": "buildFlags",
      "description": "Extra Build Flags for debug; cannot place elsewhere",
      "default": "-tags=json1,sqleanall",
      "options": [
        "-tags=json1,sqleanall"
      ]
    },

    {
      "type": "pickString",
      "id": "sessionString",
      "description": "Auth Input arg String",
      "default": "",
      "options": [
        "{}",
        "{ \"rollback_type\": \"eager\" }",
      ]
    },
    // "-tags=json1,sqleanall"
    {
      "type": "pickString",
      "id": "gcString",
      "description": "GC Input arg String",
      "default": "{}",
      "options": [
        "{}",
        "{ \"isEager\": true }"
      ]
    },
    {
      "type": "pickString",
      "id": "namespaceString",
      "description": "Namespace JSON config String",
      "default": "{}",
      "options": [
        "{}",
        "{ \"analytics\": { \"ttl\": 86400, \"regex\": \"^(?:stackql_analytics_)?(?P<objectName>.*)$\", \"template\": \"stackql_analytics_{{ .objectName }}\" } }",
        "{ \"analytics\": { \"ttl\": 86400, \"regex\": \"^(?P<objectName>.*)$\", \"template\": \"stackql_analytics_{{ .objectName }}\" } }"
      ]
    },
    {
      "type": "promptString",
      "id": "gcpProject",
      "description": "GCP Project arg String",
      "default": "lab-kr-network-01"
    },
    {
      "type": "pickString",
      "id": "sqlBackendString",
      "description": "SQL backend Input arg String",
      "default": "{}",
      "options": [
        "{}",
        "{ \"dbEngine\": \"postgres_tcp\", \"sqlDialect\": \"postgres\", \"dsn\": \"postgres://stackql:stackql@127.0.0.1:5432/stackql\" }",
        "{ \"dbEngine\": \"postgres_tcp\", \"sqlDialect\": \"postgres\", \"dsn\": \"postgres://stackql:stackql@127.0.0.1:7432/stackql\" }",
        "{ \"dbEngine\": \"postgres_tcp\", \"sqlDialect\": \"postgres\", \"dsn\": \"postgres://stackql:stackql@127.0.0.1:7432/stackql\", \"schemata\": { \"tableSchema\": \"stackql_raw\", \"intelViewSchema\": \"stackql_intel\", \"opsViewSchema\": \"stackql_ops\" } }",
        "{ \"dbInitFilepath\": \"${workspaceFolder}/test/db/postgres/cache_setup.sql\", \"dbEngine\": \"postgres_tcp\", \"sqlDialect\": \"postgres\", \"dsn\": \"postgres://stackql:stackql@127.0.0.1:7432/stackql\", \"schemata\": { \"tableSchema\": \"stackql_raw\", \"intelViewSchema\": \"stackql_intel\", \"opsViewSchema\": \"stackql_ops\" } }",
        "{ \"dsn\": \"file:${workspaceFolder}/build/db.sqlite\"}"
      ]
    },
    {
      "type": "pickString",
      "id": "dbInternalString",
      "description": "routing internal queries",
      "default": "{}",
      "options": [
        "{}",
        "{ \"tableRegex\": \"(?i)^(?:public\\\\.)?(?:pg_.*|current_schema|information_schema|stackql_intel)\" }"
      ]
    }
  ],
  "configurations": [
    // ATTACH
    {
      // need to edit processId as appropriate
      "name": "Attach to local process -- eg shell -- amend processId as required",
      "type": "go",
      "request": "attach",
      "mode": "local",
      "processId": 16075
    },
    // DEBUG
    {
      "name": "analytics select",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--auth=${input:authString}",
        "--registry=${input:registryString}",
        "--namespaces=${input:namespaceString}",
        "--sqlBackend={ \"dbInitFilepath\": \"${workspaceFolder}/test/db/cache_setup.sql\" }" ,
        "select r.name, col.login, col.type, col.role_name from github.repos.collaborators col inner join github.repos.repos r ON col.repo = r.name where col.owner = 'stackql' and r.org = 'stackql' order by r.name, col.login desc;"
      ],
    },
    {
      "name": "analytics select NOT primed",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--auth=${input:authString}",
        "--registry=${input:registryString}",
        "--namespaces=${input:namespaceString}",
        "select r.name, col.login, col.type, col.role_name from github.repos.collaborators col inner join github.repos.repos r ON col.repo = r.name where col.owner = 'stackql' and r.org = 'stackql' order by r.name, col.login desc;"
      ],
    },
    {
      "name": "analytics select NOT primed GRAPHQL",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--auth=${input:authString}",
        "--registry=${input:registryString}",
        "--namespaces=${input:namespaceString}",
        "--tls.allowInsecure=true",
        "select substr(su.userName, 1, instr(su.userName, '@') - 1), su.externalId, su.id, u.login, u.two_factor_authentication AS is_two_fa_enabled from github.scim.users su inner join github.users.users u ON substr(su.userName, 1, instr(su.userName, '@') - 1) = u.username and substr(su.userName, 1, instr(su.userName, '@') - 1) = u.login where su.org = 'dummyorg' order by su.id asc;"
      ],
    }, 
    {
      "name": "AWAIT exec ... ;",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--auth=${input:authString}",
        "--registry=${input:registryString}",
        "EXEC /*+ some AWAIT */ compute.disks.insert @project='${input:gcpProject}', @zone= 'australia-southeast1-a' @@json='{ \"name\": \"test-disk9\", \"sizeGb\": 10 }';",
        "-o",
        "json"
      ],
    },
    {
      "name": "aws INSERT volume ... ;",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "insert into aws.ec2.volumes(AvailabilityZone, Size, region) select 'ap-southeast-1a', 10, 'ap-southeast-1';"
      ],
    },
    {
      "name": "aws guff failing",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "--tls.allowInsecure",
        "select \"Key\", Size, StorageClass from aws.s3.objects where region = 'ap-southeast-1' and bucket = 'stackql-trial-bucket-01' order by \"Key\" ASC;"
      ],
    },
    {
      "name": "aws select volumes ... ;",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "select * from aws.ec2.volumes where region = 'ap-southeast-1';"
      ],
    },
    {
      "name": "azure guff",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "--tls.allowInsecure",
        "SELECT type, resources, zones, extendedLocation FROM azure.compute.virtual_machines WHERE resourceGroupName = 'stackql-ops-cicd-dev-01' AND subscriptionId = '631d1c6d-2a65-43e7-93c2-688bfe4e1468';"
      ],
    },
    {
      "name": "Boilerplate",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "SELECT t.oid, typarray FROM pg_type t JOIN pg_namespace ns ON typnamespace = ns.oid WHERE typname = 'hstore';"
      ],
    },
    {
      "name": "Boilerplate; pg_catalog",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "select pg_catalog.version();"
      ],
    },
    {
      "name": "EXPAND \"select from exec ... ;\" -- prebuilt with cmake",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--auth=${input:authString}",
        "--cpuprofile=${workspaceFolder}/build/prof1.prof",
        "select name from (EXEC /*+ SHOWRESULTS */ google.compute.disks.get @disk = 'my-disk-01-indeed',  @project = '${input:gcpProject}', @zone = 'australia-southeast1-a');",
        "-o",
        "json"
      ],
    },
    {
      "name": "generic exec",
      "type": "go",
      "env": {
        "DUMMY_DIGITALOCEAN_USERNAME": "myusername",
        "DUMMY_DIGITALOCEAN_PASSWORD": "mypassword"
      },
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "buildFlags": "${input:buildFlags}",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "--session=${input:sessionString}",
        "--tls.allowInsecure",
        "--sqlBackend=${input:sqlBackendString}",
        "--namespaces=${input:namespaceString}",
        "--dbInternal=${input:dbInternalString}",
        "${input:queryString}"
      ],
    },
    {
      "name": "github guff",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "--tls.allowInsecure",
        "select r.name, col.login, col.type, col.role_name from github.repos.collaborators col inner join github.repos.repos r ON col.repo = r.name where col.owner = 'stackql' and r.org = 'stackql';"
      ],
    },
    {
      "name": "github pages",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "--tls.allowInsecure",
        "--sqlBackend=${input:sqlBackendString}",
        "select url from github.repos.pages where owner = 'dummyorg' and repo = 'dummyapp.io' ;"
      ],
    },
    {
      "name": "google case sensitive",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "--tls.allowInsecure",
        "--sqlBackend=${input:sqlBackendString}",
        "select ipCidrRange, sum(5) cc  from  google.container.\"projects.aggregated.usableSubnetworks\" where projectsId = 'testing-project' group by ipCidrRange having sum(5) >= 5 order by ipCidrRange desc;"
      ],
    },
    {
      "name": "google JOIN docker defective",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "--tls.allowInsecure",
        "--sqlBackend=${input:sqlBackendString}",
        "select JSON_EXTRACT(saml.samlIdentity, '$.username') as saml_username, om.login as github_login, ou.status as okta_status from github.scim.saml_ids saml INNER JOIN okta.user.users ou ON JSON_EXTRACT(saml.samlIdentity, '$.username') = JSON_EXTRACT(ou.profile, '$.login') INNER JOIN github.orgs.members om ON JSON_EXTRACT(saml.user, '$.login') = om.login where ou.subdomain = 'dummyorg' AND om.org = 'dummyorg' AND saml.org = 'dummyorg' order by om.login desc;"
      ],
    },
    {
      "name": "google unknown docker defective",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "--tls.allowInsecure",
        "--sqlBackend=${input:sqlBackendString}",
        "SELECT etag FROM google.compute.instances_iam_policies WHERE project = 'testing-project' AND zone = 'australia-southeast1-a' AND resource = '000000001';"
      ],
    },
    {
      "name": "google unknown2 docker defective",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "--tls.allowInsecure",
        "--sqlBackend=${input:sqlBackendString}",
        "select   members,  GROUP_CONCAT(role) as roles from   (     exec /*+ SHOWRESULTS */     google.cloudresourcemanager.organizations.getIamPolicy     @organizationsId = '123456789012'   ) GROUP BY members;"
      ],
    },
    {
      "name": "google WHERE docker defective",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "--tls.allowInsecure",
        "--sqlBackend=${input:sqlBackendString}",
        "select  kind, name  from  google.compute.acceleratorTypes where project = 'testing-project' and zone = 'australia-southeast1-a' order by name desc;"
      ],
    },
    {
      "name": "GRAPHQL select * from github.scim.saml_ids",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "select * from github.scim.saml_ids where org = 'infraql';"
      ],
    },
    {
      "name": "JOIN exec \"SELECT projects.logs ... ;",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--auth=${input:authString}",
        "select * from google.logging.\"projects.logs\" WHERE parent = 'projects/${input:gcpProject}';",
        "-o",
        "json"
      ],
    },
    {
      "name": "join ON param",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "--tls.allowInsecure=true",
        "select u.name, om.login, u.two_factor_authentication AS is_two_fa_enabled from github.orgs.members om inner join github.users.users u on om.login = u.login AND u.username = om.login where om.org = 'dummyorg' order by u.name desc;"
      ],
    },
    {
      "name": "join ON param problematic",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "--tls.allowInsecure=true",
        "select r.name, col.login, col.type, col.role_name from github.repos.repos r inner join github.repos.collaborators col ON col.repo = r.name where col.owner = 'stackql' and r.org = 'stackql';"
      ],
    },
    {
      "name": "join ON param target state",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "--tls.allowInsecure=true",
        "select substr(su.userName, 1, instr(su.userName, '@') - 1), su.externalId, su.id, u.login, u.two_factor_authentication AS is_two_fa_enabled from github.scim.users su inner join github.users.users u ON substr(su.userName, 1, instr(su.userName, '@') - 1) = u.username  where su.org = 'dummyorg' order by su.id asc;"
      ],
    },
    {
      "name": "native query",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "--tls.allowInsecure=true",
        "NATIVEQUERY 'select * from sqlite_master';"
      ],
    },
    {
      "name": "okta pagination",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "--tls.allowInsecure",
        "--sqlBackend=${input:sqlBackendString}",
        "select ou.status, ou.profile from okta.user.users ou where ou.subdomain = 'dummyorg';"
      ],
    },
    {
      "name": "registry list ;",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "registry",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "list"
      ],
    },
    {
      "name": "registry pull github v0.3.0 ;",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "registry",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "pull",
        "github",
        "v0.3.0"
      ],
    },
    {
      "name": "RUN insert complex iql file... ;\" -- prebuilt with cmake",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--auth=${input:authString}",
        "-i=${workspaceFolder}/test/assets/input/insert-compute-network.iql",
        "-o",
        "table"
      ],
    },
    {
      "name": "run server",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "srv",
        "--pgsrv.port=5888",
        "--tls.allowInsecure",
        "--auth=${input:authString}",
        "--gc=${input:gcString}",
        "--registry=${input:registryString}",
        "--namespaces=${input:namespaceString}",
        "--sqlBackend=${input:sqlBackendString}",
        "--dbInternal=${input:dbInternalString}"
      ],
    },
    {
      "name": "run server for superset",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "srv",
        "--pgsrv.port=5999",
        "--tls.allowInsecure",
        "--auth=${input:authString}",
        "--gc=${input:gcString}",
        "--registry=${input:registryString}",
        "--namespaces=${input:namespaceString}",
        "--sqlBackend={ \"dbEngine\": \"postgres_tcp\", \"sqlDialect\": \"postgres\", \"dsn\": \"postgres://stackql:stackql@127.0.0.1:7432/stackql\" }",
        "--dbInternal=${input:dbInternalString}"
      ],
    },
    {
      "name": "RUN test iql file... ;\" -- prebuilt with cmake",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--auth=${input:authString}",
        "-i=${workspaceFolder}/test/assets/input/show-services-extended-filtered.iql",
        "-o",
        "table"
      ],
    },
    {
      "name": "SELECT bq.datasets ... ;",
      "type": "go",
      "request": "launch",
      "mode": "exec",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--auth=${input:authString}",
        "select * from google.bigquery.datasets where projectId = '${input:gcpProject}';",
        "-o",
        "json"
      ],
    },
    {
      "name": "SELECT container agg ... ;",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--auth=${input:authString}",
        "select * from google.container.\"projects.aggregated.usableSubnetworks\" where parent = 'projects/kr-lab-network-01'",
        "-o",
        "json"
      ],
    },
    {
      "name": "SELECT google.compute.instances_iam_policies... ;",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--registry=${input:registryString}",
        "--auth=${input:authString}",
        "--tls.allowInsecure=true",
        "SELECT etag FROM google.compute.instances_iam_policies WHERE project = 'testing-project' AND zone = 'australia-southeast1-a' AND resource = '000000001';"
      ],
    },
    {
      "name": "SHOW INSERT bq.datasets ;\" -- prebuilt with cmake",
      "type": "go",
      "request": "launch",
      "mode": "exec",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--auth=${input:authString}",
        "SHOW EXTENDED INSERT INTO google.bigquery.datasets;",
        "-o",
        "pptext"
      ],
    },
    {
      "name": "SHOW INSERT...instances( project...) ;",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--auth=${input:authString}",
        "show insert into google.compute.instances( project, data__sourceSnapshotId );",
        "-o",
        "pptext"
      ],
    },
    {
      "name": "SHOW INSERT /*+ REQUIRED */... ;",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--auth=${input:authString}",
        "show insert /*+ REQUIRED */ into google.compute.addresses;",
        "-o",
        "pptext"
      ],
    },
    {
      "name": "SHOW PROVIDERS... ;\" ",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--auth=${input:authString}",
        "--registry=${input:registryString}",
        "show providers;",
        "-o",
        "json"
      ],
    },
    {
      "name": "SHOW RESOURCES... ;\"",
      "type": "go",
      "request": "launch",
      "mode": "debug",
      "program": "${workspaceFolder}/stackql",
      "args": [
        "exec",
        "--auth=${input:authString}",
        "--registry=${input:registryString}",
        "show resources from google.container;",
        "-o",
        "table"
      ],
    }
  ]
}