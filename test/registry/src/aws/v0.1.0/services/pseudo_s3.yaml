openapi: 3.0.0
info:
  version: '2021-09-30'
  x-release: v4
  title: AWS S3 over Cloud Control API
  description: 'For more information about Amazon Web Services Cloud Control API, see the <a href="https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/what-is-cloudcontrolapi.html">Amazon Web Services Cloud Control API User Guide</a>.'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: pseudo_s3
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/cloudcontrolapi/'
servers: []
paths: {}
components:
  x-stackQL-resources:
    s3_bucket_listing:
      name: s3_bucket_listing
      id: aws.pseudo_s3.s3_bucket_listing
      config:
        views:
          'select':
              predicate: sqlDialect == "sqlite3"
              ddl: |
                SELECT 
                JSON_EXTRACT(Properties, '$.Arn') as Arn,
                JSON_EXTRACT(Properties, '$.BucketName') as BucketName,
                JSON_EXTRACT(Properties, '$.DomainName') as DomainName,
                JSON_EXTRACT(Properties, '$.RegionalDomainName') as RegionalDomainName,
                JSON_EXTRACT(Properties, '$.DualStackDomainName') as DualStackDomainName,
                JSON_EXTRACT(Properties, '$.WebsiteURL') as WebsiteURL,
                JSON_EXTRACT(Properties, '$.OwnershipControls.Rules[0].ObjectOwnership') as ObjectOwnership,
                IIF(JSON_EXTRACT(Properties, '$.PublicAccessBlockConfiguration.RestrictPublicBuckets') = 0, 'false', 'true') as RestrictPublicBuckets,
                IIF(JSON_EXTRACT(Properties, '$.PublicAccessBlockConfiguration.BlockPublicPolicy') = 0, 'false', 'true') as BlockPublicPolicy,
                IIF(JSON_EXTRACT(Properties, '$.PublicAccessBlockConfiguration.BlockPublicAcls') = 0, 'false', 'true') as BlockPublicAcls,
                IIF(JSON_EXTRACT(Properties, '$.PublicAccessBlockConfiguration.IgnorePublicAcls') = 0, 'false', 'true') as IgnorePublicAcls,
                JSON_EXTRACT(Properties, '$.Tags') as Tags
                FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::S3::Bucket'
                ;
              fallback:
                predicate: sqlDialect == "postgres"
                ddl: |
                  SELECT 
                  json_extract_path_text(Properties, 'Arn') as Arn,
                  json_extract_path_text(Properties, 'BucketName') as BucketName,
                  json_extract_path_text(Properties, 'DomainName') as DomainName,
                  json_extract_path_text(Properties, 'RegionalDomainName') as RegionalDomainName,
                  json_extract_path_text(Properties, 'DualStackDomainName') as DualStackDomainName,
                  json_extract_path_text(Properties, 'WebsiteURL') as WebsiteURL,
                  json_extract_path_text(Properties, 'OwnershipControls', 'Rules', '0', 'ObjectOwnership') as ObjectOwnership,
                  CASE WHEN json_extract_path_text(Properties, 'PublicAccessBlockConfiguration', 'RestrictPublicBuckets') = '0' THEN 'false' ELSE 'true' END as RestrictPublicBuckets,
                  CASE WHEN json_extract_path_text(Properties, 'PublicAccessBlockConfiguration', 'BlockPublicPolicy') = '0' THEN 'false' ELSE 'true' END as BlockPublicPolicy,
                  CASE WHEN json_extract_path_text(Properties, 'PublicAccessBlockConfiguration', 'BlockPublicAcls') = '0' THEN 'false' ELSE 'true' END as BlockPublicAcls,
                  CASE WHEN json_extract_path_text(Properties, 'PublicAccessBlockConfiguration', 'IgnorePublicAcls') = '0' THEN 'false' ELSE 'true' END as IgnorePublicAcls,
                  json_extract_path_text(Properties, 'Tags') as Tags
                  FROM aws.cloud_control.resources WHERE region = 'ap-southeast-1' and data__TypeName = 'AWS::S3::Bucket'
                  ;
    s3_bucket_detail:
      name: s3_bucket_detail
      id: aws.pseudo_s3.s3_bucket_detail
      config:
        views:
          'select':
              predicate: sqlDialect == "sqlite3"
              ddl: |
                SELECT
                region,
                data__Identifier,
                JSON_EXTRACT(Properties, '$.AccelerateConfiguration') as accelerate_configuration,
                JSON_EXTRACT(Properties, '$.AccessControl') as access_control,
                JSON_EXTRACT(Properties, '$.AnalyticsConfigurations') as analytics_configurations,
                JSON_EXTRACT(Properties, '$.BucketEncryption') as bucket_encryption,
                JSON_EXTRACT(Properties, '$.BucketName') as bucket_name,
                JSON_EXTRACT(Properties, '$.CorsConfiguration') as cors_configuration,
                JSON_EXTRACT(Properties, '$.IntelligentTieringConfigurations') as intelligent_tiering_configurations,
                JSON_EXTRACT(Properties, '$.InventoryConfigurations') as inventory_configurations,
                JSON_EXTRACT(Properties, '$.LifecycleConfiguration') as lifecycle_configuration,
                JSON_EXTRACT(Properties, '$.LoggingConfiguration') as logging_configuration,
                JSON_EXTRACT(Properties, '$.MetricsConfigurations') as metrics_configurations,
                JSON_EXTRACT(Properties, '$.NotificationConfiguration') as notification_configuration,
                JSON_EXTRACT(Properties, '$.ObjectLockConfiguration') as object_lock_configuration,
                JSON_EXTRACT(Properties, '$.ObjectLockEnabled') as object_lock_enabled,
                JSON_EXTRACT(Properties, '$.OwnershipControls') as ownership_controls,
                JSON_EXTRACT(Properties, '$.PublicAccessBlockConfiguration') as public_access_block_configuration,
                JSON_EXTRACT(Properties, '$.ReplicationConfiguration') as replication_configuration,
                JSON_EXTRACT(Properties, '$.Tags') as tags,
                JSON_EXTRACT(Properties, '$.VersioningConfiguration') as versioning_configuration,
                JSON_EXTRACT(Properties, '$.WebsiteConfiguration') as website_configuration,
                JSON_EXTRACT(Properties, '$.Arn') as arn,
                JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
                JSON_EXTRACT(Properties, '$.DualStackDomainName') as dual_stack_domain_name,
                JSON_EXTRACT(Properties, '$.RegionalDomainName') as regional_domain_name,
                JSON_EXTRACT(Properties, '$.WebsiteURL') as website_url
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::Bucket'
                AND data__Identifier = '<BucketName>'
                AND region = 'us-east-1'
                ;
              fallback:
                predicate: sqlDialect == "postgres"
                ddl: |
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AccelerateConfiguration') as accelerate_configuration,
                  json_extract_path_text(Properties, 'AccessControl') as access_control,
                  json_extract_path_text(Properties, 'AnalyticsConfigurations') as analytics_configurations,
                  json_extract_path_text(Properties, 'BucketEncryption') as bucket_encryption,
                  json_extract_path_text(Properties, 'BucketName') as bucket_name,
                  json_extract_path_text(Properties, 'CorsConfiguration') as cors_configuration,
                  json_extract_path_text(Properties, 'IntelligentTieringConfigurations') as intelligent_tiering_configurations,
                  json_extract_path_text(Properties, 'InventoryConfigurations') as inventory_configurations,
                  json_extract_path_text(Properties, 'LifecycleConfiguration') as lifecycle_configuration,
                  json_extract_path_text(Properties, 'LoggingConfiguration') as logging_configuration,
                  json_extract_path_text(Properties, 'MetricsConfigurations') as metrics_configurations,
                  json_extract_path_text(Properties, 'NotificationConfiguration') as notification_configuration,
                  json_extract_path_text(Properties, 'ObjectLockConfiguration') as object_lock_configuration,
                  json_extract_path_text(Properties, 'ObjectLockEnabled') as object_lock_enabled,
                  json_extract_path_text(Properties, 'OwnershipControls') as ownership_controls,
                  json_extract_path_text(Properties, 'PublicAccessBlockConfiguration') as public_access_block_configuration,
                  json_extract_path_text(Properties, 'ReplicationConfiguration') as replication_configuration,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'VersioningConfiguration') as versioning_configuration,
                  json_extract_path_text(Properties, 'WebsiteConfiguration') as website_configuration,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'DomainName') as domain_name,
                  json_extract_path_text(Properties, 'DualStackDomainName') as dual_stack_domain_name,
                  json_extract_path_text(Properties, 'RegionalDomainName') as regional_domain_name,
                  json_extract_path_text(Properties, 'WebsiteURL') as website_url
                  FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::Bucket'
                  AND data__Identifier = '<BucketName>'
                  AND region = 'us-east-1'
                  ;
security:
  - hmac: []
