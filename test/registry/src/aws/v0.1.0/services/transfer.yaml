x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
openapi: 3.0.0
info:
  version: '2018-11-05'
  x-release: v4
  title: AWS Transfer Family
  description: 'Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: transfer
  x-aws-signingName: transfer
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/transfer-2018-11-05.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/transfer/'
servers:
  - url: 'https://transfer.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AWS Transfer multi-region endpoint
x-hasEquivalentPaths: true
paths:
  /?__X-Amz-Target=TransferService.CreateAccess:
    post:
      operationId: CreateAccess
      description: 'Used by administrators to choose which groups in the directory should have access to upload and download files over the enabled protocols using Transfer Family. For example, a Microsoft Active Directory might contain 50,000 users, but only a small fraction might need the ability to transfer files to the server. An administrator can use <code>CreateAccess</code> to limit the access to the correct set of users who need this ability.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccessResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceExistsException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/CreateAccessRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.CreateAccess
            enum:
              - TransferService.CreateAccess
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.CreateAgreement:
    post:
      operationId: CreateAgreement
      description: '<p>Creates an agreement. An agreement is a bilateral trading partner agreement, or partnership, between an Transfer Family server and an AS2 process. The agreement defines the file and message transfer relationship between the server and the AS2 process. To define an agreement, Transfer Family combines a server, local profile, partner profile, certificate, and other attributes.</p> <p>The partner is identified with the <code>PartnerProfileId</code>, and the AS2 process is identified with the <code>LocalProfileId</code>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAgreementResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceExistsException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/CreateAgreementRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.CreateAgreement
            enum:
              - TransferService.CreateAgreement
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.CreateConnector:
    post:
      operationId: CreateConnector
      description: '<p>Creates the connector, which captures the parameters for an outbound connection for the AS2 or SFTP protocol. The connector is required for sending files to an externally hosted AS2 or SFTP server. For more details about AS2 connectors, see <a href="https://docs.aws.amazon.com/transfer/latest/userguide/create-b2b-server.html#configure-as2-connector">Create AS2 connectors</a>.</p> <note> <p>You must specify exactly one configuration object: either for AS2 (<code>As2Config</code>) or SFTP (<code>SftpConfig</code>).</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateConnectorResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceExistsException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/CreateConnectorRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.CreateConnector
            enum:
              - TransferService.CreateConnector
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.CreateProfile:
    post:
      operationId: CreateProfile
      description: Creates the local or partner profile to use for AS2 transfers.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProfileResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/CreateProfileRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.CreateProfile
            enum:
              - TransferService.CreateProfile
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.CreateServer:
    post:
      operationId: CreateServer
      description: 'Instantiates an auto-scaling virtual server based on the selected file transfer protocol in Amazon Web Services. When you make updates to your file transfer protocol-enabled server or when you work with users, use the service-generated <code>ServerId</code> property that is assigned to the newly created server.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateServerResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '482':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '483':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '484':
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceExistsException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '486':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/CreateServerRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.CreateServer
            enum:
              - TransferService.CreateServer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.CreateUser:
    post:
      operationId: CreateUser
      description: 'Creates a user and associates them with an existing file transfer protocol-enabled server. You can only create and associate users with servers that have the <code>IdentityProviderType</code> set to <code>SERVICE_MANAGED</code>. Using parameters for <code>CreateUser</code>, you can specify the user name, set the home directory, store the user''s public key, and assign the user''s Identity and Access Management (IAM) role. You can also optionally add a session policy, and assign metadata with tags that can be used to group and search for users.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceExistsException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.CreateUser
            enum:
              - TransferService.CreateUser
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.CreateWorkflow:
    post:
      operationId: CreateWorkflow
      description: ' Allows you to create a workflow with specified steps and step details the workflow invokes after file transfer completes. After creating a workflow, you can associate the workflow created with any transfer servers by specifying the <code>workflow-details</code> field in <code>CreateServer</code> and <code>UpdateServer</code> operations. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWorkflowResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '482':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '483':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '484':
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceExistsException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/CreateWorkflowRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.CreateWorkflow
            enum:
              - TransferService.CreateWorkflow
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DeleteAccess:
    post:
      operationId: DeleteAccess
      description: Allows you to delete the access specified in the <code>ServerID</code> and <code>ExternalID</code> parameters.
      responses:
        '200':
          description: Success
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DeleteAccessRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DeleteAccess
            enum:
              - TransferService.DeleteAccess
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DeleteAgreement:
    post:
      operationId: DeleteAgreement
      description: Delete the agreement that's specified in the provided <code>AgreementId</code>.
      responses:
        '200':
          description: Success
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DeleteAgreementRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DeleteAgreement
            enum:
              - TransferService.DeleteAgreement
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DeleteCertificate:
    post:
      operationId: DeleteCertificate
      description: Deletes the certificate that's specified in the <code>CertificateId</code> parameter.
      responses:
        '200':
          description: Success
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DeleteCertificateRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DeleteCertificate
            enum:
              - TransferService.DeleteCertificate
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DeleteConnector:
    post:
      operationId: DeleteConnector
      description: Deletes the connector that's specified in the provided <code>ConnectorId</code>.
      responses:
        '200':
          description: Success
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DeleteConnectorRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DeleteConnector
            enum:
              - TransferService.DeleteConnector
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DeleteHostKey:
    post:
      operationId: DeleteHostKey
      description: Deletes the host key that's specified in the <code>HostKeyId</code> parameter.
      responses:
        '200':
          description: Success
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DeleteHostKeyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DeleteHostKey
            enum:
              - TransferService.DeleteHostKey
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DeleteProfile:
    post:
      operationId: DeleteProfile
      description: Deletes the profile that's specified in the <code>ProfileId</code> parameter.
      responses:
        '200':
          description: Success
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DeleteProfileRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DeleteProfile
            enum:
              - TransferService.DeleteProfile
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DeleteServer:
    post:
      operationId: DeleteServer
      description: <p>Deletes the file transfer protocol-enabled server that you specify.</p> <p>No response returns from this operation.</p>
      responses:
        '200':
          description: Success
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '482':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '483':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DeleteServerRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DeleteServer
            enum:
              - TransferService.DeleteServer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DeleteSshPublicKey:
    post:
      operationId: DeleteSshPublicKey
      description: Deletes a user's Secure Shell (SSH) public key.
      responses:
        '200':
          description: Success
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DeleteSshPublicKeyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DeleteSshPublicKey
            enum:
              - TransferService.DeleteSshPublicKey
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DeleteUser:
    post:
      operationId: DeleteUser
      description: '<p>Deletes the user belonging to a file transfer protocol-enabled server you specify.</p> <p>No response returns from this operation.</p> <note> <p>When you delete a user from a server, the user''s information is lost.</p> </note>'
      responses:
        '200':
          description: Success
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DeleteUserRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DeleteUser
            enum:
              - TransferService.DeleteUser
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DeleteWorkflow:
    post:
      operationId: DeleteWorkflow
      description: Deletes the specified workflow.
      responses:
        '200':
          description: Success
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '482':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '483':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DeleteWorkflowRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DeleteWorkflow
            enum:
              - TransferService.DeleteWorkflow
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DescribeAccess:
    post:
      operationId: DescribeAccess
      description: '<p>Describes the access that is assigned to the specific file transfer protocol-enabled server, as identified by its <code>ServerId</code> property and its <code>ExternalId</code>.</p> <p>The response from this call returns the properties of the access that is associated with the <code>ServerId</code> value that was specified.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeAccessResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DescribeAccessRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DescribeAccess
            enum:
              - TransferService.DescribeAccess
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DescribeAgreement:
    post:
      operationId: DescribeAgreement
      description: Describes the agreement that's identified by the <code>AgreementId</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeAgreementResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DescribeAgreementRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DescribeAgreement
            enum:
              - TransferService.DescribeAgreement
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DescribeCertificate:
    post:
      operationId: DescribeCertificate
      description: Describes the certificate that's identified by the <code>CertificateId</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeCertificateResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DescribeCertificateRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DescribeCertificate
            enum:
              - TransferService.DescribeCertificate
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DescribeConnector:
    post:
      operationId: DescribeConnector
      description: 'Describes the connector that''s identified by the <code>ConnectorId.</code> '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeConnectorResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DescribeConnectorRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DescribeConnector
            enum:
              - TransferService.DescribeConnector
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DescribeExecution:
    post:
      operationId: DescribeExecution
      description: '<p>You can use <code>DescribeExecution</code> to check the details of the execution of the specified workflow.</p> <note> <p>This API call only returns details for in-progress workflows.</p> <p> If you provide an ID for an execution that is not in progress, or if the execution doesn''t match the specified workflow ID, you receive a <code>ResourceNotFound</code> exception.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeExecutionResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DescribeExecutionRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DescribeExecution
            enum:
              - TransferService.DescribeExecution
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DescribeHostKey:
    post:
      operationId: DescribeHostKey
      description: Returns the details of the host key that's specified by the <code>HostKeyId</code> and <code>ServerId</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeHostKeyResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DescribeHostKeyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DescribeHostKey
            enum:
              - TransferService.DescribeHostKey
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DescribeProfile:
    post:
      operationId: DescribeProfile
      description: Returns the details of the profile that's specified by the <code>ProfileId</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeProfileResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DescribeProfileRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DescribeProfile
            enum:
              - TransferService.DescribeProfile
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DescribeSecurityPolicy:
    post:
      operationId: DescribeSecurityPolicy
      description: 'Describes the security policy that is attached to your file transfer protocol-enabled server. The response contains a description of the security policy''s properties. For more information about security policies, see <a href="https://docs.aws.amazon.com/transfer/latest/userguide/security-policies.html">Working with security policies</a>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeSecurityPolicyResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DescribeSecurityPolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DescribeSecurityPolicy
            enum:
              - TransferService.DescribeSecurityPolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DescribeServer:
    post:
      operationId: DescribeServer
      description: '<p>Describes a file transfer protocol-enabled server that you specify by passing the <code>ServerId</code> parameter.</p> <p>The response contains a description of a server''s properties. When you set <code>EndpointType</code> to VPC, the response will contain the <code>EndpointDetails</code>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeServerResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DescribeServerRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DescribeServer
            enum:
              - TransferService.DescribeServer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DescribeUser:
    post:
      operationId: DescribeUser
      description: '<p>Describes the user assigned to the specific file transfer protocol-enabled server, as identified by its <code>ServerId</code> property.</p> <p>The response from this call returns the properties of the user associated with the <code>ServerId</code> value that was specified.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeUserResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DescribeUserRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DescribeUser
            enum:
              - TransferService.DescribeUser
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.DescribeWorkflow:
    post:
      operationId: DescribeWorkflow
      description: Describes the specified workflow.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeWorkflowResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/DescribeWorkflowRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.DescribeWorkflow
            enum:
              - TransferService.DescribeWorkflow
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.ImportCertificate:
    post:
      operationId: ImportCertificate
      description: Imports the signing and encryption certificates that you need to create local (AS2) profiles and partner profiles.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportCertificateResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/ImportCertificateRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.ImportCertificate
            enum:
              - TransferService.ImportCertificate
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.ImportHostKey:
    post:
      operationId: ImportHostKey
      description: Adds a host key to the server that's specified by the <code>ServerId</code> parameter.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportHostKeyResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceExistsException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/ImportHostKeyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.ImportHostKey
            enum:
              - TransferService.ImportHostKey
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.ImportSshPublicKey:
    post:
      operationId: ImportSshPublicKey
      description: '<p>Adds a Secure Shell (SSH) public key to a Transfer Family user identified by a <code>UserName</code> value assigned to the specific file transfer protocol-enabled server, identified by <code>ServerId</code>.</p> <p>The response returns the <code>UserName</code> value, the <code>ServerId</code> value, and the name of the <code>SshPublicKeyId</code>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportSshPublicKeyResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceExistsException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/ImportSshPublicKeyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.ImportSshPublicKey
            enum:
              - TransferService.ImportSshPublicKey
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.ListAccesses:
    post:
      operationId: ListAccesses
      description: Lists the details for all the accesses you have on your server.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAccessesResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '483':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/ListAccessesRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.ListAccesses
            enum:
              - TransferService.ListAccesses
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.ListAgreements:
    post:
      operationId: ListAgreements
      description: 'Returns a list of the agreements for the server that''s identified by the <code>ServerId</code> that you supply. If you want to limit the results to a certain number, supply a value for the <code>MaxResults</code> parameter. If you ran the command previously and received a value for <code>NextToken</code>, you can supply that value to continue listing agreements from where you left off.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAgreementsResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '483':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/ListAgreementsRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.ListAgreements
            enum:
              - TransferService.ListAgreements
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.ListCertificates:
    post:
      operationId: ListCertificates
      description: 'Returns a list of the current certificates that have been imported into Transfer Family. If you want to limit the results to a certain number, supply a value for the <code>MaxResults</code> parameter. If you ran the command previously and received a value for the <code>NextToken</code> parameter, you can supply that value to continue listing certificates from where you left off.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCertificatesResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '483':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/ListCertificatesRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.ListCertificates
            enum:
              - TransferService.ListCertificates
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.ListConnectors:
    post:
      operationId: ListConnectors
      description: Lists the connectors for the specified Region.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectorsResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '483':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/ListConnectorsRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: 'TransferService.ListConnectors'
            enum:
              - TransferService.ListConnectors
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.ListExecutions:
    post:
      operationId: ListExecutions
      description: '<p>Lists all in-progress executions for the specified workflow.</p> <note> <p>If the specified workflow ID cannot be found, <code>ListExecutions</code> returns a <code>ResourceNotFound</code> exception.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListExecutionsResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '483':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/ListExecutionsRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.ListExecutions
            enum:
              - TransferService.ListExecutions
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.ListHostKeys:
    post:
      operationId: ListHostKeys
      description: Returns a list of host keys for the server that's specified by the <code>ServerId</code> parameter.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListHostKeysResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '483':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/ListHostKeysRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.ListHostKeys
            enum:
              - TransferService.ListHostKeys
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.ListProfiles:
    post:
      operationId: ListProfiles
      description: 'Returns a list of the profiles for your system. If you want to limit the results to a certain number, supply a value for the <code>MaxResults</code> parameter. If you ran the command previously and received a value for <code>NextToken</code>, you can supply that value to continue listing profiles from where you left off.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProfilesResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '483':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/ListProfilesRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.ListProfiles
            enum:
              - TransferService.ListProfiles
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.ListSecurityPolicies:
    post:
      operationId: ListSecurityPolicies
      description: Lists the security policies that are attached to your file transfer protocol-enabled servers.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSecurityPoliciesResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '483':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/ListSecurityPoliciesRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.ListSecurityPolicies
            enum:
              - TransferService.ListSecurityPolicies
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.ListServers:
    post:
      operationId: ListServers
      description: |
        Lists the file transfer protocol-enabled 
        servers that are associated with your 
        Amazon Web Services account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListServersResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '483':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/ListServersRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.ListServers
            enum:
              - TransferService.ListServers
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: 'Lists all of the tags associated with the Amazon Resource Name (ARN) that you specify. The resource can be a user, server, or role.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '483':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/ListTagsForResourceRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.ListTagsForResource
            enum:
              - TransferService.ListTagsForResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.ListUsers:
    post:
      operationId: ListUsers
      description: Lists the users for a file transfer protocol-enabled server that you specify by passing the <code>ServerId</code> parameter.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '483':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/ListUsersRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.ListUsers
            enum:
              - TransferService.ListUsers
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.ListWorkflows:
    post:
      operationId: ListWorkflows
      description: Lists all workflows associated with your Amazon Web Services account for your current region.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkflowsResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '483':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/ListWorkflowsRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.ListWorkflows
            enum:
              - TransferService.ListWorkflows
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.SendWorkflowStepState:
    post:
      operationId: SendWorkflowStepState
      description: '<p>Sends a callback for asynchronous custom steps.</p> <p> The <code>ExecutionId</code>, <code>WorkflowId</code>, and <code>Token</code> are passed to the target resource during execution of a custom step of a workflow. You must include those with their callback as well as providing a status. </p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendWorkflowStepStateResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '482':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '483':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/SendWorkflowStepStateRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.SendWorkflowStepState
            enum:
              - TransferService.SendWorkflowStepState
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.StartFileTransfer:
    post:
      operationId: StartFileTransfer
      description: '<p>Begins a file transfer between local Amazon Web Services storage and a remote AS2 or SFTP server.</p> <ul> <li> <p>For an AS2 connector, you specify the <code>ConnectorId</code> and one or more <code>SendFilePaths</code> to identify the files you want to transfer.</p> </li> <li> <p>For an SFTP connector, the file transfer can be either outbound or inbound. In both cases, you specify the <code>ConnectorId</code>. Depending on the direction of the transfer, you also specify the following items:</p> <ul> <li> <p>If you are transferring file from a partner''s SFTP server to a Transfer Family server, you specify one or more <code>RetreiveFilePaths</code> to identify the files you want to transfer, and a <code>LocalDirectoryPath</code> to specify the destination folder.</p> </li> <li> <p>If you are transferring file to a partner''s SFTP server from Amazon Web Services storage, you specify one or more <code>SendFilePaths</code> to identify the files you want to transfer, and a <code>RemoteDirectoryPath</code> to specify the destination folder.</p> </li> </ul> </li> </ul>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartFileTransferResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/StartFileTransferRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.StartFileTransfer
            enum:
              - TransferService.StartFileTransfer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.StartServer:
    post:
      operationId: StartServer
      description: '<p>Changes the state of a file transfer protocol-enabled server from <code>OFFLINE</code> to <code>ONLINE</code>. It has no impact on a server that is already <code>ONLINE</code>. An <code>ONLINE</code> server can accept and process file transfer jobs.</p> <p>The state of <code>STARTING</code> indicates that the server is in an intermediate state, either not fully able to respond, or not fully online. The values of <code>START_FAILED</code> can indicate an error condition.</p> <p>No response is returned from this call.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/StartServerRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.StartServer
            enum:
              - TransferService.StartServer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.StopServer:
    post:
      operationId: StopServer
      description: '<p>Changes the state of a file transfer protocol-enabled server from <code>ONLINE</code> to <code>OFFLINE</code>. An <code>OFFLINE</code> server cannot accept and process file transfer jobs. Information tied to your server, such as server and user properties, are not affected by stopping your server.</p> <note> <p>Stopping the server does not reduce or impact your file transfer protocol endpoint billing; you must delete the server to stop being billed.</p> </note> <p>The state of <code>STOPPING</code> indicates that the server is in an intermediate state, either not fully able to respond, or not fully offline. The values of <code>STOP_FAILED</code> can indicate an error condition.</p> <p>No response is returned from this call.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/StopServerRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.StopServer
            enum:
              - TransferService.StopServer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.TagResource:
    post:
      operationId: TagResource
      description: '<p>Attaches a key-value pair to a resource, as identified by its Amazon Resource Name (ARN). Resources are users, servers, roles, and other entities.</p> <p>There is no response returned from this call.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/TagResourceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.TagResource
            enum:
              - TransferService.TagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.TestConnection:
    post:
      operationId: TestConnection
      description: Tests whether your SFTP connector is set up successfully. We highly recommend that you call this operation to test your ability to transfer files between a Transfer Family server and a trading partner's SFTP server.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestConnectionResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/TestConnectionRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.TestConnection
            enum:
              - TransferService.TestConnection
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.TestIdentityProvider:
    post:
      operationId: TestIdentityProvider
      description: '<p>If the <code>IdentityProviderType</code> of a file transfer protocol-enabled server is <code>AWS_DIRECTORY_SERVICE</code> or <code>API_Gateway</code>, tests whether your identity provider is set up successfully. We highly recommend that you call this operation to test your authentication method as soon as you create your server. By doing so, you can troubleshoot issues with the identity provider integration to ensure that your users can successfully use the service.</p> <p> The <code>ServerId</code> and <code>UserName</code> parameters are required. The <code>ServerProtocol</code>, <code>SourceIp</code>, and <code>UserPassword</code> are all optional. </p> <p>Note the following:</p> <ul> <li> <p> You cannot use <code>TestIdentityProvider</code> if the <code>IdentityProviderType</code> of your server is <code>SERVICE_MANAGED</code>.</p> </li> <li> <p> <code>TestIdentityProvider</code> does not work with keys: it only accepts passwords.</p> </li> <li> <p> <code>TestIdentityProvider</code> can test the password operation for a custom Identity Provider that handles keys and passwords.</p> </li> <li> <p> If you provide any incorrect values for any parameters, the <code>Response</code> field is empty. </p> </li> <li> <p> If you provide a server ID for a server that uses service-managed users, you get an error: </p> <p> <code> An error occurred (InvalidRequestException) when calling the TestIdentityProvider operation: s-<i>server-ID</i> not configured for external auth </code> </p> </li> <li> <p> If you enter a Server ID for the <code>--server-id</code> parameter that does not identify an actual Transfer server, you receive the following error: </p> <p> <code>An error occurred (ResourceNotFoundException) when calling the TestIdentityProvider operation: Unknown server</code>. </p> <p>It is possible your sever is in a different region. You can specify a region by adding the following: <code>--region region-code</code>, such as <code>--region us-east-2</code> to specify a server in <b>US East (Ohio)</b>.</p> </li> </ul>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIdentityProviderResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/TestIdentityProviderRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.TestIdentityProvider
            enum:
              - TransferService.TestIdentityProvider
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.UntagResource:
    post:
      operationId: UntagResource
      description: '<p>Detaches a key-value pair from a resource, as identified by its Amazon Resource Name (ARN). Resources are users, servers, roles, and other entities.</p> <p>No response is returned from this call.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/UntagResourceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.UntagResource
            enum:
              - TransferService.UntagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.UpdateAccess:
    post:
      operationId: UpdateAccess
      description: Allows you to update parameters for the access specified in the <code>ServerID</code> and <code>ExternalID</code> parameters.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccessResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceExistsException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/UpdateAccessRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.UpdateAccess
            enum:
              - TransferService.UpdateAccess
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.UpdateAgreement:
    post:
      operationId: UpdateAgreement
      description: 'Updates some of the parameters for an existing agreement. Provide the <code>AgreementId</code> and the <code>ServerId</code> for the agreement that you want to update, along with the new values for the parameters to update.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAgreementResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceExistsException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/UpdateAgreementRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.UpdateAgreement
            enum:
              - TransferService.UpdateAgreement
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.UpdateCertificate:
    post:
      operationId: UpdateCertificate
      description: Updates the active and inactive dates for a certificate.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCertificateResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/UpdateCertificateRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.UpdateCertificate
            enum:
              - TransferService.UpdateCertificate
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.UpdateConnector:
    post:
      operationId: UpdateConnector
      description: 'Updates some of the parameters for an existing connector. Provide the <code>ConnectorId</code> for the connector that you want to update, along with the new values for the parameters to update.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateConnectorResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceExistsException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/UpdateConnectorRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.UpdateConnector
            enum:
              - TransferService.UpdateConnector
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.UpdateHostKey:
    post:
      operationId: UpdateHostKey
      description: Updates the description for the host key that's specified by the <code>ServerId</code> and <code>HostKeyId</code> parameters.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateHostKeyResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/UpdateHostKeyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.UpdateHostKey
            enum:
              - TransferService.UpdateHostKey
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.UpdateProfile:
    post:
      operationId: UpdateProfile
      description: 'Updates some of the parameters for an existing profile. Provide the <code>ProfileId</code> for the profile that you want to update, along with the new values for the parameters to update.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProfileResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.UpdateProfile
            enum:
              - TransferService.UpdateProfile
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.UpdateServer:
    post:
      operationId: UpdateServer
      description: <p>Updates the file transfer protocol-enabled server's properties after that server has been created.</p> <p>The <code>UpdateServer</code> call returns the <code>ServerId</code> of the server you updated.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateServerResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '484':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '485':
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceExistsException'
        '486':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '487':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/UpdateServerRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.UpdateServer
            enum:
              - TransferService.UpdateServer
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?__X-Amz-Target=TransferService.UpdateUser:
    post:
      operationId: UpdateUser
      description: '<p>Assigns new properties to a user. Parameters you pass modify any or all of the following: the home directory, role, and policy for the <code>UserName</code> and <code>ServerId</code> you specify.</p> <p>The response returns the <code>ServerId</code> and the <code>UserName</code> for the updated user.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'
        '480':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '481':
          description: InternalServiceError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceError'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/x-amz-json-1.1:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          schema:
            type: string
            default: TransferService.UpdateUser
            enum:
              - TransferService.UpdateUser
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  x-stackQL-resources:
    servers:
      name: servers
      methods:
        create_server:
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.CreateServer/post'
          request:
            mediaType: application/x-amz-json-1.1
            default: |
              {}
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_servers:
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.ListServers/post'
          request:
            mediaType: application/x-amz-json-1.1
            default: |
              {}
          response:
            objectKey: '$.Servers'
            mediaType: application/json
            openAPIDocKey: '200'
        describe_server:
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.DescribeServer/post'
          request:
            mediaType: application/x-amz-json-1.1
          response:
            objectKey: '$.Server'
            mediaType: application/json
            openAPIDocKey: '200'
        update_server:
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.UpdateServer/post'
          request:
            mediaType: application/x-amz-json-1.1
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_server:
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.DeleteServer/post'
          request:
            mediaType: application/x-amz-json-1.1
          response:
            openAPIDocKey: '200'
      id: aws.transfer.servers
      sqlVerbs:
        delete:
          - $ref: '#/components/x-stackQL-resources/servers/methods/delete_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/servers/methods/create_server'
        select:
          - $ref: '#/components/x-stackQL-resources/servers/methods/describe_server'
          - $ref: '#/components/x-stackQL-resources/servers/methods/list_servers'
        update:
          - $ref: '#/components/x-stackQL-resources/servers/methods/update_server'
      title: servers
    users:
      name: users
      methods:
        list_users:
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.ListUsers/post'
          request:
            mediaType: application/x-amz-json-1.1
          response:
            objectKey: '$.Users'
            mediaType: application/json
            openAPIDocKey: '200'
        describe_user:
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.DescribeUser/post'
          request:
            mediaType: application/x-amz-json-1.1
          response:
            objectKey: '$.User'
            mediaType: application/json
            openAPIDocKey: '200'
        create_user:
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.CreateUser/post'
          request:
            mediaType: application/x-amz-json-1.1
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_user:
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.UpdateUser/post'
          request:
            mediaType: application/x-amz-json-1.1
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_user:
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.DeleteUser/post'
          request:
            mediaType: application/x-amz-json-1.1
          response:
            openAPIDocKey: '200'
      id: aws.transfer.users
      sqlVerbs:
        delete:
          - $ref: '#/components/x-stackQL-resources/users/methods/create_user'
        insert:
          - $ref: '#/components/x-stackQL-resources/users/methods/create_user'
        select:
          - $ref: '#/components/x-stackQL-resources/users/methods/describe_user'
          - $ref: '#/components/x-stackQL-resources/users/methods/list_users'
        update:
          - $ref: '#/components/x-stackQL-resources/users/methods/update_user'
      title: users
    connectors:
      name: connectors
      methods:
        create_connector:
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.CreateConnector/post'
          request:
            mediaType: application/x-amz-json-1.1
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_connectors:
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.ListConnectors/post'
          request:
            mediaType: application/x-amz-json-1.1
          response:
            objectKey: '$.Connectors'
            mediaType: application/json
            openAPIDocKey: '200'
        describe_connector:
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.DescribeConnector/post'
          request:
            mediaType: application/x-amz-json-1.1
          response:
            objectKey: '$.Connector'
            mediaType: application/json
            openAPIDocKey: '200'
        update_connector:
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.UpdateConnector/post'
          request:
            mediaType: application/x-amz-json-1.1
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_connector:
          operation:
            $ref: '#/paths/~1?__X-Amz-Target=TransferService.DeleteConnector/post'
          request:
            mediaType: application/x-amz-json-1.1
          response:
            openAPIDocKey: '200'
      id: aws.transfer.connectors
      sqlVerbs:
        delete:
          - $ref: '#/components/x-stackQL-resources/connectors/methods/delete_connector'
        insert:
          - $ref: '#/components/x-stackQL-resources/connectors/methods/create_connector'
        select:
          - $ref: '#/components/x-stackQL-resources/connectors/methods/describe_connector'
          - $ref: '#/components/x-stackQL-resources/connectors/methods/list_connectors'
        update:
          - $ref: '#/components/x-stackQL-resources/connectors/methods/update_connector'
      title: connectors
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CreateAccessResponse:
      type: object
      required:
        - ServerId
        - ExternalId
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        ExternalId:
          $ref: '#/components/schemas/ExternalId'
    CreateAccessRequest:
      type: object
      required:
        - Role
        - ServerId
        - ExternalId
      title: CreateAccessRequest
      properties:
        HomeDirectory:
          $ref: '#/components/schemas/HomeDirectory'
        HomeDirectoryType:
          $ref: '#/components/schemas/HomeDirectoryType'
        HomeDirectoryMappings:
          $ref: '#/components/schemas/HomeDirectoryMappings'
        Policy:
          $ref: '#/components/schemas/Policy'
        PosixProfile:
          $ref: '#/components/schemas/PosixProfile'
        Role:
          $ref: '#/components/schemas/Role'
        ServerId:
          $ref: '#/components/schemas/ServerId'
        ExternalId:
          $ref: '#/components/schemas/ExternalId'
    ServiceUnavailableException: {}
    InternalServiceError: {}
    InvalidRequestException: {}
    ResourceExistsException: {}
    ResourceNotFoundException: {}
    CreateAgreementResponse:
      type: object
      required:
        - AgreementId
      properties:
        AgreementId:
          $ref: '#/components/schemas/AgreementId'
    CreateAgreementRequest:
      type: object
      required:
        - ServerId
        - LocalProfileId
        - PartnerProfileId
        - BaseDirectory
        - AccessRole
      title: CreateAgreementRequest
      properties:
        Description:
          $ref: '#/components/schemas/Description'
        ServerId:
          $ref: '#/components/schemas/ServerId'
        LocalProfileId:
          $ref: '#/components/schemas/ProfileId'
        PartnerProfileId:
          $ref: '#/components/schemas/ProfileId'
        BaseDirectory:
          $ref: '#/components/schemas/HomeDirectory'
        AccessRole:
          $ref: '#/components/schemas/Role'
        Status:
          $ref: '#/components/schemas/AgreementStatusType'
        Tags:
          $ref: '#/components/schemas/Tags'
    ThrottlingException: {}
    CreateConnectorResponse:
      type: object
      required:
        - ConnectorId
      properties:
        ConnectorId:
          $ref: '#/components/schemas/ConnectorId'
    CreateConnectorRequest:
      type: object
      required:
        - Url
        - AccessRole
      title: CreateConnectorRequest
      properties:
        Url:
          $ref: '#/components/schemas/Url'
        As2Config:
          $ref: '#/components/schemas/As2ConnectorConfig'
        AccessRole:
          $ref: '#/components/schemas/Role'
        LoggingRole:
          $ref: '#/components/schemas/Role'
        Tags:
          $ref: '#/components/schemas/Tags'
        SftpConfig:
          $ref: '#/components/schemas/SftpConnectorConfig'
    CreateProfileResponse:
      type: object
      required:
        - ProfileId
      properties:
        ProfileId:
          $ref: '#/components/schemas/ProfileId'
    CreateProfileRequest:
      type: object
      required:
        - As2Id
        - ProfileType
      title: CreateProfileRequest
      properties:
        As2Id:
          $ref: '#/components/schemas/As2Id'
        ProfileType:
          $ref: '#/components/schemas/ProfileType'
        CertificateIds:
          $ref: '#/components/schemas/CertificateIds'
        Tags:
          $ref: '#/components/schemas/Tags'
    CreateServerResponse:
      type: object
      required:
        - ServerId
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
    CreateServerRequest:
      type: object
      title: CreateServerRequest
      properties:
        Certificate:
          $ref: '#/components/schemas/Certificate'
        Domain:
          $ref: '#/components/schemas/Domain'
        EndpointDetails:
          $ref: '#/components/schemas/EndpointDetails'
        EndpointType:
          $ref: '#/components/schemas/EndpointType'
        HostKey:
          $ref: '#/components/schemas/HostKey'
        IdentityProviderDetails:
          $ref: '#/components/schemas/IdentityProviderDetails'
        IdentityProviderType:
          $ref: '#/components/schemas/IdentityProviderType'
        LoggingRole:
          $ref: '#/components/schemas/Role'
        PostAuthenticationLoginBanner:
          $ref: '#/components/schemas/PostAuthenticationLoginBanner'
        PreAuthenticationLoginBanner:
          $ref: '#/components/schemas/PreAuthenticationLoginBanner'
        Protocols:
          $ref: '#/components/schemas/Protocols'
        ProtocolDetails:
          $ref: '#/components/schemas/ProtocolDetails'
        SecurityPolicyName:
          ref: '#/components/schemas/SecurityPolicyName'
        Tags:
          $ref: '#/components/schemas/Tags'
        WorkflowDetails:
          $ref: '#/components/schemas/WorkflowDetails'
        StructuredLogDestinations:
          $ref: '#/components/schemas/StructuredLogDestinations'
    AccessDeniedException: {}
    CreateUserResponse:
      type: object
      required:
        - ServerId
        - UserName
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        UserName:
          $ref: '#/components/schemas/UserName'
    CreateUserRequest:
      type: object
      required:
        - Role
        - ServerId
        - UserName
      title: CreateUserRequest
      properties:
        HomeDirectory:
          $ref: '#/components/schemas/HomeDirectory'
        HomeDirectoryType:
          $ref: '#/components/schemas/HomeDirectoryType'
        HomeDirectoryMappings:
          $ref: '#/components/schemas/HomeDirectoryMappings'
        Policy:
          $ref: '#/components/schemas/Policy'
        PosixProfile:
          $ref: '#/components/schemas/PosixProfile'
        Role:
          $ref: '#/components/schemas/Role'
        ServerId:
          $ref: '#/components/schemas/ServerId'
        SshPublicKeyBody:
          $ref: '#/components/schemas/SshPublicKeyBody'
        Tags:
          $ref: '#/components/schemas/Tags'
        UserName:
          $ref: '#/components/schemas/UserName'
    CreateWorkflowResponse:
      type: object
      required:
        - WorkflowId
      properties:
        WorkflowId:
          $ref: '#/components/schemas/WorkflowId'
    CreateWorkflowRequest:
      type: object
      required:
        - Steps
      title: CreateWorkflowRequest
      properties:
        Description:
          $ref: '#/components/schemas/WorkflowDescription'
        Steps:
          $ref: '#/components/schemas/WorkflowSteps'
        OnExceptionSteps:
          $ref: '#/components/schemas/WorkflowSteps'
        Tags:
          $ref: '#/components/schemas/Tags'
    DeleteAccessRequest:
      type: object
      required:
        - ServerId
        - ExternalId
      title: DeleteAccessRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        ExternalId:
          $ref: '#/components/schemas/ExternalId'
    DeleteAgreementRequest:
      type: object
      required:
        - AgreementId
        - ServerId
      title: DeleteAgreementRequest
      properties:
        AgreementId:
          $ref: '#/components/schemas/AgreementId'
        ServerId:
          $ref: '#/components/schemas/ServerId'
    DeleteCertificateRequest:
      type: object
      required:
        - CertificateId
      title: DeleteCertificateRequest
      properties:
        CertificateId:
          $ref: '#/components/schemas/CertificateId'
    DeleteConnectorRequest:
      type: object
      required:
        - ConnectorId
      title: DeleteConnectorRequest
      properties:
        ConnectorId:
          $ref: '#/components/schemas/ConnectorId'
    DeleteHostKeyRequest:
      type: object
      required:
        - ServerId
        - HostKeyId
      title: DeleteHostKeyRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        HostKeyId:
          $ref: '#/components/schemas/HostKeyId'
    DeleteProfileRequest:
      type: object
      required:
        - ProfileId
      title: DeleteProfileRequest
      properties:
        ProfileId:
          $ref: '#/components/schemas/ProfileId'
    DeleteServerRequest:
      type: object
      required:
        - ServerId
      title: DeleteServerRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
    DeleteSshPublicKeyRequest:
      type: object
      required:
        - ServerId
        - SshPublicKeyId
        - UserName
      title: DeleteSshPublicKeyRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        SshPublicKeyId:
          $ref: '#/components/schemas/SshPublicKeyId'
        UserName:
          $ref: '#/components/schemas/UserName'
    DeleteUserRequest:
      type: object
      required:
        - ServerId
        - UserName
      title: DeleteUserRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        UserName:
          $ref: '#/components/schemas/UserName'
    DeleteWorkflowRequest:
      type: object
      required:
        - WorkflowId
      title: DeleteWorkflowRequest
      properties:
        WorkflowId:
          $ref: '#/components/schemas/WorkflowId'
    DescribeAccessResponse:
      type: object
      required:
        - ServerId
        - Access
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        Access:
          $ref: '#/components/schemas/DescribedAccess'
    DescribeAccessRequest:
      type: object
      required:
        - ServerId
        - ExternalId
      title: DescribeAccessRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        ExternalId:
          $ref: '#/components/schemas/ExternalId'
    DescribeAgreementResponse:
      type: object
      required:
        - Agreement
      properties:
        Agreement:
          $ref: '#/components/schemas/DescribedAgreement'
    DescribeAgreementRequest:
      type: object
      required:
        - AgreementId
        - ServerId
      title: DescribeAgreementRequest
      properties:
        AgreementId:
          $ref: '#/components/schemas/AgreementId'
        ServerId:
          $ref: '#/components/schemas/ServerId'
    DescribeCertificateResponse:
      type: object
      required:
        - Certificate
      properties:
        Certificate:
          $ref: '#/components/schemas/DescribedCertificate'
    DescribeCertificateRequest:
      type: object
      required:
        - CertificateId
      title: DescribeCertificateRequest
      properties:
        CertificateId:
          $ref: '#/components/schemas/CertificateId'
    DescribeConnectorResponse:
      type: object
      required:
        - Connector
      properties:
        Connector:
          $ref: '#/components/schemas/DescribedConnector'
    DescribeConnectorRequest:
      type: object
      required:
        - ConnectorId
      title: DescribeConnectorRequest
      properties:
        ConnectorId:
          $ref: '#/components/schemas/ConnectorId'
    DescribeExecutionResponse:
      type: object
      required:
        - WorkflowId
        - Execution
      properties:
        WorkflowId:
          $ref: '#/components/schemas/WorkflowId'
        Execution:
          $ref: '#/components/schemas/DescribedExecution'
    DescribeExecutionRequest:
      type: object
      required:
        - ExecutionId
        - WorkflowId
      title: DescribeExecutionRequest
      properties:
        ExecutionId:
          $ref: '#/components/schemas/ExecutionId'
        WorkflowId:
          $ref: '#/components/schemas/WorkflowId'
    DescribeHostKeyResponse:
      type: object
      required:
        - HostKey
      properties:
        HostKey:
          $ref: '#/components/schemas/DescribedHostKey'
    DescribeHostKeyRequest:
      type: object
      required:
        - ServerId
        - HostKeyId
      title: DescribeHostKeyRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        HostKeyId:
          $ref: '#/components/schemas/HostKeyId'
    DescribeProfileResponse:
      type: object
      required:
        - Profile
      properties:
        Profile:
          $ref: '#/components/schemas/DescribedProfile'
    DescribeProfileRequest:
      type: object
      required:
        - ProfileId
      title: DescribeProfileRequest
      properties:
        ProfileId:
          $ref: '#/components/schemas/ProfileId'
    DescribeSecurityPolicyResponse:
      type: object
      required:
        - SecurityPolicy
      properties:
        SecurityPolicy:
          $ref: '#/components/schemas/DescribedSecurityPolicy'
    DescribeSecurityPolicyRequest:
      type: object
      required:
        - SecurityPolicyName
      title: DescribeSecurityPolicyRequest
      properties:
        SecurityPolicyName:
          $ref: '#/components/schemas/SecurityPolicyName'
    DescribeServerResponse:
      type: object
      required:
        - Server
      properties:
        Server:
          $ref: '#/components/schemas/DescribedServer'
    DescribeServerRequest:
      type: object
      required:
        - ServerId
      title: DescribeServerRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
    DescribeUserResponse:
      type: object
      required:
        - ServerId
        - User
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        User:
          $ref: '#/components/schemas/DescribedUser'
    DescribeUserRequest:
      type: object
      required:
        - ServerId
        - UserName
      title: DescribeUserRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        UserName:
          $ref: '#/components/schemas/UserName'
    DescribeWorkflowResponse:
      type: object
      required:
        - Workflow
      properties:
        Workflow:
          $ref: '#/components/schemas/DescribedWorkflow'
    DescribeWorkflowRequest:
      type: object
      required:
        - WorkflowId
      title: DescribeWorkflowRequest
      properties:
        WorkflowId:
          $ref: '#/components/schemas/WorkflowId'
    ImportCertificateResponse:
      type: object
      required:
        - CertificateId
      properties:
        CertificateId:
          $ref: '#/components/schemas/CertificateId'
    ImportCertificateRequest:
      type: object
      required:
        - Usage
        - Certificate
      title: ImportCertificateRequest
      properties:
        Usage:
          $ref: '#/components/schemas/CertificateUsageType'
        Certificate:
          $ref: '#/components/schemas/CertificateBodyType'
        CertificateChain:
          $ref: '#/components/schemas/CertificateChainType'
        PrivateKey:
          $ref: '#/components/schemas/PrivateKeyType'
        ActiveDate:
          $ref: '#/components/schemas/CertDate'
        InactiveDate:
          $ref: '#/components/schemas/CertDate'
        Description:
          $ref: '#/components/schemas/Description'
        Tags:
          $ref: '#/components/schemas/Tags'
    ImportHostKeyResponse:
      type: object
      required:
        - ServerId
        - HostKeyId
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        HostKeyId:
          $ref: '#/components/schemas/HostKeyId'
    ImportHostKeyRequest:
      type: object
      required:
        - ServerId
        - HostKeyBody
      title: ImportHostKeyRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        HostKeyBody:
          $ref: '#/components/schemas/HostKey'
        Description:
          $ref: '#/components/schemas/HostKeyDescription'
        Tags:
          $ref: '#/components/schemas/Tags'
    ImportSshPublicKeyResponse:
      type: object
      required:
        - ServerId
        - SshPublicKeyId
        - UserName
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        SshPublicKeyId:
          $ref: '#/components/schemas/SshPublicKeyId'
        UserName:
          $ref: '#/components/schemas/UserName'
      description: 'Identifies the user, the server they belong to, and the identifier of the SSH public key associated with that user. A user can have more than one key on each server that they are associated with.'
    ImportSshPublicKeyRequest:
      type: object
      required:
        - ServerId
        - SshPublicKeyBody
        - UserName
      title: ImportSshPublicKeyRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        SshPublicKeyBody:
          $ref: '#/components/schemas/SshPublicKeyBody'
        UserName:
          $ref: '#/components/schemas/UserName'
    ListAccessesResponse:
      type: object
      required:
        - ServerId
        - Accesses
      properties:
        NextToken:
          $ref: '#/components/schemas/NextToken'
        ServerId:
          $ref: '#/components/schemas/ServerId'
        Accesses:
          $ref: '#/components/schemas/ListedAccesses'
    ListAccessesRequest:
      type: object
      required:
        - ServerId
      title: ListAccessesRequest
      properties:
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
        NextToken:
          $ref: '#/components/schemas/NextToken'
        ServerId:
          $ref: '#/components/schemas/ServerId'
    InvalidNextTokenException: {}
    ListAgreementsResponse:
      type: object
      required:
        - Agreements
      properties:
        NextToken:
          $ref: '#/components/schemas/NextToken'
        Agreements:
          $ref: '#/components/schemas/ListedAgreements'
    ListAgreementsRequest:
      type: object
      required:
        - ServerId
      title: ListAgreementsRequest
      properties:
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
        NextToken:
          $ref: '#/components/schemas/NextToken'
        ServerId:
          $ref: '#/components/schemas/ServerId'
    ListCertificatesResponse:
      type: object
      required:
        - Certificates
      properties:
        NextToken:
          $ref: '#/components/schemas/NextToken'
        Certificates:
          $ref: '#/components/schemas/ListedCertificates'
    ListCertificatesRequest:
      type: object
      title: ListCertificatesRequest
      properties:
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
        NextToken:
          $ref: '#/components/schemas/NextToken'
    ListConnectorsResponse:
      type: object
      required:
        - Connectors
      properties:
        NextToken:
          $ref: '#/components/schemas/NextToken'
        Connectors:
          $ref: '#/components/schemas/ListedConnectors'
    ListConnectorsRequest:
      type: object
      title: ListConnectorsRequest
      properties:
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
        NextToken:
          $ref: '#/components/schemas/NextToken'
    ListExecutionsResponse:
      type: object
      required:
        - WorkflowId
        - Executions
      properties:
        NextToken:
          $ref: '#/components/schemas/NextToken'
        WorkflowId:
          $ref: '#/components/schemas/WorkflowId'
        Executions:
          $ref: '#/components/schemas/ListedExecutions'
    ListExecutionsRequest:
      type: object
      required:
        - WorkflowId
      title: ListExecutionsRequest
      properties:
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
        NextToken:
          $ref: '#/components/schemas/NextToken'
        WorkflowId:
          $ref: '#/components/schemas/WorkflowId'
    ListHostKeysResponse:
      type: object
      required:
        - ServerId
        - HostKeys
      properties:
        NextToken:
          $ref: '#/components/schemas/NextToken'
        ServerId:
          $ref: '#/components/schemas/ServerId'
        HostKeys:
          $ref: '#/components/schemas/ListedHostKeys'
    ListHostKeysRequest:
      type: object
      required:
        - ServerId
      title: ListHostKeysRequest
      properties:
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
        NextToken:
          $ref: '#/components/schemas/NextToken'
        ServerId:
          $ref: '#/components/schemas/ServerId'
    ListProfilesResponse:
      type: object
      required:
        - Profiles
      properties:
        NextToken:
          $ref: '#/components/schemas/NextToken'
        Profiles:
          $ref: '#/components/schemas/ListedProfiles'
    ListProfilesRequest:
      type: object
      title: ListProfilesRequest
      properties:
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
        NextToken:
          $ref: '#/components/schemas/NextToken'
        ProfileType:
          $ref: '#/components/schemas/ProfileType'
    ListSecurityPoliciesResponse:
      type: object
      required:
        - SecurityPolicyNames
      properties:
        NextToken:
          $ref: '#/components/schemas/NextToken'
        SecurityPolicyNames:
          $ref: '#/components/schemas/SecurityPolicyNames'
    ListSecurityPoliciesRequest:
      type: object
      title: ListSecurityPoliciesRequest
      properties:
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
        NextToken:
          $ref: '#/components/schemas/NextToken'
    ListServersResponse:
      type: object
      required:
        - Servers
      properties:
        NextToken:
          $ref: '#/components/schemas/NextToken'
        Servers:
          $ref: '#/components/schemas/ListedServers'
    ListServersRequest:
      type: object
      title: ListServersRequest
      properties:
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
        NextToken:
          $ref: '#/components/schemas/NextToken'
    ListTagsForResourceResponse:
      type: object
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        NextToken:
          $ref: '#/components/schemas/NextToken'
        Tags:
          $ref: '#/components/schemas/Tags'
    ListTagsForResourceRequest:
      type: object
      required:
        - Arn
      title: ListTagsForResourceRequest
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
        NextToken:
          $ref: '#/components/schemas/NextToken'
    ListUsersResponse:
      type: object
      required:
        - ServerId
        - Users
      properties:
        NextToken:
          $ref: '#/components/schemas/NextToken'
        ServerId:
          $ref: '#/components/schemas/ServerId'
        Users:
          $ref: '#/components/schemas/ListedUsers'
    ListUsersRequest:
      type: object
      required:
        - ServerId
      title: ListUsersRequest
      properties:
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
        NextToken:
          $ref: '#/components/schemas/NextToken'
        ServerId:
          $ref: '#/components/schemas/ServerId'
    ListWorkflowsResponse:
      type: object
      required:
        - Workflows
      properties:
        NextToken:
          $ref: '#/components/schemas/NextToken'
        Workflows:
          $ref: '#/components/schemas/ListedWorkflows'
    ListWorkflowsRequest:
      type: object
      title: ListWorkflowsRequest
      properties:
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
        NextToken:
          $ref: '#/components/schemas/NextToken'
    SendWorkflowStepStateResponse:
      type: object
      properties: {}
    SendWorkflowStepStateRequest:
      type: object
      required:
        - WorkflowId
        - ExecutionId
        - Token
        - Status
      title: SendWorkflowStepStateRequest
      properties:
        WorkflowId:
          $ref: '#/components/schemas/WorkflowId'
        ExecutionId:
          $ref: '#/components/schemas/ExecutionId'
        Token:
          $ref: '#/components/schemas/CallbackToken'
        Status:
          $ref: '#/components/schemas/CustomStepStatus'
    StartFileTransferResponse:
      type: object
      required:
        - TransferId
      properties:
        TransferId:
          $ref: '#/components/schemas/TransferId'
    StartFileTransferRequest:
      type: object
      required:
        - ConnectorId
      title: StartFileTransferRequest
      properties:
        ConnectorId:
          $ref: '#/components/schemas/ConnectorId'
        SendFilePaths:
          $ref: '#/components/schemas/FilePaths'
        RetrieveFilePaths:
          $ref: '#/components/schemas/FilePaths'
        LocalDirectoryPath:
          $ref: '#/components/schemas/FilePath'
        RemoteDirectoryPath:
          $ref: '#/components/schemas/FilePath'
    StartServerRequest:
      type: object
      required:
        - ServerId
      title: StartServerRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
    StopServerRequest:
      type: object
      required:
        - ServerId
      title: StopServerRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
    TagResourceRequest:
      type: object
      required:
        - Arn
        - Tags
      title: TagResourceRequest
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        Tags:
          $ref: '#/components/schemas/Tags'
    TestConnectionResponse:
      type: object
      properties:
        ConnectorId:
          $ref: '#/components/schemas/ConnectorId'
        Status:
          $ref: '#/components/schemas/Status'
        StatusMessage:
          $ref: '#/components/schemas/Message'
    TestConnectionRequest:
      type: object
      required:
        - ConnectorId
      title: TestConnectionRequest
      properties:
        ConnectorId:
          $ref: '#/components/schemas/ConnectorId'
    TestIdentityProviderResponse:
      type: object
      required:
        - StatusCode
        - Url
      properties:
        Response:
          $ref: '#/components/schemas/Response'
        StatusCode:
          $ref: '#/components/schemas/StatusCode'
        Message:
          $ref: '#/components/schemas/Message'
        Url:
          $ref: '#/components/schemas/Url'
    TestIdentityProviderRequest:
      type: object
      required:
        - ServerId
        - UserName
      title: TestIdentityProviderRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        ServerProtocol:
          $ref: '#/components/schemas/Protocol'
        SourceIp:
          $ref: '#/components/schemas/SourceIp'
        UserName:
          $ref: '#/components/schemas/UserName'
        UserPassword:
          $ref: '#/components/schemas/UserPassword'
    UntagResourceRequest:
      type: object
      required:
        - Arn
        - TagKeys
      title: UntagResourceRequest
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        TagKeys:
          $ref: '#/components/schemas/TagKeys'
    UpdateAccessResponse:
      type: object
      required:
        - ServerId
        - ExternalId
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        ExternalId:
          $ref: '#/components/schemas/ExternalId'
    UpdateAccessRequest:
      type: object
      required:
        - ServerId
        - ExternalId
      title: UpdateAccessRequest
      properties:
        HomeDirectory:
          $ref: '#/components/schemas/HomeDirectory'
        HomeDirectoryType:
          $ref: '#/components/schemas/HomeDirectoryType'
        HomeDirectoryMappings:
          $ref: '#/components/schemas/HomeDirectoryMappings'
        Policy:
          $ref: '#/components/schemas/Policy'
        PosixProfile:
          $ref: '#/components/schemas/PosixProfile'
        Role:
          $ref: '#/components/schemas/Role'
        ServerId:
          $ref: '#/components/schemas/ServerId'
        ExternalId:
          $ref: '#/components/schemas/ExternalId'
    UpdateAgreementResponse:
      type: object
      required:
        - AgreementId
      properties:
        AgreementId:
          $ref: '#/components/schemas/AgreementId'
    UpdateAgreementRequest:
      type: object
      required:
        - AgreementId
        - ServerId
      title: UpdateAgreementRequest
      properties:
        AgreementId:
          $ref: '#/components/schemas/AgreementId'
        ServerId:
          $ref: '#/components/schemas/ServerId'
        Description:
          $ref: '#/components/schemas/Description'
        Status:
          $ref: '#/components/schemas/AgreementStatusType'
        LocalProfileId:
          $ref: '#/components/schemas/ProfileId'
        PartnerProfileId:
          $ref: '#/components/schemas/ProfileId'
        BaseDirectory:
          $ref: '#/components/schemas/HomeDirectory'
        AccessRole:
          $ref: '#/components/schemas/Role'
    UpdateCertificateResponse:
      type: object
      required:
        - CertificateId
      properties:
        CertificateId:
          $ref: '#/components/schemas/CertificateId'
    UpdateCertificateRequest:
      type: object
      required:
        - CertificateId
      title: UpdateCertificateRequest
      properties:
        CertificateId:
          $ref: '#/components/schemas/CertificateId'
        ActiveDate:
          $ref: '#/components/schemas/CertDate'
        InactiveDate:
          $ref: '#/components/schemas/CertDate'
        Description:
          $ref: '#/components/schemas/Description'
    UpdateConnectorResponse:
      type: object
      required:
        - ConnectorId
      properties:
        ConnectorId:
          $ref: '#/components/schemas/ConnectorId'
    UpdateConnectorRequest:
      type: object
      required:
        - ConnectorId
      title: UpdateConnectorRequest
      properties:
        ConnectorId:
          $ref: '#/components/schemas/ConnectorId'
        Url:
          $ref: '#/components/schemas/Url'
        As2Config:
          $ref: '#/components/schemas/As2ConnectorConfig'
        AccessRole:
          $ref: '#/components/schemas/Role'
        LoggingRole:
          $ref: '#/components/schemas/Role'
        SftpConfig:
          $ref: '#/components/schemas/SftpConnectorConfig'
    UpdateHostKeyResponse:
      type: object
      required:
        - ServerId
        - HostKeyId
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        HostKeyId:
          $ref: '#/components/schemas/HostKeyId'
    UpdateHostKeyRequest:
      type: object
      required:
        - ServerId
        - HostKeyId
        - Description
      title: UpdateHostKeyRequest
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        HostKeyId:
          $ref: '#/components/schemas/HostKeyId'
        Description:
          $ref: '#/components/schemas/HostKeyDescription'
    UpdateProfileResponse:
      type: object
      required:
        - ProfileId
      properties:
        ProfileId:
          $ref: '#/components/schemas/ProfileId'
    UpdateProfileRequest:
      type: object
      required:
        - ProfileId
      title: UpdateProfileRequest
      properties:
        ProfileId:
          $ref: '#/components/schemas/ProfileId'
        CertificateIds:
          $ref: '#/components/schemas/CertificateIds'
    UpdateServerResponse:
      type: object
      required:
        - ServerId
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
    UpdateServerRequest:
      type: object
      required:
        - ServerId
      title: UpdateServerRequest
      properties:
        Certificate:
          $ref: '#/components/schemas/Certificate'
        ProtocolDetails:
          $ref: '#/components/schemas/ProtocolDetails'
        EndpointDetails:
          $ref: '#/components/schemas/EndpointDetails'
        EndpointType:
          $ref: '#/components/schemas/EndpointType'
        HostKey:
          $ref: '#/components/schemas/HostKey'
        IdentityProviderDetails:
          $ref: '#/components/schemas/IdentityProviderDetails'
        LoggingRole:
          $ref: '#/components/schemas/NullableRole'
        PostAuthenticationLoginBanner:
          $ref: '#/components/schemas/PostAuthenticationLoginBanner'
        PreAuthenticationLoginBanner:
          $ref: '#/components/schemas/PreAuthenticationLoginBanner'
        Protocols:
          $ref: '#/components/schemas/Protocols'
        SecurityPolicyName:
          $ref: '#/components/schemas/SecurityPolicyName'
        ServerId:
          $ref: '#/components/schemas/ServerId'
        WorkflowDetails:
          $ref: '#/components/schemas/WorkflowDetails'
        StructuredLogDestinations:
          $ref: '#/components/schemas/StructuredLogDestinations'
    ConflictException: {}
    UpdateUserResponse:
      type: object
      required:
        - ServerId
        - UserName
      properties:
        ServerId:
          $ref: '#/components/schemas/ServerId'
        UserName:
          $ref: '#/components/schemas/UserName'
      description: ' <code>UpdateUserResponse</code> returns the user name and identifier for the request to update a user''s properties.'
    UpdateUserRequest:
      type: object
      required:
        - ServerId
        - UserName
      title: UpdateUserRequest
      properties:
        HomeDirectory:
          $ref: '#/components/schemas/HomeDirectory'
        HomeDirectoryType:
          $ref: '#/components/schemas/HomeDirectoryType'
        HomeDirectoryMappings:
          $ref: '#/components/schemas/HomeDirectoryMappings'
        Policy:
          $ref: '#/components/schemas/Policy'
        PosixProfile:
          $ref: '#/components/schemas/PosixProfile'
        Role:
          $ref: '#/components/schemas/Role'
        ServerId:
          $ref: '#/components/schemas/ServerId'
        UserName:
          $ref: '#/components/schemas/UserName'
    AddressAllocationId:
      type: string
    AddressAllocationIds:
      type: array
      items:
        $ref: '#/components/schemas/AddressAllocationId'
    AgreementId:
      type: string
      pattern: '^a-([0-9a-f]{17})$'
      minLength: 19
      maxLength: 19
    AgreementStatusType:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
    Arn:
      type: string
      pattern: 'arn:.*'
      minLength: 20
      maxLength: 1600
    ProfileId:
      type: string
      pattern: '^p-([0-9a-f]{17})$'
      minLength: 19
      maxLength: 19
    MessageSubject:
      type: string
      pattern: '^[\p{Print}\p{Blank}]+'
      minLength: 1
      maxLength: 1024
    CompressionEnum:
      type: string
      enum:
        - ZLIB
        - DISABLED
    EncryptionAlg:
      type: string
      enum:
        - AES128_CBC
        - AES192_CBC
        - AES256_CBC
        - NONE
    SigningAlg:
      type: string
      enum:
        - SHA256
        - SHA384
        - SHA512
        - SHA1
        - NONE
    MdnSigningAlg:
      type: string
      enum:
        - SHA256
        - SHA384
        - SHA512
        - SHA1
        - NONE
        - DEFAULT
    MdnResponse:
      type: string
      enum:
        - SYNC
        - NONE
    As2ConnectorSecretId:
      type: string
      minLength: 0
      maxLength: 2048
    As2ConnectorConfig:
      type: object
      properties:
        LocalProfileId:
          $ref: '#/components/schemas/ProfileId'
        PartnerProfileId:
          $ref: '#/components/schemas/ProfileId'
        MessageSubject:
          $ref: '#/components/schemas/MessageSubject'
        Compression:
          $ref: '#/components/schemas/CompressionEnum'
        EncryptionAlgorithm:
          $ref: '#/components/schemas/EncryptionAlg'
        SigningAlgorithm:
          $ref: '#/components/schemas/SigningAlg'
        MdnSigningAlgorithm:
          $ref: '#/components/schemas/MdnSigningAlg'
        MdnResponse:
          $ref: '#/components/schemas/MdnResponse'
        BasicAuthSecretId:
          $ref: '#/components/schemas/As2ConnectorSecretId'
      description: 'Contains the details for an AS2 connector object. The connector object is used for AS2 outbound processes, to connect the Transfer Family customer with the trading partner.'
    As2Id:
      type: string
      pattern: '^[\p{Print}\s]*'
      minLength: 1
      maxLength: 128
    As2Transport:
      type: string
      enum:
        - HTTP
    As2Transports:
      type: array
      items:
        $ref: '#/components/schemas/As2Transport'
      minItems: 1
      maxItems: 1
    CallbackToken:
      type: string
      pattern: \w+
      minLength: 1
      maxLength: 64
    CertDate:
      type: string
      format: date-time
    CertSerial:
      type: string
      pattern: '^[\p{XDigit}{2}:?]*'
      minLength: 0
      maxLength: 48
    Certificate:
      type: string
      maxLength: 1600
    CertificateBodyType:
      type: string
      pattern: '^[\u0009\u000A\u000D\u0020-\u00FF]*'
      minLength: 1
      maxLength: 16384
      format: password
    CertificateChainType:
      type: string
      pattern: '^[\u0009\u000A\u000D\u0020-\u00FF]*'
      minLength: 1
      maxLength: 2097152
      format: password
    CertificateId:
      type: string
      pattern: '^cert-([0-9a-f]{17})$'
      minLength: 22
      maxLength: 22
    CertificateIds:
      type: array
      items:
        $ref: '#/components/schemas/CertificateId'
    CertificateStatusType:
      type: string
      enum:
        - ACTIVE
        - PENDING_ROTATION
        - INACTIVE
    CertificateType:
      type: string
      enum:
        - CERTIFICATE
        - CERTIFICATE_WITH_PRIVATE_KEY
    CertificateUsageType:
      type: string
      enum:
        - SIGNING
        - ENCRYPTION
    ConnectorId:
      type: string
      pattern: '^c-([0-9a-f]{17})$'
      minLength: 19
      maxLength: 19
    WorkflowStepName:
      type: string
      pattern: '^[\w-]*$'
      maxLength: 30
    InputFileLocation:
      type: object
      properties:
        S3FileLocation:
          $ref: '#/components/schemas/S3InputFileLocation'
        EfsFileLocation:
          $ref: '#/components/schemas/EfsFileLocation'
      description: Specifies the location for the file that's being processed.
    OverwriteExisting:
      type: string
      enum:
        - 'TRUE'
        - 'FALSE'
    SourceFileLocation:
      type: string
      pattern: '^\$\{(\w+.)+\w+\}$'
      maxLength: 256
    CopyStepDetails:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/WorkflowStepName'
        DestinationFileLocation:
          $ref: '#/components/schemas/InputFileLocation'
        OverwriteExisting:
          $ref: '#/components/schemas/OverwriteExisting'
        SourceFileLocation:
          $ref: '#/components/schemas/SourceFileLocation'
      description: Each step type has its own <code>StepDetails</code> structure.
    HomeDirectory:
      type: string
      pattern: ^$|/.*
      maxLength: 1024
    HomeDirectoryType:
      type: string
      enum:
        - PATH
        - LOGICAL
    HomeDirectoryMappings:
      type: array
      items:
        $ref: '#/components/schemas/HomeDirectoryMapEntry'
      minItems: 1
      maxItems: 50
    Policy:
      type: string
      maxLength: 2048
    PosixProfile:
      type: object
      required:
        - Uid
        - Gid
      properties:
        Uid:
          $ref: '#/components/schemas/PosixId'
        Gid:
          $ref: '#/components/schemas/PosixId'
        SecondaryGids:
          $ref: '#/components/schemas/SecondaryGids'
      description: 'The full POSIX identity, including user ID (<code>Uid</code>), group ID (<code>Gid</code>), and any secondary groups IDs (<code>SecondaryGids</code>), that controls your users'' access to your Amazon EFS file systems. The POSIX permissions that are set on files and directories in your file system determine the level of access your users get when transferring files into and out of your Amazon EFS file systems.'
    Role:
      type: string
      pattern: 'arn:.*role/.*'
      minLength: 20
      maxLength: 2048
    ServerId:
      type: string
      pattern: '^s-([0-9a-f]{17})$'
      minLength: 19
      maxLength: 19
    ExternalId:
      type: string
      pattern: '^S-1-[\d-]+$'
      minLength: 1
      maxLength: 256
    Description:
      type: string
      pattern: '^[\p{Graph}]+'
      minLength: 1
      maxLength: 200
    Tags:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
      minItems: 1
      maxItems: 50
    Url:
      type: string
      maxLength: 255
    SftpConnectorConfig:
      type: object
      properties:
        UserSecretId:
          $ref: '#/components/schemas/SecretId'
        TrustedHostKeys:
          $ref: '#/components/schemas/SftpConnectorTrustedHostKeyList'
      description: Contains the details for an SFTP connector object. The connector object is used for transferring files to and from a partner's SFTP server.
    ProfileType:
      type: string
      enum:
        - LOCAL
        - PARTNER
    Domain:
      type: string
      enum:
        - S3
        - EFS
    EndpointDetails:
      type: object
      properties:
        AddressAllocationIds:
          $ref: '#/components/schemas/AddressAllocationIds'
        SubnetIds:
          $ref: '#/components/schemas/SubnetIds'
        VpcEndpointId:
          $ref: '#/components/schemas/VpcEndpointId'
        VpcId:
          $ref: '#/components/schemas/VpcId'
        SecurityGroupIds:
          $ref: '#/components/schemas/SecurityGroupIds'
      description: '<p>The virtual private cloud (VPC) endpoint settings that are configured for your file transfer protocol-enabled server. With a VPC endpoint, you can restrict access to your server and resources only within your VPC. To control incoming internet traffic, invoke the <code>UpdateServer</code> API and attach an Elastic IP address to your server''s endpoint.</p> <note> <p> After May 19, 2021, you won''t be able to create a server using <code>EndpointType=VPC_ENDPOINT</code> in your Amazon Web Servicesaccount if your account hasn''t already done so before May 19, 2021. If you have already created servers with <code>EndpointType=VPC_ENDPOINT</code> in your Amazon Web Servicesaccount on or before May 19, 2021, you will not be affected. After this date, use <code>EndpointType</code>=<code>VPC</code>.</p> <p>For more information, see https://docs.aws.amazon.com/transfer/latest/userguide/create-server-in-vpc.html#deprecate-vpc-endpoint.</p> </note>'
    EndpointType:
      type: string
      enum:
        - PUBLIC
        - VPC
        - VPC_ENDPOINT
    HostKey:
      type: string
      maxLength: 4096
      format: password
    IdentityProviderDetails:
      type: object
      properties:
        Url:
          $ref: '#/components/schemas/Url'
        InvocationRole:
          $ref: '#/components/schemas/Role'
        DirectoryId:
          $ref: '#/components/schemas/DirectoryId'
        Function:
          $ref: '#/components/schemas/Function'
        SftpAuthenticationMethods:
          $ref: '#/components/schemas/SftpAuthenticationMethods'
      description: Returns information related to the type of user authentication that is in use for a file transfer protocol-enabled server's users. A server can have only one method of authentication.
    IdentityProviderType:
      type: string
      enum:
        - SERVICE_MANAGED
        - API_GATEWAY
        - AWS_DIRECTORY_SERVICE
        - AWS_LAMBDA
      description: '<p>The mode of authentication for a server. The default value is <code>SERVICE_MANAGED</code>, which allows you to store and access user credentials within the Transfer Family service.</p> <p>Use <code>AWS_DIRECTORY_SERVICE</code> to provide access to Active Directory groups in Directory Service for Microsoft Active Directory or Microsoft Active Directory in your on-premises environment or in Amazon Web Services using AD Connector. This option also requires you to provide a Directory ID by using the <code>IdentityProviderDetails</code> parameter.</p> <p>Use the <code>API_GATEWAY</code> value to integrate with an identity provider of your choosing. The <code>API_GATEWAY</code> setting requires you to provide an Amazon API Gateway endpoint URL to call for authentication by using the <code>IdentityProviderDetails</code> parameter.</p> <p>Use the <code>AWS_LAMBDA</code> value to directly use an Lambda function as your identity provider. If you choose this value, you must specify the ARN for the Lambda function in the <code>Function</code> parameter for the <code>IdentityProviderDetails</code> data type.</p>'
    PostAuthenticationLoginBanner:
      type: string
      pattern: '[\x09-\x0D\x20-\x7E]*'
      maxLength: 512
    PreAuthenticationLoginBanner:
      type: string
      pattern: '[\x09-\x0D\x20-\x7E]*'
      maxLength: 512
    Protocols:
      type: array
      items:
        $ref: '#/components/schemas/Protocol'
      minItems: 1
      maxItems: 4
    ProtocolDetails:
      type: object
      properties:
        PassiveIp:
          $ref: '#/components/schemas/PassiveIp'
        TlsSessionResumptionMode:
          $ref: '#/components/schemas/TlsSessionResumptionMode'
        SetStatOption:
          $ref: '#/components/schemas/SetStatOption'
        As2Transports:
          $ref: '#/components/schemas/As2Transports'
      description: ' The protocol settings that are configured for your server. '
    SecurityPolicyName:
      type: string
      pattern: TransferSecurityPolicy-.+
      maxLength: 100
    WorkflowDetails:
      type: object
      properties:
        OnUpload:
          $ref: '#/components/schemas/OnUploadWorkflowDetails'
        OnPartialUpload:
          $ref: '#/components/schemas/OnPartialUploadWorkflowDetails'
      description: Container for the <code>WorkflowDetail</code> data type. It is used by actions that trigger a workflow to begin execution.
    StructuredLogDestinations:
      type: array
      items:
        $ref: '#/components/schemas/Arn'
      minItems: 0
      maxItems: 1
    SshPublicKeyBody:
      type: string
      maxLength: 2048
    UserName:
      type: string
      pattern: '^[\w][\w@.-]{2,99}$'
      minLength: 3
      maxLength: 100
    WorkflowDescription:
      type: string
      pattern: '^[\w- ]*$'
      maxLength: 256
    WorkflowSteps:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowStep'
      maxItems: 8
    WorkflowId:
      type: string
      pattern: '^w-([a-z0-9]{17})$'
      minLength: 19
      maxLength: 19
    CustomStepTarget:
      type: string
      pattern: 'arn:[a-z-]+:lambda:.*$'
      maxLength: 170
    CustomStepTimeoutSeconds:
      type: integer
      minimum: 1
      maximum: 1800
    CustomStepDetails:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/WorkflowStepName'
        Target:
          $ref: '#/components/schemas/CustomStepTarget'
        TimeoutSeconds:
          $ref: '#/components/schemas/CustomStepTimeoutSeconds'
        SourceFileLocation:
          $ref: '#/components/schemas/SourceFileLocation'
      description: Each step type has its own <code>StepDetails</code> structure.
    CustomStepStatus:
      type: string
      enum:
        - SUCCESS
        - FAILURE
    DateImported:
      type: string
      format: date-time
    EncryptionType:
      type: string
      enum:
        - PGP
    DecryptStepDetails:
      type: object
      required:
        - Type
        - DestinationFileLocation
      properties:
        Name:
          $ref: '#/components/schemas/WorkflowStepName'
        Type:
          $ref: '#/components/schemas/EncryptionType'
        SourceFileLocation:
          $ref: '#/components/schemas/SourceFileLocation'
        OverwriteExisting:
          $ref: '#/components/schemas/OverwriteExisting'
        DestinationFileLocation:
          $ref: '#/components/schemas/InputFileLocation'
      description: Each step type has its own <code>StepDetails</code> structure.
    HostKeyId:
      type: string
      pattern: '^hostkey-[0-9a-f]{17}$'
      minLength: 25
      maxLength: 25
    SshPublicKeyId:
      type: string
      pattern: '^key-[0-9a-f]{17}$'
      minLength: 21
      maxLength: 21
    DeleteStepDetails:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/WorkflowStepName'
        SourceFileLocation:
          $ref: '#/components/schemas/SourceFileLocation'
      description: 'The name of the step, used to identify the delete step.'
    DescribedAccess:
      type: object
      properties:
        HomeDirectory:
          $ref: '#/components/schemas/HomeDirectory'
        HomeDirectoryMappings:
          $ref: '#/components/schemas/HomeDirectoryMappings'
        HomeDirectoryType:
          $ref: '#/components/schemas/HomeDirectoryType'
        Policy:
          $ref: '#/components/schemas/Policy'
        PosixProfile:
          $ref: '#/components/schemas/PosixProfile'
        Role:
          $ref: '#/components/schemas/Role'
        ExternalId:
          $ref: '#/components/schemas/ExternalId'
      description: Describes the properties of the access that was specified.
    DescribedAgreement:
      type: object
      required:
        - Arn
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        AgreementId:
          $ref: '#/components/schemas/AgreementId'
        Description:
          $ref: '#/components/schemas/Description'
        Status:
          $ref: '#/components/schemas/AgreementStatusType'
        ServerId:
          $ref: '#/components/schemas/ServerId'
        LocalProfileId:
          $ref: '#/components/schemas/ProfileId'
        PartnerProfileId:
          $ref: '#/components/schemas/ProfileId'
        BaseDirectory:
          $ref: '#/components/schemas/HomeDirectory'
        AccessRole:
          $ref: '#/components/schemas/Role'
        Tags:
          $ref: '#/components/schemas/Tags'
      description: Describes the properties of an agreement.
    DescribedCertificate:
      type: object
      required:
        - Arn
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        CertificateId:
          $ref: '#/components/schemas/CertificateId'
        Usage:
          $ref: '#/components/schemas/CertificateUsageType'
        Status:
          $ref: '#/components/schemas/CertificateStatusType'
        Certificate:
          $ref: '#/components/schemas/CertificateBodyType'
        CertificateChain:
          $ref: '#/components/schemas/CertificateChainType'
        ActiveDate:
          $ref: '#/components/schemas/CertDate'
        InactiveDate:
          $ref: '#/components/schemas/CertDate'
        Serial:
          $ref: '#/components/schemas/CertSerial'
        NotBeforeDate:
          $ref: '#/components/schemas/CertDate'
        NotAfterDate:
          $ref: '#/components/schemas/CertDate'
        Type:
          $ref: '#/components/schemas/CertificateType'
        Description:
          $ref: '#/components/schemas/Description'
        Tags:
          $ref: '#/components/schemas/Tags'
      description: Describes the properties of a certificate.
    DescribedConnector:
      type: object
      required:
        - Arn
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        ConnectorId:
          $ref: '#/components/schemas/ConnectorId'
        Url:
          $ref: '#/components/schemas/Url'
        As2Config:
          $ref: '#/components/schemas/As2ConnectorConfig'
        AccessRole:
          $ref: '#/components/schemas/Role'
        LoggingRole:
          $ref: '#/components/schemas/Role'
        Tags:
          $ref: '#/components/schemas/Tags'
        SftpConfig:
          $ref: '#/components/schemas/SftpConnectorConfig'
      description: 'Describes the parameters for the connector, as identified by the <code>ConnectorId</code>.'
    ExecutionId:
      type: string
      pattern: '^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$'
      minLength: 36
      maxLength: 36
    DescribedExecution:
      type: object
      properties:
        ExecutionId:
          $ref: '#/components/schemas/ExecutionId'
        InitialFileLocation:
          $ref: '#/components/schemas/FileLocation'
        ServiceMetadata:
          $ref: '#/components/schemas/ServiceMetadata'
        ExecutionRole:
          $ref: '#/components/schemas/Role'
        LoggingConfiguration:
          $ref: '#/components/schemas/LoggingConfiguration'
        PosixProfile:
          $ref: '#/components/schemas/PosixProfile'
        Status:
          $ref: '#/components/schemas/ExecutionStatus'
        Results:
          $ref: '#/components/schemas/ExecutionResults'
      description: The details for an execution object.
    DescribedHostKey:
      type: object
      required:
        - Arn
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        HostKeyId:
          $ref: '#/components/schemas/HostKeyId'
        HostKeyFingerprint:
          $ref: '#/components/schemas/HostKeyFingerprint'
        Description:
          $ref: '#/components/schemas/HostKeyDescription'
        Type:
          $ref: '#/components/schemas/HostKeyType'
        DateImported:
          $ref: '#/components/schemas/DateImported'
        Tags:
          $ref: '#/components/schemas/Tags'
      description: The details for a server host key.
    DescribedProfile:
      type: object
      required:
        - Arn
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        ProfileId:
          $ref: '#/components/schemas/ProfileId'
        ProfileType:
          $ref: '#/components/schemas/ProfileType'
        As2Id:
          $ref: '#/components/schemas/As2Id'
        CertificateIds:
          $ref: '#/components/schemas/CertificateIds'
        Tags:
          $ref: '#/components/schemas/Tags'
      description: 'The details for a local or partner AS2 profile. '
    DescribedSecurityPolicy:
      type: object
      required:
        - SecurityPolicyName
      properties:
        Fips:
          $ref: '#/components/schemas/Fips'
        SecurityPolicyName:
          $ref: '#/components/schemas/SecurityPolicyName'
        SshCiphers:
          $ref: '#/components/schemas/SecurityPolicyOptions'
        SshKexs:
          $ref: '#/components/schemas/SecurityPolicyOptions'
        SshMacs:
          $ref: '#/components/schemas/SecurityPolicyOptions'
        TlsCiphers:
          $ref: '#/components/schemas/SecurityPolicyOptions'
      description: 'Describes the properties of a security policy that was specified. For more information about security policies, see <a href="https://docs.aws.amazon.com/transfer/latest/userguide/security-policies.html">Working with security policies</a>.'
    DescribedServer:
      type: object
      required:
        - Arn
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        Certificate:
          $ref: '#/components/schemas/Certificate'
        ProtocolDetails:
          $ref: '#/components/schemas/ProtocolDetails'
        Domain:
          $ref: '#/components/schemas/Domain'
        EndpointDetails:
          $ref: '#/components/schemas/EndpointDetails'
        EndpointType:
          $ref: '#/components/schemas/EndpointType'
        HostKeyFingerprint:
          $ref: '#/components/schemas/HostKeyFingerprint'
        IdentityProviderDetails:
          $ref: '#/components/schemas/IdentityProviderDetails'
        IdentityProviderType:
          $ref: '#/components/schemas/IdentityProviderType'
        LoggingRole:
          $ref: '#/components/schemas/Role'
        PostAuthenticationLoginBanner:
          $ref: '#/components/schemas/PostAuthenticationLoginBanner'
        PreAuthenticationLoginBanner:
          $ref: '#/components/schemas/PreAuthenticationLoginBanner'
        Protocols:
          $ref: '#/components/schemas/Protocols'
        SecurityPolicyName:
          $ref: '#/components/schemas/SecurityPolicyName'
        ServerId:
          $ref: '#/components/schemas/ServerId'
        State:
          $ref: '#/components/schemas/State'
        Tags:
          $ref: '#/components/schemas/Tags'
        UserCount:
          $ref: '#/components/schemas/UserCount'
        WorkflowDetails:
          $ref: '#/components/schemas/WorkflowDetails'
        StructuredLogDestinations:
          $ref: '#/components/schemas/StructuredLogDestinations'
      description: Describes the properties of a file transfer protocol-enabled server that was specified.
    DescribedUser:
      type: object
      required:
        - Arn
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        HomeDirectory:
          $ref: '#/components/schemas/HomeDirectory'
        HomeDirectoryMappings:
          $ref: '#/components/schemas/HomeDirectoryMappings'
        HomeDirectoryType:
          $ref: '#/components/schemas/HomeDirectoryType'
        Policy:
          $ref: '#/components/schemas/Policy'
        PosixProfile:
          $ref: '#/components/schemas/PosixProfile'
        Role:
          $ref: '#/components/schemas/Role'
        SshPublicKeys:
          $ref: '#/components/schemas/SshPublicKeys'
        Tags:
          $ref: '#/components/schemas/Tags'
        UserName:
          $ref: '#/components/schemas/UserName'
      description: Describes the properties of a user that was specified.
    DescribedWorkflow:
      type: object
      required:
        - Arn
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        Description:
          $ref: '#/components/schemas/WorkflowDescription'
        Steps:
          $ref: '#/components/schemas/WorkflowSteps'
        OnExceptionSteps:
          $ref: '#/components/schemas/WorkflowSteps'
        WorkflowId:
          $ref: '#/components/schemas/WorkflowId'
        Tags:
          $ref: '#/components/schemas/Tags'
      description: Describes the properties of the specified workflow
    FileLocation:
      type: object
      properties:
        S3FileLocation:
          $ref: '#/components/schemas/S3FileLocation'
        EfsFileLocation:
          $ref: '#/components/schemas/EfsFileLocation'
      description: Specifies the Amazon S3 or EFS file details to be used in the step.
    ServiceMetadata:
      type: object
      required:
        - UserDetails
      properties:
        UserDetails:
          $ref: '#/components/schemas/UserDetails'
      description: A container object for the session details that are associated with a workflow.
    LoggingConfiguration:
      type: object
      properties:
        LoggingRole:
          $ref: '#/components/schemas/Role'
        LogGroupName:
          $ref: '#/components/schemas/LogGroupName'
      description: Consists of the logging role and the log group name.
    ExecutionStatus:
      type: string
      enum:
        - IN_PROGRESS
        - COMPLETED
        - EXCEPTION
        - HANDLING_EXCEPTION
    ExecutionResults:
      type: object
      properties:
        Steps:
          $ref: '#/components/schemas/ExecutionStepResults'
        OnExceptionSteps:
          $ref: '#/components/schemas/ExecutionStepResults'
      description: 'Specifies the steps in the workflow, as well as the steps to execute in case of any errors during workflow execution.'
    HostKeyFingerprint:
      type: string
    HostKeyDescription:
      type: string
      pattern: '^[\p{Print}]*$'
      minLength: 0
      maxLength: 200
    HostKeyType:
      type: string
    Fips:
      type: boolean
    SecurityPolicyOptions:
      type: array
      items:
        $ref: '#/components/schemas/SecurityPolicyOption'
    State:
      type: string
      enum:
        - OFFLINE
        - ONLINE
        - STARTING
        - STOPPING
        - START_FAILED
        - STOP_FAILED
      description: '<p>Describes the condition of a file transfer protocol-enabled server with respect to its ability to perform file operations. There are six possible states: <code>OFFLINE</code>, <code>ONLINE</code>, <code>STARTING</code>, <code>STOPPING</code>, <code>START_FAILED</code>, and <code>STOP_FAILED</code>.</p> <p> <code>OFFLINE</code> indicates that the server exists, but that it is not available for file operations. <code>ONLINE</code> indicates that the server is available to perform file operations. <code>STARTING</code> indicates that the server''s was instantiated, but the server is not yet available to perform file operations. Under normal conditions, it can take a couple of minutes for the server to be completely operational. Both <code>START_FAILED</code> and <code>STOP_FAILED</code> are error conditions.</p>'
    UserCount:
      type: integer
    SshPublicKeys:
      type: array
      items:
        $ref: '#/components/schemas/SshPublicKey'
      maxItems: 5
    DirectoryId:
      type: string
      pattern: '^d-[0-9a-f]{10}$'
      minLength: 12
      maxLength: 12
    EfsFileSystemId:
      type: string
      pattern: '^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:(access-point/fsap|file-system/fs)-[0-9a-f]{8,40}|fs(ap)?-[0-9a-f]{8,40})$'
      maxLength: 128
    EfsPath:
      type: string
      pattern: '^[^\x00]+$'
      minLength: 1
      maxLength: 65536
    EfsFileLocation:
      type: object
      properties:
        FileSystemId:
          $ref: '#/components/schemas/EfsFileSystemId'
        Path:
          $ref: '#/components/schemas/EfsPath'
      description: <p>Specifies the details for the file location for the file that's being used in the workflow. Only applicable if you are using Amazon Elastic File Systems (Amazon EFS) for storage.</p> <p> </p>
    SubnetIds:
      type: array
      items:
        $ref: '#/components/schemas/SubnetId'
    VpcEndpointId:
      type: string
      pattern: '^vpce-[0-9a-f]{17}$'
      minLength: 22
      maxLength: 22
    VpcId:
      type: string
    SecurityGroupIds:
      type: array
      items:
        $ref: '#/components/schemas/SecurityGroupId'
    ExecutionErrorType:
      type: string
      enum:
        - PERMISSION_DENIED
        - CUSTOM_STEP_FAILED
        - THROTTLED
        - ALREADY_EXISTS
        - NOT_FOUND
        - BAD_REQUEST
        - TIMEOUT
        - INTERNAL_SERVER_ERROR
    ExecutionErrorMessage:
      type: string
    ExecutionError:
      type: object
      required:
        - Type
        - Message
      properties:
        Type:
          $ref: '#/components/schemas/ExecutionErrorType'
        Message:
          $ref: '#/components/schemas/ExecutionErrorMessage'
      description: 'Specifies the error message and type, for an error that occurs during the execution of the workflow.'
    ExecutionStepResults:
      type: array
      items:
        $ref: '#/components/schemas/ExecutionStepResult'
      minItems: 1
      maxItems: 50
    WorkflowStepType:
      type: string
      enum:
        - COPY
        - CUSTOM
        - TAG
        - DELETE
        - DECRYPT
    StepResultOutputsJson:
      type: string
      maxLength: 65536
    ExecutionStepResult:
      type: object
      properties:
        StepType:
          $ref: '#/components/schemas/WorkflowStepType'
        Outputs:
          $ref: '#/components/schemas/StepResultOutputsJson'
        Error:
          $ref: '#/components/schemas/ExecutionError'
      description: 'Specifies the following details for the step: error (if any), outputs (if any), and the step type.'
    S3FileLocation:
      type: object
      properties:
        Bucket:
          $ref: '#/components/schemas/S3Bucket'
        Key:
          $ref: '#/components/schemas/S3Key'
        VersionId:
          $ref: '#/components/schemas/S3VersionId'
        Etag:
          $ref: '#/components/schemas/S3Etag'
      description: Specifies the details for the file location for the file that's being used in the workflow. Only applicable if you are using S3 storage.
    FilePath:
      type: string
      pattern: ^(.)+
      minLength: 1
      maxLength: 1024
    FilePaths:
      type: array
      items:
        $ref: '#/components/schemas/FilePath'
      minItems: 1
      maxItems: 10
    Function:
      type: string
      pattern: '^arn:[a-z-]+:lambda:.*$'
      minLength: 1
      maxLength: 170
    MapEntry:
      type: string
      pattern: ^/.*
      maxLength: 1024
    MapTarget:
      type: string
      pattern: ^/.*
      maxLength: 1024
    HomeDirectoryMapEntry:
      type: object
      required:
        - Entry
        - Target
      properties:
        Entry:
          $ref: '#/components/schemas/MapEntry'
        Target:
          $ref: '#/components/schemas/MapTarget'
      description: '<p>Represents an object that contains entries and targets for <code>HomeDirectoryMappings</code>.</p> <p>The following is an <code>Entry</code> and <code>Target</code> pair example for <code>chroot</code>.</p> <p> <code>[ { "Entry": "/", "Target": "/bucket_name/home/mydirectory" } ]</code> </p>'
    SftpAuthenticationMethods:
      type: string
      enum:
        - PASSWORD
        - PUBLIC_KEY
        - PUBLIC_KEY_OR_PASSWORD
        - PUBLIC_KEY_AND_PASSWORD
    PrivateKeyType:
      type: string
      pattern: '^[\u0009\u000A\u000D\u0020-\u00FF]*'
      minLength: 1
      maxLength: 16384
      format: password
    S3InputFileLocation:
      type: object
      properties:
        Bucket:
          $ref: '#/components/schemas/S3Bucket'
        Key:
          $ref: '#/components/schemas/S3Key'
      description: '<p>Specifies the customer input Amazon S3 file location. If it is used inside <code>copyStepDetails.DestinationFileLocation</code>, it should be the S3 copy destination.</p> <p> You need to provide the bucket and key. The key can represent either a path or a file. This is determined by whether or not you end the key value with the forward slash (/) character. If the final character is "/", then your file is copied to the folder, and its name does not change. If, rather, the final character is alphanumeric, your uploaded file is renamed to the path value. In this case, if a file with that name already exists, it is overwritten. </p> <p>For example, if your path is <code>shared-files/bob/</code>, your uploaded files are copied to the <code>shared-files/bob/</code>, folder. If your path is <code>shared-files/today</code>, each uploaded file is copied to the <code>shared-files</code> folder and named <code>today</code>: each upload overwrites the previous version of the <i>bob</i> file.</p>'
    MaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    NextToken:
      type: string
      minLength: 1
      maxLength: 6144
    ListedAccesses:
      type: array
      items:
        $ref: '#/components/schemas/ListedAccess'
    ListedAgreements:
      type: array
      items:
        $ref: '#/components/schemas/ListedAgreement'
    ListedCertificates:
      type: array
      items:
        $ref: '#/components/schemas/ListedCertificate'
    ListedConnectors:
      type: array
      items:
        $ref: '#/components/schemas/ListedConnector'
    ListedExecutions:
      type: array
      items:
        $ref: '#/components/schemas/ListedExecution'
    ListedHostKeys:
      type: array
      items:
        $ref: '#/components/schemas/ListedHostKey'
    ListedProfiles:
      type: array
      items:
        $ref: '#/components/schemas/ListedProfile'
    SecurityPolicyNames:
      type: array
      items:
        $ref: '#/components/schemas/SecurityPolicyName'
    ListedServers:
      type: array
      items:
        $ref: '#/components/schemas/ListedServer'
    ListedUsers:
      type: array
      items:
        $ref: '#/components/schemas/ListedUser'
    ListedWorkflows:
      type: array
      items:
        $ref: '#/components/schemas/ListedWorkflow'
    ListedAccess:
      type: object
      properties:
        HomeDirectory:
          $ref: '#/components/schemas/HomeDirectory'
        HomeDirectoryType:
          $ref: '#/components/schemas/HomeDirectoryType'
        Role:
          $ref: '#/components/schemas/Role'
        ExternalId:
          $ref: '#/components/schemas/ExternalId'
      description: Lists the properties for one or more specified associated accesses.
    ListedAgreement:
      type: object
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        AgreementId:
          $ref: '#/components/schemas/AgreementId'
        Description:
          $ref: '#/components/schemas/Description'
        Status:
          $ref: '#/components/schemas/AgreementStatusType'
        ServerId:
          $ref: '#/components/schemas/ServerId'
        LocalProfileId:
          $ref: '#/components/schemas/ProfileId'
        PartnerProfileId:
          $ref: '#/components/schemas/ProfileId'
      description: Describes the properties of an agreement.
    ListedCertificate:
      type: object
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        CertificateId:
          $ref: '#/components/schemas/CertificateId'
        Usage:
          $ref: '#/components/schemas/CertificateUsageType'
        Status:
          $ref: '#/components/schemas/CertificateStatusType'
        ActiveDate:
          $ref: '#/components/schemas/CertDate'
        InactiveDate:
          $ref: '#/components/schemas/CertDate'
        Type:
          $ref: '#/components/schemas/CertificateType'
        Description:
          $ref: '#/components/schemas/Description'
      description: Describes the properties of a certificate.
    ListedConnector:
      type: object
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        ConnectorId:
          $ref: '#/components/schemas/ConnectorId'
        Url:
          $ref: '#/components/schemas/Url'
      description: Returns details of the connector that is specified.
    ListedExecution:
      type: object
      properties:
        ExecutionId:
          $ref: '#/components/schemas/ExecutionId'
        InitialFileLocation:
          $ref: '#/components/schemas/FileLocation'
        ServiceMetadata:
          $ref: '#/components/schemas/ServiceMetadata'
        Status:
          $ref: '#/components/schemas/ExecutionStatus'
      description: Returns properties of the execution that is specified.
    ListedHostKey:
      type: object
      required:
        - Arn
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        HostKeyId:
          $ref: '#/components/schemas/HostKeyId'
        Fingerprint:
          $ref: '#/components/schemas/HostKeyFingerprint'
        Description:
          $ref: '#/components/schemas/HostKeyDescription'
        Type:
          $ref: '#/components/schemas/HostKeyType'
        DateImported:
          $ref: '#/components/schemas/DateImported'
      description: Returns properties of the host key that's specified.
    ListedProfile:
      type: object
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        ProfileId:
          $ref: '#/components/schemas/ProfileId'
        As2Id:
          $ref: '#/components/schemas/As2Id'
        ProfileType:
          $ref: '#/components/schemas/ProfileType'
      description: Returns the properties of the profile that was specified.
    ListedServer:
      type: object
      required:
        - Arn
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        Domain:
          $ref: '#/components/schemas/Domain'
        IdentityProviderType:
          $ref: '#/components/schemas/IdentityProviderType'
        EndpointType:
          $ref: '#/components/schemas/EndpointType'
        LoggingRole:
          $ref: '#/components/schemas/Role'
        ServerId:
          $ref: '#/components/schemas/ServerId'
        State:
          $ref: '#/components/schemas/State'
        UserCount:
          $ref: '#/components/schemas/UserCount'
      description: Returns properties of a file transfer protocol-enabled server that was specified.
    SshPublicKeyCount:
      type: integer
    ListedUser:
      type: object
      required:
        - Arn
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        HomeDirectory:
          $ref: '#/components/schemas/HomeDirectory'
        HomeDirectoryType:
          $ref: '#/components/schemas/HomeDirectoryType'
        Role:
          $ref: '#/components/schemas/Role'
        SshPublicKeyCount:
          $ref: '#/components/schemas/SshPublicKeyCount'
        UserName:
          $ref: '#/components/schemas/UserName'
      description: Returns properties of the user that you specify.
    ListedWorkflow:
      type: object
      properties:
        WorkflowId:
          $ref: '#/components/schemas/WorkflowId'
        Description:
          $ref: '#/components/schemas/WorkflowDescription'
        Arn:
          $ref: '#/components/schemas/Arn'
      description: 'Contains the identifier, text description, and Amazon Resource Name (ARN) for the workflow.'
    LogGroupName:
      type: string
      pattern: '[\.\-_/#A-Za-z0-9]*'
      minLength: 1
      maxLength: 512
    Message:
      type: string
    NullableRole:
      type: string
      pattern: '^$|arn:.*role/.*'
      maxLength: 2048
    WorkflowDetail:
      type: object
      required:
        - WorkflowId
        - ExecutionRole
      properties:
        WorkflowId:
          $ref: '#/components/schemas/WorkflowId'
        ExecutionRole:
          $ref: '#/components/schemas/Role'
      description: '<p>Specifies the workflow ID for the workflow to assign and the execution role that''s used for executing the workflow.</p> <p>In addition to a workflow to execute when a file is uploaded completely, <code>WorkflowDetails</code> can also contain a workflow ID (and execution role) for a workflow to execute on partial upload. A partial upload occurs when the server session disconnects while the file is still being uploaded.</p>'
    OnPartialUploadWorkflowDetails:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowDetail'
      maxItems: 1
    OnUploadWorkflowDetails:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowDetail'
      maxItems: 1
    PassiveIp:
      type: string
      maxLength: 15
    PosixId:
      type: integer
      minimum: 0
      maximum: 4294967295
    SecondaryGids:
      type: array
      items:
        $ref: '#/components/schemas/PosixId'
      minItems: 0
      maxItems: 16
    Protocol:
      type: string
      enum:
        - SFTP
        - FTP
        - FTPS
        - AS2
    TlsSessionResumptionMode:
      type: string
      enum:
        - DISABLED
        - ENABLED
        - ENFORCED
    SetStatOption:
      type: string
      enum:
        - DEFAULT
        - ENABLE_NO_OP
    Response:
      type: string
    S3Bucket:
      type: string
      pattern: '^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$'
      minLength: 3
      maxLength: 63
    S3Etag:
      type: string
      pattern: ^.+$
      minLength: 1
      maxLength: 65536
    S3Key:
      type: string
      pattern: '[\P{M}\p{M}]*'
      maxLength: 1024
    S3VersionId:
      type: string
      pattern: ^.+$
      minLength: 1
      maxLength: 1024
    S3TagKey:
      type: string
      pattern: '^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$'
      minLength: 1
      maxLength: 128
    S3TagValue:
      type: string
      pattern: '^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$'
      maxLength: 256
    S3Tag:
      type: object
      required:
        - Key
        - Value
      properties:
        Key:
          $ref: '#/components/schemas/S3TagKey'
        Value:
          $ref: '#/components/schemas/S3TagValue'
      description: Specifies the key-value pair that are assigned to a file during the execution of a Tagging step.
    S3Tags:
      type: array
      items:
        $ref: '#/components/schemas/S3Tag'
      minItems: 1
      maxItems: 10
    SecretId:
      type: string
      minLength: 1
      maxLength: 2048
    SecurityGroupId:
      type: string
      pattern: '^sg-[0-9a-f]{8,17}$'
      minLength: 11
      maxLength: 20
    SecurityPolicyOption:
      type: string
      maxLength: 50
    UserDetails:
      type: object
      required:
        - UserName
        - ServerId
      properties:
        UserName:
          $ref: '#/components/schemas/UserName'
        ServerId:
          $ref: '#/components/schemas/ServerId'
        SessionId:
          $ref: '#/components/schemas/SessionId'
      description: 'Specifies the user name, server ID, and session ID for a workflow.'
    SessionId:
      type: string
      pattern: '^[\w-]*$'
      minLength: 3
      maxLength: 32
    SftpConnectorTrustedHostKeyList:
      type: array
      items:
        $ref: '#/components/schemas/SftpConnectorTrustedHostKey'
      minItems: 1
      maxItems: 10
    SftpConnectorTrustedHostKey:
      type: string
      minLength: 1
      maxLength: 2048
    SourceIp:
      type: string
      pattern: '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$'
      maxLength: 32
    SshPublicKey:
      type: object
      required:
        - DateImported
        - SshPublicKeyBody
        - SshPublicKeyId
      properties:
        DateImported:
          $ref: '#/components/schemas/DateImported'
        SshPublicKeyBody:
          $ref: '#/components/schemas/SshPublicKeyBody'
        SshPublicKeyId:
          $ref: '#/components/schemas/SshPublicKeyId'
      description: 'Provides information about the public Secure Shell (SSH) key that is associated with a Transfer Family user for the specific file transfer protocol-enabled server (as identified by <code>ServerId</code>). The information returned includes the date the key was imported, the public key contents, and the public key ID. A user can store more than one SSH public key associated with their user name on a specific server.'
    TransferId:
      type: string
      pattern: '^[0-9a-zA-Z./-]+$'
      minLength: 1
      maxLength: 512
    Status:
      type: string
    StatusCode:
      type: integer
    SubnetId:
      type: string
    TagKey:
      type: string
      maxLength: 128
    TagValue:
      type: string
      maxLength: 256
    Tag:
      type: object
      required:
        - Key
        - Value
      properties:
        Key:
          $ref: '#/components/schemas/TagKey'
        Value:
          $ref: '#/components/schemas/TagValue'
      description: 'Creates a key-value pair for a specific resource. Tags are metadata that you can use to search for and group a resource for various purposes. You can apply tags to servers, users, and roles. A tag key can take more than one value. For example, to group servers for accounting purposes, you might create a tag called <code>Group</code> and assign the values <code>Research</code> and <code>Accounting</code> to that group.'
    TagKeys:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
      minItems: 1
      maxItems: 50
    TagStepDetails:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/WorkflowStepName'
        Tags:
          $ref: '#/components/schemas/S3Tags'
        SourceFileLocation:
          $ref: '#/components/schemas/SourceFileLocation'
      description: <p>Each step type has its own <code>StepDetails</code> structure.</p> <p>The key/value pairs used to tag a file during the execution of a workflow step.</p>
    UserPassword:
      type: string
      maxLength: 1024
      format: password
    WorkflowStep:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/WorkflowStepType'
        CopyStepDetails:
          $ref: '#/components/schemas/CopyStepDetails'
        CustomStepDetails:
          $ref: '#/components/schemas/CustomStepDetails'
        DeleteStepDetails:
          $ref: '#/components/schemas/DeleteStepDetails'
        TagStepDetails:
          $ref: '#/components/schemas/TagStepDetails'
        DecryptStepDetails:
          $ref: '#/components/schemas/DecryptStepDetails'
      description: The basic building block of a workflow.
security:
  - hmac: []
