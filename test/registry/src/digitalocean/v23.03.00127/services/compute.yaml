openapi: 3.0.0
info:
  title: compute API
  description: digitalocean API
  version: '2.0'
paths:
  /v2/account/keys:
    get:
      operationId: sshKeys_list
      summary: List All SSH Keys
      description: >-
        To list all of the keys in your account, send a GET request to
        `/v2/account/keys`. The response will be a JSON object with a key set to
        `ssh_keys`. The value of this will be an array of ssh_key objects, each
        of which contains the standard ssh_key attributes.
      tags:
        - SSH Keys
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/sshKeys_all'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/account/keys"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                keys, _, err := client.Keys.List(ctx, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            ssh_keys = client.ssh_keys.all
            ssh_keys.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.ssh_keys.list()
      security:
        - bearer_auth:
            - ssh_key:read
    post:
      operationId: sshKeys_create
      summary: Create a New SSH Key
      description: >-
        To add a new SSH public key to your DigitalOcean account, send a POST
        request to `/v2/account/keys`. Set the `name` attribute to the name you
        wish to use and the `public_key` attribute to the full public key you
        are adding.
      tags:
        - SSH Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sshKeys'
      responses:
        '201':
          $ref: '#/components/responses/sshKeys_new'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"My SSH Public Key","public_key":"ssh-rsa AEXAMPLEaC1yc2EAAAADAQABAAAAQQDDHr/jh2Jy4yALcK4JyWbVkPRaWmhck3IgCoeOO3z1e2dBowLh64QAM+Qb72pxekALga2oi4GvT+TlWNhzPH4V example"}' \
              "https://api.digitalocean.com/v2/account/keys" 
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                createRequest := &godo.KeyCreateRequest{
                    Name:      "My SSH Public Key",
                    PublicKey: "ssh-rsa AEXAMPLEaC1yc2EAAAADAQABAAAAQQDDHr/jh2Jy4yALcK4JyWbVkPRaWmhck3IgCoeOO3z1e2dBowLh64QAM+Qb72pxekALga2oi4GvT+TlWNhzPH4V example",
                }

                transfer, _, err := client.Keys.Create(ctx, createRequest)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            ssh_key = DropletKit::SSHKey.new(
              name: 'My SSH Public Key',
              public_key: 'ssh-rsa AEXAMPLEaC1yc2EAAAADAQABAAAAQQDDHr/jh2Jy4yALcK4JyWbVkPRaWmhck3IgCoeOO3z1e2dBowLh64QAM+Qb72pxekALga2oi4GvT+TlWNhzPH4V example'
            )
            client.ssh_keys.create(ssh_key)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "public_key": "ssh-rsa AEXAMPLEaC1yc2EAAAADAQABAAAAQQDDHr/jh2Jy4yALcK4JyWbVkPRaWmhck3IgCoeOO3z1e2dBowLh64QAM+Qb72pxekALga2oi4GvT+TlWNhzPH4V example",
              "name": "My SSH Public Key"
            }

            resp = client.ssh_keys.create(body=req)
      security:
        - bearer_auth:
            - ssh_key:create
  /v2/account/keys/{ssh_key_identifier}:
    get:
      operationId: sshKeys_get
      summary: Retrieve an Existing SSH Key
      description: >-
        To get information about a key, send a GET request to
        `/v2/account/keys/$KEY_ID` or `/v2/account/keys/$KEY_FINGERPRINT`.

        The response will be a JSON object with the key `ssh_key` and value an
        ssh_key object which contains the standard ssh_key attributes.
      tags:
        - SSH Keys
      parameters:
        - $ref: '#/components/parameters/ssh_key_identifier'
      responses:
        '200':
          $ref: '#/components/responses/sshKeys_existing'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/account/keys/512190" 
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                key, _, err := client.Keys.GetByID(ctx, 512190)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.ssh_keys.find(id: 512190) 
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.ssh_keys.get(ssh_key_identifier=512190)
      security:
        - bearer_auth:
            - ssh_key:read
    put:
      operationId: sshKeys_update
      summary: Update an SSH Key's Name
      description: >-
        To update the name of an SSH key, send a PUT request to either
        `/v2/account/keys/$SSH_KEY_ID` or
        `/v2/account/keys/$SSH_KEY_FINGERPRINT`. Set the `name` attribute to the
        new name you want to use.
      tags:
        - SSH Keys
      parameters:
        - $ref: '#/components/parameters/ssh_key_identifier'
      requestBody:
        description: Set the `name` attribute to the new name you want to use.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ssh_key_name'
      responses:
        '200':
          $ref: '#/components/responses/sshKeys_existing'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PUT \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"Renamed SSH Key"}' \
              "https://api.digitalocean.com/v2/account/keys/512190"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                updateRequest := &godo.KeyUpdateRequest{
                    Name:      "Renamed SSH Key",
                }

                key, _, err := client.Keys.UpdateByID(ctx, 512190, updateRequest)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            ssh_key = DropletKit::SSHKey.new(name: 'Renamed SSH Key')
            client.ssh_keys.update(ssh_key, id: 512190)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "My SSH Public Key"
            }

            resp = client.ssh_keys.update(ssh_key_identifier=512190, body=req)
      security:
        - bearer_auth:
            - ssh_key:update
    delete:
      operationId: sshKeys_delete
      summary: Delete an SSH Key
      description: >-
        To destroy a public SSH key that you have in your account, send a DELETE
        request to `/v2/account/keys/$KEY_ID` or
        `/v2/account/keys/$KEY_FINGERPRINT`.

        A 204 status will be returned, indicating that the action was successful
        and that the response body is empty.
      tags:
        - SSH Keys
      parameters:
        - $ref: '#/components/parameters/ssh_key_identifier'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/account/keys/512190" 
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.Keys.DeleteByID(ctx, 512190)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.ssh_keys.delete(id: 512190)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.ssh_keys.delete(ssh_key_identifier=512190)
      security:
        - bearer_auth:
            - ssh_key:delete
  /v2/cdn/endpoints:
    get:
      operationId: cdn_list_endpoints
      summary: List All CDN Endpoints
      description: >-
        To list all of the CDN endpoints available on your account, send a GET
        request to `/v2/cdn/endpoints`.
      tags:
        - CDN Endpoints
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/all_cdn_endpoints'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/cdn/endpoints"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                cdns, _, err := client.CDNs.List(ctx, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            cdns = client.cdns.all
            cdns.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            get_resp = client.cdn.list_endpoints()
      security:
        - bearer_auth:
            - cdn:read
    post:
      operationId: cdn_create_endpoint
      summary: Create a New CDN Endpoint
      description: >
        To create a new CDN endpoint, send a POST request to
        `/v2/cdn/endpoints`. The

        origin attribute must be set to the fully qualified domain name (FQDN)
        of a

        DigitalOcean Space. Optionally, the TTL may be configured by setting the
        `ttl`

        attribute.


        A custom subdomain may be configured by specifying the `custom_domain`
        and

        `certificate_id` attributes.
      tags:
        - CDN Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cdn_endpoint'
            examples:
              CDN Endpoint:
                value:
                  origin: static-images.nyc3.digitaloceanspaces.com
                  ttl: 3600
              CDN Endpoint With Custom Domain:
                value:
                  origin: static-images.nyc3.digitaloceanspaces.com
                  certificate_id: 892071a0-bb95-49bc-8021-3afd67a210bf
                  custom_domain: static.example.com
                  ttl: 3600
      responses:
        '201':
          $ref: '#/components/responses/existing_endpoint'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"origin": "static-images.nyc3.digitaloceanspaces.com","certificate_id": "892071a0-bb95-49bc-8021-3afd67a210bf","custom_domain": "static.example.com","ttl": 3600}' \
              "https://api.digitalocean.com/v2/cdn/endpoints"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                createRequest := &godo.CDNCreateRequest{
                    Origin:        "static-images.nyc3.digitaloceanspaces.com",
                    TTL:           3600,
                    CustomDomain:  "static.example.com",
                    CertificateID: "892071a0-bb95-49bc-8021-3afd67a210b",
                }

                cdn, _, err := client.CDNs.Create(ctx, createRequest)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            cdn = DropletKit::CDN.new(
              origin: 'static-images.nyc3.digitaloceanspaces.com',
              custom_domain: 'static.example.com',
              certificate_id: '892071a0-bb95-49bc-8021-3afd67a210bf',
              ttl: 3600
            )

            client.cdns.create(cdn)
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            create_req = {"origin": "static-images.nyc3.digitaloceanspaces.com",
            "ttl": 3600}

            create_resp = client.cdn.create_endpoint(create_req)
      security:
        - bearer_auth:
            - cdn:create
  /v2/cdn/endpoints/{cdn_id}:
    get:
      operationId: cdn_get_endpoint
      summary: Retrieve an Existing CDN Endpoint
      description: >-
        To show information about an existing CDN endpoint, send a GET request
        to `/v2/cdn/endpoints/$ENDPOINT_ID`.
      tags:
        - CDN Endpoints
      parameters:
        - $ref: '#/components/parameters/cdn_endpoint_id'
      responses:
        '200':
          $ref: '#/components/responses/existing_endpoint'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/cdn/endpoints/19f06b6a-3ace-4315-b086-499a0e521b76"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                cdn, _, err := client.CDNs.Get(ctx, "19f06b6a-3ace-4315-b086-499a0e521b76")
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.cdns.find(id: '19f06b6a-3ace-4315-b086-499a0e521b76')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            get_resp = client.cdn.get_endpoint(cdn_id="aa34ba1")
      security:
        - bearer_auth:
            - cdn:read
    put:
      operationId: cdn_update_endpoints
      summary: Update a CDN Endpoint
      description: >
        To update the TTL, certificate ID, or the FQDN of the custom subdomain
        for

        an existing CDN endpoint, send a PUT request to

        `/v2/cdn/endpoints/$ENDPOINT_ID`.
      tags:
        - CDN Endpoints
      parameters:
        - $ref: '#/components/parameters/cdn_endpoint_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_endpoint'
      responses:
        '200':
          $ref: '#/components/responses/existing_endpoint'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: >-
            curl -X PUT \

            -H "Content-Type: application/json" \

            -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \

            -d '{"ttl": 1800}' \

            "https://api.digitalocean.com/v2/cdn/endpoints/19f06b6a-3ace-4315-b086-499a0e521b76" 
        - lang: Go
          source: |-
            import (
                "context"
                "github.com/digitalocean/godo"
            )

            func main() {
                pat := "mytoken"

                client := godo.NewFromToken(pat)
                ctx := context.TODO()

                updateRequest := &godo.CDNUpdateTTLRequest{TTL: 1800}
                cdn, _, err := client.CDNs.UpdateTTL(ctx, "19f06b6a-3ace-4315-b086-499a0e521b76", updateRequest)
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token =
            '16f79fc8cd5adcfe528a0994311fa63cc877737b385b6ff7d12ed6684ba4fef5'

            client = DropletKit::Client.new(access_token: token)


            client.cdns.update_ttl(id: '19f06b6a-3ace-4315-b086-499a0e521b76',
            ttl: 1800)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            update_req = {
                "ttl": 3600,
                "certificate_id": "892071a0-bb95-49bc-8021-3afd67a210bf",
                "custom_domain": "static.example.com",
            }

            update_resp = client.cdn.update_endpoints("19f06b6a", update_req)
      security:
        - bearer_auth:
            - cdn:update
    delete:
      operationId: cdn_delete_endpoint
      summary: Delete a CDN Endpoint
      description: >
        To delete a specific CDN endpoint, send a DELETE request to

        `/v2/cdn/endpoints/$ENDPOINT_ID`.


        A status of 204 will be given. This indicates that the request was
        processed

        successfully, but that no response body is needed.
      tags:
        - CDN Endpoints
      parameters:
        - $ref: '#/components/parameters/cdn_endpoint_id'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/cdn/endpoints/19f06b6a-3ace-4315-b086-499a0e521b76"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.CDNs.Delete(ctx, "19f06b6a-3ace-4315-b086-499a0e521b76")
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.cdns.delete(id: '19f06b6a-3ace-4315-b086-499a0e521b76')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            delete_resp = client.cdn.delete_endpoint(cdn_id="bba23af")
      security:
        - bearer_auth:
            - cdn:delete
  /v2/cdn/endpoints/{cdn_id}/cache:
    delete:
      operationId: cdn_purge_cache
      summary: Purge the Cache for an Existing CDN Endpoint
      description: >
        To purge cached content from a CDN endpoint, send a DELETE request to

        `/v2/cdn/endpoints/$ENDPOINT_ID/cache`. The body of the request should
        include

        a `files` attribute containing a list of cached file paths to be purged.
        A

        path may be for a single file or may contain a wildcard (`*`) to
        recursively

        purge all files under a directory. When only a wildcard is provided, all
        cached 

        files will be purged. There is a rate limit of 50 files per 20 seconds
        that can 

        be purged. CDN endpoints have a rate limit of 5 requests per 10
        seconds. 

        Purging files using a wildcard path counts as a single request against
        the API's 

        rate limit. Two identical purge requests cannot be sent at the same
        time.
      tags:
        - CDN Endpoints
      parameters:
        - $ref: '#/components/parameters/cdn_endpoint_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/purge_cache'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"files": ["assets/img/hero.png","assets/css/*"]}' \
              "https://api.digitalocean.com/v2/cdn/endpoints/19f06b6a-3ace-4315-b086-499a0e521b76/cache"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                flushRequest := &godo.CDNFlushCacheRequest{
                    Files: []string{"assets/img/hero.png","assets/css/*"},
                }

                _, err := client.CDNs.FlushCache(ctx, "19f06b6a-3ace-4315-b086-499a0e521b76", flushRequest)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.cdns.flush_cache(
              id: '19f06b6a-3ace-4315-b086-499a0e521b76',
              files: ['assets/img/hero.png','assets/css/*']
            )
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            purge_req = {"files": ["path/to/image.png", "path/to/css/*"]}

            purge_resp = client.cdn.purge_cache("19f06b6a", purge_req)
      security:
        - bearer_auth:
            - cdn:delete
  /v2/certificates:
    get:
      operationId: certificates_list
      summary: List All Certificates
      description: >-
        To list all of the certificates available on your account, send a GET
        request to `/v2/certificates`.
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/certificate_name'
      tags:
        - Certificates
      responses:
        '200':
          $ref: '#/components/responses/all_certificates'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/certificates"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                certs, _, err := client.Certificates.List(ctx, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            certificates = client.certificates.all
            certificates.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            get_resp = client.certificates.list()
      security:
        - bearer_auth:
            - certificate:read
    post:
      operationId: certificates_create
      summary: Create a New Certificate
      description: >
        To upload new SSL certificate which you have previously generated, send
        a POST

        request to `/v2/certificates`.


        When uploading a user-generated certificate, the `private_key`,

        `leaf_certificate`, and optionally the `certificate_chain` attributes
        should

        be provided. The type must be set to `custom`.


        When using Let's Encrypt to create a certificate, the `dns_names`
        attribute

        must be provided, and the type must be set to `lets_encrypt`.
      tags:
        - Certificates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/certificate_request_lets_encrypt'
                - $ref: '#/components/schemas/certificate_request_custom'
      responses:
        '201':
          $ref: '#/components/responses/new_certificate'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name": "web-cert-01", "type": "custom", "private_key": "'"$(</path/to/privkey1.pem)"'","leaf_certificate": "'"$(</path/to/cert1.pem)"'","certificate_chain": "'"$(</path/to/fullchain1.pem)"'"}' \
              "https://api.digitalocean.com/v2/certificates"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                key, err := ioutil.ReadFile("/path/to/privkey1.pem")
                if err != nil {
                    fmt.Print(err)
                }

                cert, err := ioutil.ReadFile("/path/to/cert1.pem")
                if err != nil {
                    fmt.Print(err)
                }

                chain, err := ioutil.ReadFile("/path/to/fullchain1.pem")
                if err != nil {
                    fmt.Print(err)
                }

                createRequest := &godo.CertificateRequest{
                    Name:             "web-cert-01",
                    PrivateKey:       string(key),
                    LeafCertificate:  string(cert),
                    CertificateChain: string(chain),
                    Type:             "custom",
                }

                certObj, _, err := client.Certificates.Create(ctx, createRequest)
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            key = File.open('/path/to/privkey1.pem', 'r'){ |file| file.read }

            cert = File.open('/path/to/cert1.pem', 'r'){ |file| file.read }

            chain = File.open('/path/to/fullchain1.pem', 'r'){ |file| file.read
            }


            certificate = DropletKit::Certificate.new(
                name: 'web-cert-01',
                private_key: key,
                leaf_certificate: cert,
                certificate_chain: chain,
                type: 'custom'
            )


            client.certificates.create(certificate)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            create_resp = client.certificates.create(
                {
                    "name": "web-cert-01",
                    "type": "lets_encrypt",
                    "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDBIZMz8pnK6V52\nSVf+CYssOfCQHAx5f0Ou5rYbq3xNh8VHAIYJCQ1QxQIxKSP6+uODSYrb2KWyurP1\nDwGb8OYm0J3syEDtCUQik1cpCzpeNlAZ2f8FzXyYQAqPopxdRpsFz8DtZnVvu86X\nwrE4oFPl9MReICmZfBNWylpV5qgFPoXyJ70ZAsTm3cEe3n+LBXEnY4YrVDRWxA3w\nZ2mzZ03HZ1hHrxK9CMnS829U+8sK+UneZpCO7yLRPuxwhmps0wpK/YuZZfRAKF1F\nZRnak/SIQ28rnWufmdg16YqqHgl5JOgnb3aslKRvL4dI2Gwnkd2IHtpZnTR0gxFX\nfqqbQwuRAgMBAAECggEBAILLmkW0JzOkmLTDNzR0giyRkLoIROqDpfLtjKdwm95l\n9NUBJcU4vCvXQITKt/NhtnNTexcowg8pInb0ksJpg3UGE+4oMNBXVi2UW5MQZ5cm\ncVkQqgXkBF2YAY8FMaB6EML+0En2+dGR/3gIAr221xsFiXe1kHbB8Nb2c/d5HpFt\neRpLVJnK+TxSr78PcZA8DDGlSgwvgimdAaFUNO2OqB9/0E9UPyKk2ycdff/Z6ldF\n0hkCLtdYTTl8Kf/OwjcuTgmA2O3Y8/CoQX/L+oP9Rvt9pWCEfuebiOmHJVPO6Y6x\ngtQVEXwmF1pDHH4Qtz/e6UZTdYeMl9G4aNO2CawwcaYECgYEA57imgSOG4XsJLRh\nGGncV9R/xhy4AbDWLtAMzQRX4ktvKCaHWyQV2XK2we/cu29NLv2Y89WmerTNPOU+\nP8+pB31uty2ELySVn15QhKpQClVEAlxCnnNjXYrii5LOM80+lVmxvQwxVd8Yz8nj\nIntyioXNBEnYS7V2RxxFGgFun1cCgYEA1V3W+Uyamhq8JS5EY0FhyGcXdHd70K49\nW1ou7McIpncf9tM9acLS1hkI98rd2T69Zo8mKoV1V2hjFaKUYfNys6tTkYWeZCcJ\n3rW44j9DTD+FmmjcX6b8DzfybGLehfNbCw6n67/r45DXIV/fk6XZfkx6IEGO4ODt\nNfnvx4TuI1cCgYBACDiKqwSUvmkUuweOo4IuCxyb5Ee8v98P5JIE/VRDxlCbKbpx\npxEam6aBBQVcDi+n8o0H3WjjlKc6UqbW/01YMoMrvzotxNBLz8Y0QtQHZvR6KoCG\nRKCKstxTcWflzKuknbqN4RapAhNbKBDJ8PMSWfyDWNyaXzSmBdvaidbF1QKBgDI0\no4oD0Xkjg1QIYAUu9FBQmb9JAjRnW36saNBEQS/SZg4RRKknM683MtoDvVIKJk0E\nsAlfX+4SXQZRPDMUMtA+Jyrd0xhj6zmhbwClvDMr20crF3fWdgcqtft1BEFmsuyW\nJUMe5OWmRkjPI2+9ncDPRAllA7a8lnSV/Crph5N/AoGBAIK249temKrGe9pmsmAo\nQbNuYSmwpnMoAqdHTrl70HEmK7ob6SIVmsR8QFAkH7xkYZc4Bxbx4h1bdpozGB+/\nAangbiaYJcAOD1QyfiFbflvI1RFeHgrk7VIafeSeQv6qu0LLMi2zUbpgVzxt78Wg\neTuK2xNR0PIM8OI7pRpgyj1I\n-----END PRIVATE KEY-----",
                    "leaf_certificate": "-----BEGIN CERTIFICATE-----\nMIIFFjCCA/6gAwIBAgISA0AznUJmXhu08/89ZuSPC/kRMA0GCSqGSIb3DQEBCwUA\nMEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD\nExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNjExMjQwMDIzMDBaFw0x\nNzAyMjIwMDIzMDBaMCQxIjAgBgNVBAMTGWNsb3VkLmFuZHJld3NvbWV0aGluZy5j\nb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDBIZMz8pnK6V52SVf+\nCYssOfCQHAx5f0Ou5rYbq3xNh8VWHIYJCQ1QxQIxKSP6+uODSYrb2KWyurP1DwGb\n8OYm0J3syEDtCUQik1cpCzpeNlAZ2f8FzXyYQAqPopxdRpsFz8DtZnVvu86XwrE4\noFPl9MReICmZfBNWylpV5qgFPoXyJ70ZAsTm3cEe3n+LBXEnY4YrVDRWxA3wZ2mz\nZ03HZ1hHrxK9CMnS829U+8sK+UneZpCO7yLRPuxwhmps0wpK/YuZZfRAKF1FZRna\nk/SIQ28rnWufmdg16YqqHgl5JOgnb3aslKRvL4dI2Gwnkd2IHtpZnTR0gxFXfqqb\nQwuRAgMBAAGjggIaMIICFjAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFLsAFcxAhFX1\nMbCnzr9hEO5rL4jqMB8GA1UdIwQYMBaAFKhKamMEfd265tE5t6ZFZe/zqOyhMHAG\nCCsGAQUFBwEBBGQwYjAvBggrBgEFBQcwAYYjaHR0cDovL29jc3AuaW50LXgzLmxl\ndHNlbmNyeXB0Lm9yZy8wLwYIKwYBBQUHMAKGI2h0dHA6Ly9jZXJ0LmludC14My5s\nZXRzZW5jcnlwdC5vcmcvMCQGA1UdEQQdMBuCGWNsb3VkLmFuZHJld3NvbWV0aGlu\nZy5jb20wgf4GA1UdIASB9jCB8zAIBgZngQwBAgWrgeYGCysGAQQBgt8TAQEBMIHW\nMCYGCCsGAQUFBwIBFhpodHRwOi8vY3BzLmxldHNlbmNyeXB0Lm9yZzCBqwYIKwYB\nBQUHAgIwgZ4MgZtUaGlzIENlcnRpZmljYXRlIG1heSBvbmx5IGJlIHJlbGllZCB1\ncG9uIGJ5IFJlbHlpbmcgUGFydGllcyBhbmQgb25seSQ2ziBhY2NvcmRhbmNlIHdp\ndGggdGhlIENlcnRpZmljYXRlIFBvbGljeSBmb3VuZCBhdCBodHRwczovL2xldHNl\nbmNyeXB0Lm9yZy9yZXBvc2l0b3J5LzANBgkqhkiG9w0BAQsFAAOCAQEAOZVQvrjM\nPKXLARTjB5XsgfyDN3/qwLl7SmwGkPe+B+9FJpfScYG1JzVuCj/SoaPaK34G4x/e\niXwlwOXtMOtqjQYzNu2Pr2C+I+rVmaxIrCUXFmC205IMuUBEeWXG9Y/HvXQLPabD\nD3Gdl5+Feink9SDRP7G0HaAwq13hI7ARxkL9p+UIY39X0dV3WOboW2Re8nrkFXJ7\nq9Z6shK5QgpBfsLjtjNsQzaGV3ve1gOg25aTJGearBWOvEjJNA1wGMoKVXOtYwm/\nWyWoVdCQ8HmconcbJB6xc0UZ1EjvzRr5ZIvSa5uHZD0L3m7/kpPWlAlFJ7hHASPu\nUlF1zblDmg2Iaw==\n-----END CERTIFICATE-----",
                    "certificate_chain": "-----BEGIN CERTIFICATE-----\nMIIFFjCCA/6gAwIBAgISA0AznUJmXhu08/89ZuSPC/kRMA0GCSqGSIb3DQEBCwUA\nMEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD\nExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNjExMjQwMDIzMDBaFw0x\nNzAyMjIwMDIzMDBaMCQxIjAgBgNVBAMTGWNsb3VkLmFuZHJld3NvbWV0aGluZy5j\nb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDBIZMz7tnK6V52SVf+\nCYssOfCQHAx5f0Ou5rYbq3xNh8VHAIYJCQ1QxQIxKSP6+uODSYrb2KWyurP1DwGb\n8OYm0J3syEDtCUQik1cpCzpeNlAZ2f8FzXyYQAqPopxdRpsFz8DtZnVvu86XwrE4\noFPl9MReICmZfBNWylpV5qgFPoXyJ70ZAsTm3cEe3n+LBXEnY4YrVDRWxA3wZ2mz\nZ03HZ1hHrxK9CMnS829U+8sK+UneZpCO7yLRPuxwhmps0wpK/YuZZfRAKF1FZRna\nk/SIQ28rnWufmdg16YqqHgl5JOgnb3aslKRvL4dI2Gwnkd2IHtpZnTR0gxFXfqqb\nQwuRAgMBAAGjggIaMIICFjAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFLsAFcxAhFX1\nMbCnzr9hEO5rL4jqMB8GA1UdIwQYMBaAFKhKamMEfd265tE5t6ZFZe/zqOyhMHAG\nCCsGAQUFBwEBBGQwYjAvBggrBgEFBQcwAYYjaHR0cDovL29jc3AuaW50LXgzLmxl\ndHNlbmNyeXB0Lm9yZy8wLwYIKwYBBQUHMAKGI2h0dHA6Ly9jZXJ0LmludC14My5s\nZXRzZW5jcnlwdC5vcmcvMCQGA1UdEQQdMBuCGWNsb3VkLmFuZHJld3NvbWV0aGlu\nZy5jb20wgf4GA1UdIASB9jCB8zAIBgZngQwBAgEwgeWECysGAQQBgt8TAQEBMIHW\nMCYGCCsGAQUFBwIBFhpodHRwOi8vY3BzLmxldHNlbmNyeXB0Lm9yZzCBqwYIKwYB\nBQUHAgIwgZ4MgZtUaGlzIENlcnRpZmljYXRlIG1heSBvbmx5IGJlIHJlbGllZCB1\ncG9uIGJ5IFJlbHlpbmcgUGFydGllcyBhbmQgb25seSQ2ziBhY2NvcmRhbmNlIHdp\ndGggdGhlIENlcnRpZmljYXRlIFBvbGljeSBmb3VuZCBhdCBsdHRwczovL2xldHNl\nbmNyeXB0Lm9yZy9yZXBvc2l0b3J5LzANBgkqhkiG9w0BAQsFAAOCAQEAOZVQvrjM\nPKXLARTjB5XsgfyDN3/qwLl7SmwGkPe+B+9FJpfScYG1JzVuCj/SoaPaK34G4x/e\niXwlwOXtMOtqjQYzNu2Pr2C+I+rVmaxIrCUXFmC205IMuUBEeWXG9Y/HvXQLPabD\nD3Gdl5+Feink9SDRP7G0HaAwq13hI7ARxkL3o+UIY39X0dV3WOboW2Re8nrkFXJ7\nq9Z6shK5QgpBfsLjtjNsQzaGV3ve1gOg25aTJGearBWOvEjJNA1wGMoKVXOtYwm/\nWyWoVdCQ8HmconcbJB6xc0UZ1EjvzRr5ZIvSa5uHZD0L3m7/kpPWlAlFJ7hHASPu\nUlF1zblDmg2Iaw==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc2oLheynCDANBgkqhkiG9w0BAQsFADA/\nMSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT\nDkRTVCBSb290IENBIFgzMB4XDTE2MDMxNzE2NDA0NloXDTIxMDMxNzE2NDA0Nlow\nSjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUxldCdzIEVuY3J5cHQxIzAhBgNVBAMT\nGkxldCdzIEVuY3J5cHQgQXV0aG9yaXR5IFgzMIIBIjANBgkqhkiG9w0BAQEFAAOC\nAQ8AMIIBCgKCAQEAnNMM8FrlLsd3cl03g7NoYzDq1zUmGSXhvb418XCSL7e4S0EF\nq6meNQhY7LEqxGiHC6PjdeTm86dicbp5gWAf15Gan/PQeGdxyGkOlZHP/uaZ6WA8\nSMx+yk13EiSdRxta67nsHjcAHJyse6cF6s5K671B5TaYucv9bTyWaN8jKkKQDIZ0\nZ8h/pZq4UmEUEz9l6YKHy9v6Dlb2honzhT+Xhq+w3Brvaw2VFn3EK6BlspkENnWA\na6xK8xuQSXgvopZPKiAlKQTGdMDQMc2PMTiVFrqoM7hD8bEfwzB/onkxEz0tNvjj\n/PIzark5McWvxI0NHWQWM6r6hCm21AvA2H3DkwIPOIUo4IBfTCCAXkwEgYDVR0T\nAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwfwYIKwYBBQUHAQEEczBxMDIG\nCCsGAQUFBzABhiZodHRwOi8vaXNyZy50cnVzdGlkLm9jc3AuaWRlbnRydXN0LmNv\nbTA7BggrBgEFBQcwAoYvaHR0cDovL2FwcHMuaWRlbnRydXN0LmNvbS9yb290cy9k\nc3Ryb290Y2F4My5wN2MwHwYDVR0jBBgwFoAUxKexpHsscfrb4UuQdf/EFWCFiRAw\nVAYDVR0gBE0wSzAIBgZngQwBAgEwPwYLKwYBBAGC3xMBAQEwMDAuBggrBgEFBQcC\nARYiaHR0cDovL2Nwcy5yb290LXgxLmxldHNlbmNyeXB0Lm9yZzA8BgNVHR8ENTAz\nMDGgL6AthitodHRwOi8vY3JsLmlkZW50cnVzdC5jb20vRFNUUk9PVENBWDNDUkwu\nY3JsMB0GA1UdDgQWBBSoSmpjBH3duubRObemRWXv86jsoTANBgkqhkiG9w0BAQsF\nAAOCAQEA3TPXEfNjWDjdGBX7CVW+dla5cEilaUcne8IkCJLxWh9KEik3JHRRHGJo\nuM2VcGfl96S8TihRzZvoroed6ti6WqEBmtzw3Wodatg+VyOeph4EYpr/1wXKtx8/\nwApIvJSwtmVi4MFU5aMqrSDE6ea73Mj2tcMyo5jMd6jmeWUHK8so/joWUoHOUgwu\nX4Po1QYz+3dszkDqMp4fklxBwXRsW10KXzPMTZ+sOPAveyxindmjkW8lGy+QsRlG\nPfZ+G6Z6h7mjem0Y+iWlkYcV4PIWL1iwBi8saCbGS5jN2p8M+X+Q7UNKEkROb3N6\nKOqkqm57TH2H3eDJAkSnh6/DNFu0Qg==\n-----END CERTIFICATE-----",
                }
            )
      security:
        - bearer_auth:
            - certificate:create
  /v2/certificates/{certificate_id}:
    get:
      operationId: certificates_get
      summary: Retrieve an Existing Certificate
      description: >-
        To show information about an existing certificate, send a GET request to
        `/v2/certificates/$CERTIFICATE_ID`.
      tags:
        - Certificates
      parameters:
        - $ref: '#/components/parameters/certificate_id'
      responses:
        '200':
          $ref: '#/components/responses/existing_certificate'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/certificates/892071a0-bb95-49bc-8021-3afd67a210bf"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                cert, _, err := client.Certificates.Get(ctx, "892071a0-bb95-49bc-8021-3afd67a210bf")
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.certificates.find(id: '892071a0-bb95-49bc-8021-3afd67a210bf')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            get_resp = client.certificates.get(
                certificate_id="892071a0-bb95-49bc-8021-3afd67a210bf"
            )
      security:
        - bearer_auth:
            - certificate:read
    delete:
      operationId: certificates_delete
      summary: Delete a Certificate
      description: |
        To delete a specific certificate, send a DELETE request to
        `/v2/certificates/$CERTIFICATE_ID`.
      tags:
        - Certificates
      parameters:
        - $ref: '#/components/parameters/certificate_id'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/certificates/892071a0-bb95-49bc-8021-3afd67a210bf"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.Certificates.Delete(ctx, "892071a0-bb95-49bc-8021-3afd67a210bf")
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            client.certificates.delete(id:
            '892071a0-bb95-49bc-8021-3afd67a210bf')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            del_resp = client.certificates.delete(
                certificate_id="892071a0-bb95-49bc-8021-3afd67a210bf"
            )
      security:
        - bearer_auth:
            - certificate:delete
  /v2/domains:
    get:
      operationId: domains_list
      summary: List All Domains
      description: >-
        To retrieve a list of all of the domains in your account, send a GET
        request to `/v2/domains`.
      tags:
        - Domains
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/all_domains_response'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/domains"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                  Page:    1,
                  PerPage: 200,
                }

            domains, _, err := client.Domains.List(ctx, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            domains = client.domains.all
            domains.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.domains.list()
      security:
        - bearer_auth:
            - domain:read
    post:
      operationId: domains_create
      summary: Create a New Domain
      description: >
        To create a new domain, send a POST request to `/v2/domains`. Set the
        "name"

        attribute to the domain name you are adding. Optionally, you may set the

        "ip_address" attribute, and an A record will be automatically created
        pointing

        to the apex domain.
      tags:
        - Domains
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domain'
            example:
              name: example.com
      responses:
        '201':
          $ref: '#/components/responses/create_domain_response'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"example.com","ip_address":"1.2.3.4"}' \
              "https://api.digitalocean.com/v2/domains"
        - lang: Go
          source: |-
            import (
              "context"
              "os"

              "github.com/digitalocean/godo"
              )

            func main() {
              token := os.Getenv("DIGITALOCEAN_TOKEN")

              client := godo.NewFromToken(token)
              ctx := context.TODO()

              createRequest := &godo.DomainCreateRequest{
                Name:      "example.com",
                IPAddress: "1.2.3.4",
              }

              domain, _, err := client.Domains.Create(ctx, createRequest)

            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            domain = DropletKit::Domain.new(
              name: 'example.com',
              ip_address: '1.2.3.4'
            )
            client.domains.create(domain)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "example.com"
            }

            resp = client.domains.create(body=req)
      security:
        - bearer_auth:
            - domain:create
  /v2/domains/{domain_name}:
    get:
      operationId: domains_get
      summary: Retrieve an Existing Domain
      description: >-
        To get details about a specific domain, send a GET request to
        `/v2/domains/$DOMAIN_NAME`.
      tags:
        - Domains
      parameters:
        - $ref: '#/components/parameters/domain_name'
      responses:
        '200':
          $ref: '#/components/responses/existing_domain'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/domains/example.com"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                domain, _, err := client.Domains.Get(ctx, "example.com")
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.domains.find(name: 'example.com')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.domains.get(domain_name="example.com")
      security:
        - bearer_auth:
            - domain:read
    delete:
      operationId: domains_delete
      summary: Delete a Domain
      description: |
        To delete a domain, send a DELETE request to `/v2/domains/$DOMAIN_NAME`.
      tags:
        - Domains
      parameters:
        - $ref: '#/components/parameters/domain_name'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/domains/example.com"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.Domains.Delete(ctx, "example.com")
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.domains.delete(name: 'example.com')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            delete_resp = client.domains.delete(domain_name="example.com")
      security:
        - bearer_auth:
            - domain:delete
  /v2/domains/{domain_name}/records:
    get:
      operationId: domains_list_records
      summary: List All Domain Records
      description: >+
        To get a listing of all records configured for a domain, send a GET
        request to `/v2/domains/$DOMAIN_NAME/records`.

        The list of records returned can be filtered by using the `name` and
        `type` query parameters. For example, to only include A records for a
        domain, send a GET request to `/v2/domains/$DOMAIN_NAME/records?type=A`.
        `name` must be a fully qualified record name. For example, to only
        include records matching `sub.example.com`, send a GET request to
        `/v2/domains/$DOMAIN_NAME/records?name=sub.example.com`. Both name and
        type may be used together.

      tags:
        - Domain Records
      parameters:
        - $ref: '#/components/parameters/domain_name'
        - $ref: '#/components/parameters/domain_name_query'
        - $ref: '#/components/parameters/domain_type_query'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/all_domain_records_response'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/domains/example.com/records"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                  Page:    1,
                  PerPage: 200,
                }

            domains, _, err := client.Domains.List(ctx, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            records = client.domain_records.all(for_domain: 'example.com')
            records.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.domains.list_records(domain_name="example.com")
      security:
        - bearer_auth:
            - domain:read
    post:
      operationId: domains_create_record
      summary: Create a New Domain Record
      description: >
        To create a new record to a domain, send a POST request to

        `/v2/domains/$DOMAIN_NAME/records`.


        The request must include all of the required fields for the domain
        record type

        being added.


        See the [attribute table](#tag/Domain-Records) for details regarding
        record

        types and their respective required attributes.
      tags:
        - Domain Records
      parameters:
        - $ref: '#/components/parameters/domain_name'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/domain_record_a'
                - $ref: '#/components/schemas/domain_record_aaaa'
                - $ref: '#/components/schemas/domain_record_caa'
                - $ref: '#/components/schemas/domain_record_cname'
                - $ref: '#/components/schemas/domain_record_mx'
                - $ref: '#/components/schemas/domain_record_ns'
                - $ref: '#/components/schemas/domain_record_soa'
                - $ref: '#/components/schemas/domain_record_srv'
                - $ref: '#/components/schemas/domain_record_txt'
              discriminator:
                propertyName: type
                mapping:
                  A: '#/components/schemas/domain_record_a'
                  AAAA: '#/components/schemas/domain_record_aaaa'
                  CAA: '#/components/schemas/domain_record_caa'
                  CNAME: '#/components/schemas/domain_record_cname'
                  MX: '#/components/schemas/domain_record_mx'
                  NS: '#/components/schemas/domain_record_ns'
                  SOA: '#/components/schemas/domain_record_soa'
                  SRV: '#/components/schemas/domain_record_srv'
                  TXT: '#/components/schemas/domain_record_txt'
            example:
              type: A
              name: www
              data: 162.10.66.0
              priority: null
              port: null
              ttl: 1800
              weight: null
              flags: null
              tag: null
      responses:
        '201':
          $ref: '#/components/responses/created_domain_record'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"A","name":"www","data":"162.10.66.0","priority":null,"port":null,"ttl":1800,"weight":null,"flags":null,"tag":null}' \
              "https://api.digitalocean.com/v2/domains/example.com/records"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                createRequest := &godo.DomainRecordEditRequest{
                  Type: "A",
                  Name: "www",
                  Data: "1.2.3.4",
                }

                domainRecord, _, err := client.Domains.CreateRecord(ctx, "example.com", createRequest)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            record = DropletKit::DomainRecord.new(
              type: 'A',
              name: 'www',
              data: '162.10.66.0'
            )
            client.domain_records.create(record, for_domain: 'example.com')
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            req = {
              "type": "A",
              "name": "www",
              "data": "162.10.66.0",
              "priority": None,
              "port": None,
              "ttl": 1800,
              "weight": None,
              "flags": None,
              "tag": None
            }


            resp = client.domains.create_record(domain_name="example.com",
            body=req)
      security:
        - bearer_auth:
            - domain:create
  /v2/domains/{domain_name}/records/{domain_record_id}:
    get:
      operationId: domains_get_record
      summary: Retrieve an Existing Domain Record
      description: >-
        To retrieve a specific domain record, send a GET request to
        `/v2/domains/$DOMAIN_NAME/records/$RECORD_ID`.
      tags:
        - Domain Records
      parameters:
        - $ref: '#/components/parameters/domain_name'
        - $ref: '#/components/parameters/domain_record_id'
      responses:
        '200':
          $ref: '#/components/responses/domain_record'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/domains/example.com/records/3352896"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                record, _, err := client.Domains.Record(ctx, "example.com", 3352896)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.domain_records.find(for_domain: 'example.com', id: 3352896)
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            get_resp = client.domains.get_record(domain_name="example.com",
            domain_record_id=3352896)
      security:
        - bearer_auth:
            - domain:read
    patch:
      operationId: domains_patch_record
      summary: Update a Domain Record
      description: >
        To update an existing record, send a PATCH request to

        `/v2/domains/$DOMAIN_NAME/records/$DOMAIN_RECORD_ID`. Any attribute
        valid for

        the record type can be set to a new value for the record.


        See the [attribute table](#tag/Domain-Records) for details regarding
        record

        types and their respective attributes.
      tags:
        - Domain Records
      parameters:
        - $ref: '#/components/parameters/domain_name'
        - $ref: '#/components/parameters/domain_record_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domain_record'
            example:
              name: blog
              type: A
      responses:
        '200':
          $ref: '#/components/responses/domain_record'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PATCH \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"blog","type":"A"}' \
              "https://api.digitalocean.com/v2/domains/example.com/records/3352896"
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            req = {
              "name": "blog",
              "type": "A"
            }


            resp = client.domains.patch_record(domain_name="example.com",
            domain_record_id=2432342, body=req)
      security:
        - bearer_auth:
            - domain:update
    put:
      operationId: domains_update_record
      summary: Update a Domain Record
      description: >
        To update an existing record, send a PUT request to

        `/v2/domains/$DOMAIN_NAME/records/$DOMAIN_RECORD_ID`. Any attribute
        valid for

        the record type can be set to a new value for the record.


        See the [attribute table](#tag/Domain-Records) for details regarding
        record

        types and their respective attributes.
      tags:
        - Domain Records
      parameters:
        - $ref: '#/components/parameters/domain_name'
        - $ref: '#/components/parameters/domain_record_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domain_record'
            example:
              name: blog
              type: CNAME
      responses:
        '200':
          $ref: '#/components/responses/domain_record'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PUT \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"blog"}' \
              "https://api.digitalocean.com/v2/domains/example.com/records/3352896"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                editRequest := &godo.DomainRecordEditRequest{
                  Type: "A",
                  Name: "blog",
                }

                domainRecord, _, err := client.Domains.EditRecord(ctx, "example.com", 3352896, editRequest)
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            record = DropletKit::DomainRecord.new(name: 'blog')

            client.domain_records.update(record, for_domain: 'example.com', id:
            3352896)
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            req = {
              "name": "blog",
              "type": "CNAME"
            }


            resp = client.domains.update_record(domain_name="example.com",
            domain_record_id=2432342, body=req)
      security:
        - bearer_auth:
            - domain:update
    delete:
      operationId: domains_delete_record
      summary: Delete a Domain Record
      description: |
        To delete a record for a domain, send a DELETE request to
        `/v2/domains/$DOMAIN_NAME/records/$DOMAIN_RECORD_ID`.

        The record will be deleted and the response status will be a 204. This
        indicates a successful request with no body returned.
      tags:
        - Domain Records
      parameters:
        - $ref: '#/components/parameters/domain_name'
        - $ref: '#/components/parameters/domain_record_id'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/domains/example.com/records/3352896"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.Domains.DeleteRecord(ctx, "example.com", 3352896)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.domain_records.delete(for_domain: 'example.com', id: 3352896)
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            req = {
              "name": "example.com"
            }


            resp = client.domains.delete_record(domain_name="example.com",
            domain_record_id=3352896)
      security:
        - bearer_auth:
            - domain:delete
  /v2/droplets:
    get:
      operationId: droplets_list
      summary: List All Droplets
      description: >
        To list all Droplets in your account, send a GET request to
        `/v2/droplets`.


        The response body will be a JSON object with a key of `droplets`. This
        will be

        set to an array containing objects each representing a Droplet. These
        will

        contain the standard Droplet attributes.


        ### Filtering Results by Tag


        It's possible to request filtered results by including certain query
        parameters.

        To only list Droplets assigned to a specific tag, include the `tag_name`
        query

        parameter set to the name of the tag in your GET request. For example,

        `/v2/droplets?tag_name=$TAG_NAME`.


        ### GPU Droplets


        By default, only non-GPU Droplets are returned. To list only GPU
        Droplets, set

        the `type` query parameter to `gpus`. For example,
        `/v2/droplets?type=gpus`.
      tags:
        - Droplets
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/droplet_tag_name'
        - $ref: '#/components/parameters/droplet_name'
        - $ref: '#/components/parameters/droplet_type'
      responses:
        '200':
          $ref: '#/components/responses/all_droplets'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets?page=1&per_page=1"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                droplets, _, err := client.Droplets.List(ctx, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            droplets = client.droplets.all
            droplets.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.droplets.list()
      security:
        - bearer_auth:
            - droplet:read
    post:
      operationId: droplets_create
      summary: Create a New Droplet
      description: >
        To create a new Droplet, send a POST request to `/v2/droplets` setting
        the

        required attributes.


        A Droplet will be created using the provided information. The response
        body

        will contain a JSON object with a key called `droplet`. The value will
        be an

        object containing the standard attributes for your new Droplet. The
        response

        code, 202 Accepted, does not indicate the success or failure of the
        operation,

        just that the request has been accepted for processing. The `actions`
        returned

        as part of the response's `links` object can be used to check the status

        of the Droplet create event.


        ### Create Multiple Droplets


        Creating multiple Droplets is very similar to creating a single Droplet.

        Instead of sending `name` as a string, send `names` as an array of
        strings. A

        Droplet will be created for each name you send using the associated

        information. Up to ten Droplets may be created this way at a time.


        Rather than returning a single Droplet, the response body will contain a
        JSON

        array with a key called `droplets`. This will be set to an array of JSON

        objects, each of which will contain the standard Droplet attributes. The

        response code, 202 Accepted, does not indicate the success or failure of
        any

        operation, just that the request has been accepted for processing. The
        array

        of `actions` returned as part of the response's `links` object can be
        used to

        check the status of each individual Droplet create event.
      tags:
        - Droplets
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/droplet_single_create'
                - $ref: '#/components/schemas/droplet_multi_create'
            examples:
              Single Droplet Create Request:
                $ref: '#/components/examples/droplet_create_request'
              Multiple Droplet Create Request:
                $ref: '#/components/examples/droplet_multi_create_request'
      responses:
        '202':
          $ref: '#/components/responses/droplet_create'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"example.com","region":"nyc3","size":"s-1vcpu-1gb","image":"ubuntu-20-04-x64","ssh_keys":[289794,"3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45"],"backups":true,"ipv6":true,"monitoring":true,"tags":["env:prod","web"],"user_data":"#cloud-config\nruncmd:\n  - touch /test.txt\n","vpc_uuid":"760e09ef-dc84-11e8-981e-3cfdfeaae000"}' \
              "https://api.digitalocean.com/v2/droplets"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                createRequest := &godo.DropletCreateRequest{
                    Name:   "example.com",
                    Region: "nyc3",
                    Size:   "s-1vcpu-1gb",
                    Image: godo.DropletCreateImage{
                        Slug: "ubuntu-20-04-x64",
                    },
                    SSHKeys: []godo.DropletCreateSSHKey{
                        godo.DropletCreateSSHKey{ID: 289794},
                        godo.DropletCreateSSHKey{Fingerprint: "3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45"}
                    },
                    Backups: true,
                    IPv6: true,
                    Monitoring: true,
                    Tags: []string{"env:prod","web"},
                    UserData: "#cloud-config\nruncmd:\n  - touch /test.txt\n",
                    VPCUUID: "760e09ef-dc84-11e8-981e-3cfdfeaae000",
                }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            droplet = DropletKit::Droplet.new(
              name: 'example.com',
              region: 'nyc3',
              size: 's-1vcpu-1gb',
              image: 'ubuntu-20-04-x64',
              ssh_keys: [289794,"3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45"],
              backups: true,
              ipv6: true,
              monitoring: true,
              tags: ["env:prod","web"],
              user_data: "#cloud-config\nruncmd:\n  - touch /test.txt\n",
              vpc_uuid: "760e09ef-dc84-11e8-981e-3cfdfeaae000",
            )
            client.droplets.create(droplet)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "example.com",
              "region": "nyc3",
              "size": "s-1vcpu-1gb",
              "image": "ubuntu-20-04-x64",
              "ssh_keys": [
                289794,
                "3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45"
              ],
              "backups": True,
              "ipv6": True,
              "monitoring": True,
              "tags": [
                "env:prod",
                "web"
              ],
              "user_data": "#cloud-config\nruncmd:\n  - touch /test.txt\n",
              "vpc_uuid": "760e09ef-dc84-11e8-981e-3cfdfeaae000"
            }

            resp = client.droplets.create(body=req)
      security:
        - bearer_auth:
            - droplet:create
    delete:
      operationId: droplets_destroy_byTag
      summary: Deleting Droplets by Tag
      description: >
        To delete **all** Droplets assigned to a specific tag, include the
        `tag_name`

        query parameter set to the name of the tag in your DELETE request. For

        example, `/v2/droplets?tag_name=$TAG_NAME`.


        This endpoint requires `tag:read` scope.


        A successful request will receive a 204 status code with no body in
        response.

        This indicates that the request was processed successfully.
      tags:
        - Droplets
      parameters:
        - $ref: '#/components/parameters/droplet_delete_tag_name'
      responses:
        '204':
          $ref: '#/components/responses/no_content_with_content_type'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets?tag_name=awesome"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                client.Droplets.DeleteByTag(ctx, "awesome") 
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.droplets.delete_for_tag(tag_name: awesome)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.droplets.destroy_by_tag(tag_name="production")
      security:
        - bearer_auth:
            - droplet:delete
  /v2/droplets/{droplet_id}:
    get:
      operationId: droplets_get
      summary: Retrieve an Existing Droplet
      description: |
        To show information about an individual Droplet, send a GET request to
        `/v2/droplets/$DROPLET_ID`.
      tags:
        - Droplets
      parameters:
        - $ref: '#/components/parameters/droplet_id'
      responses:
        '200':
          $ref: '#/components/responses/existing_droplet'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/3164494"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                droplet, _, err := client.Droplets.Get(ctx, 3164494)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.droplets.find(id: 3164494)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.droplets.get(droplet_id=594828)
      security:
        - bearer_auth:
            - droplet:read
    delete:
      operationId: droplets_destroy
      summary: Delete an Existing Droplet
      description: >
        To delete a Droplet, send a DELETE request to
        `/v2/droplets/$DROPLET_ID`.


        A successful request will receive a 204 status code with no body in
        response.

        This indicates that the request was processed successfully.
      tags:
        - Droplets
      parameters:
        - $ref: '#/components/parameters/droplet_id'
      responses:
        '204':
          $ref: '#/components/responses/no_content_with_content_type'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/3164494"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.Droplets.Delete(ctx, 3164494)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.droplets.delete(id: 3164494)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.droplets.destroy(droplet_id=553456)
      security:
        - bearer_auth:
            - droplet:delete
  /v2/droplets/{droplet_id}/backups:
    get:
      operationId: droplets_list_backups
      summary: List Backups for a Droplet
      description: >
        To retrieve any backups associated with a Droplet, send a GET request to

        `/v2/droplets/$DROPLET_ID/backups`.


        You will get back a JSON object that has a `backups` key. This will be
        set to

        an array of backup objects, each of which contain the standard

        Droplet backup attributes.
      tags:
        - Droplets
      parameters:
        - $ref: '#/components/parameters/droplet_id'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/all_droplet_backups'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/3067509/backups"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                backups, _, err := client.Droplets.Backups(ctx, 3164494, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            backups = client.droplets.backups(id: 3164494)
            backups.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.droplets.list_backups(droplet_id=594828)
      security:
        - bearer_auth:
            - droplet:read
  /v2/droplets/{droplet_id}/backups/policy:
    get:
      operationId: droplets_get_backup_policy
      summary: Retrieve the Backup Policy for an Existing Droplet
      description: >
        To show information about an individual Droplet's backup policy, send a
        GET

        request to `/v2/droplets/$DROPLET_ID/backups/policy`.
      tags:
        - Droplets
      parameters:
        - $ref: '#/components/parameters/droplet_id'
      responses:
        '200':
          $ref: '#/components/responses/droplet_backup_policy'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/3164494/backups/policy"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                droplet, _, err := client.Droplets.GetBackupPolicy(ctx, 444909706)
            }
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.droplets.get_backup_policy(droplet_id=444909706)
      security:
        - bearer_auth:
            - droplet:read
  /v2/droplets/backups/policies:
    get:
      operationId: droplets_list_backup_policies
      summary: List Backup Policies for All Existing Droplets
      description: >
        To list information about the backup policies for all Droplets in the
        account,

        send a GET request to `/v2/droplets/backups/policies`.
      tags:
        - Droplets
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/all_droplet_backup_policies'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/backups/policies"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                droplet, _, err := client.Droplets.ListBackupPolicies(ctx)
            }
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.droplets.list_backup_policies()
      security:
        - bearer_auth:
            - droplet:read
  /v2/droplets/backups/supported_policies:
    get:
      operationId: droplets_list_supported_backup_policies
      summary: List Supported Droplet Backup Policies
      description: |
        To retrieve a list of all supported Droplet backup policies, send a GET
        request to `/v2/droplets/backups/supported_policies`.
      tags:
        - Droplets
      responses:
        '200':
          $ref: '#/components/responses/droplets_supported_backup_policies'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/backups/supported_policies"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                droplet, _, err := client.Droplets.ListSupportedBackupPolicies(ctx)
            }
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.droplets.list_supported_backup_policies()
      security:
        - bearer_auth:
            - droplet:read
  /v2/droplets/{droplet_id}/snapshots:
    get:
      operationId: droplets_list_snapshots
      summary: List Snapshots for a Droplet
      description: >
        To retrieve the snapshots that have been created from a Droplet, send a
        GET

        request to `/v2/droplets/$DROPLET_ID/snapshots`.


        You will get back a JSON object that has a `snapshots` key. This will be
        set

        to an array of snapshot objects, each of which contain the standard
        Droplet

        snapshot attributes.
      tags:
        - Droplets
      parameters:
        - $ref: '#/components/parameters/droplet_id'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/all_droplet_snapshots'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/3164494/snapshots?page=1&per_page=1"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                snapshots, _, err := client.Droplets.Snapshots(ctx, 3164494, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            snapshots = client.droplets.snapshots(id: 3164494)
            snapshots.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.droplets.list_snapshots(droplet_id=3929391)
      security:
        - bearer_auth:
            - droplet:read
  /v2/droplets/{droplet_id}/actions:
    get:
      operationId: dropletActions_list
      summary: List Actions for a Droplet
      description: >
        To retrieve a list of all actions that have been executed for a Droplet,
        send

        a GET request to `/v2/droplets/$DROPLET_ID/actions`.


        The results will be returned as a JSON object with an `actions` key.
        This will

        be set to an array filled with `action` objects containing the standard

        `action` attributes.
      tags:
        - Droplet Actions
      parameters:
        - $ref: '#/components/parameters/droplet_id'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/all_droplet_actions'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/3164494/actions?page=1&per_page=1"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                actions, _, err := client.Droplets.Actions(ctx, 3164494, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            actions = client.droplets.actions(id: 3164494)
            actions.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "blog",
              "type": "CNAME"
            }

            resp = client.droplet_actions.list(droplet_id=3164494)
      security:
        - bearer_auth:
            - droplet:read
    post:
      operationId: dropletActions_post
      summary: Initiate a Droplet Action
      description: >
        To initiate an action on a Droplet send a POST request to

        `/v2/droplets/$DROPLET_ID/actions`. In the JSON body to the request,

        set the `type` attribute to on of the supported action types:


        | Action                                   | Details | Additionally
        Required Permission |

        | ---------------------------------------- | ----------- | ----------- |

        | <nobr>`enable_backups`</nobr>            | Enables backups for a
        Droplet | |

        | <nobr>`disable_backups`</nobr>           | Disables backups for a
        Droplet | |

        | <nobr>`change_backup_policy`</nobr>      | Update the backup policy
        for a Droplet | |

        | <nobr>`reboot`</nobr>                    | Reboots a Droplet. A
        `reboot` action is an attempt to reboot the Droplet in a graceful way,
        similar to using the `reboot` command from the console. | |

        | <nobr>`power_cycle`</nobr>               | Power cycles a Droplet. A
        `powercycle` action is similar to pushing the reset button on a physical
        machine, it's similar to booting from scratch. | |

        | <nobr>`shutdown`</nobr>                  | Shutsdown a Droplet. A
        shutdown action is an attempt to shutdown the Droplet in a graceful way,
        similar to using the `shutdown` command from the console. Since a
        `shutdown` command can fail, this action guarantees that the command is
        issued, not that it succeeds. The preferred way to turn off a Droplet is
        to attempt a shutdown, with a reasonable timeout, followed by a
        `power_off` action to ensure the Droplet is off. | |

        | <nobr>`power_off`</nobr>                 | Powers off a Droplet. A
        `power_off` event is a hard shutdown and should only be used if the
        `shutdown` action is not successful. It is similar to cutting the power
        on a server and could lead to complications. | |

        | <nobr>`power_on`</nobr>                  | Powers on a Droplet. | |

        | <nobr>`restore`</nobr>                   | Restore a Droplet using a
        backup image. The image ID that is passed in must be a backup of the
        current Droplet instance. The operation will leave any embedded SSH keys
        intact. | droplet:admin |

        | <nobr>`password_reset`</nobr>            | Resets the root password
        for a Droplet. A new password will be provided via email. It must be
        changed after first use. | droplet:admin |

        | <nobr>`resize`</nobr>                    | Resizes a Droplet. Set the
        `size` attribute to a size slug. If a permanent resize with disk changes
        included is desired, set the `disk` attribute to `true`. |
        droplet:create |

        | <nobr>`rebuild`</nobr>                   | Rebuilds a Droplet from a
        new base image. Set the `image` attribute to an image ID or slug. |
        droplet:admin |

        | <nobr>`rename`</nobr>                    | Renames a Droplet. | |

        | <nobr>`change_kernel`</nobr>             | Changes a Droplet's kernel.
        Only applies to Droplets with externally managed kernels. All Droplets
        created after March 2017 use internal kernels by default. | |

        | <nobr>`enable_ipv6`</nobr>               | Enables IPv6 for a Droplet.
        Once enabled for a Droplet, IPv6 can not be disabled. When enabling IPv6
        on an existing Droplet, [additional OS-level
        configuration](https://docs.digitalocean.com/products/networking/ipv6/how-to/enable/#on-existing-droplets)
        is required. | |

        | <nobr>`snapshot`</nobr>                  | Takes a snapshot of a
        Droplet. | image:create |
      tags:
        - Droplet Actions
      parameters:
        - $ref: '#/components/parameters/droplet_id'
      requestBody:
        description: >
          The `type` attribute set in the request body will specify the  action
          that

          will be taken on the Droplet. Some actions will require additional

          attributes to be set as well.
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/droplet_action'
                - $ref: '#/components/schemas/droplet_action_enable_backups'
                - $ref: '#/components/schemas/droplet_action_change_backup_policy'
                - $ref: '#/components/schemas/droplet_action_restore'
                - $ref: '#/components/schemas/droplet_action_resize'
                - $ref: '#/components/schemas/droplet_action_rebuild'
                - $ref: '#/components/schemas/droplet_action_rename'
                - $ref: '#/components/schemas/droplet_action_change_kernel'
                - $ref: '#/components/schemas/droplet_action_snapshot'
              discriminator:
                propertyName: type
                mapping:
                  enable_backups: '#/components/schemas/droplet_action_enable_backups'
                  disable_backups: '#/components/schemas/droplet_action'
                  change_backup_policy: '#/components/schemas/droplet_action_change_backup_policy'
                  reboot: '#/components/schemas/droplet_action'
                  power_cycle: '#/components/schemas/droplet_action'
                  shutdown: '#/components/schemas/droplet_action'
                  power_off: '#/components/schemas/droplet_action'
                  power_on: '#/components/schemas/droplet_action'
                  password_reset: '#/components/schemas/droplet_action'
                  restore: '#/components/schemas/droplet_action_restore'
                  resize: '#/components/schemas/droplet_action_resize'
                  rebuild: '#/components/schemas/droplet_action_rebuild'
                  rename: '#/components/schemas/droplet_action_rename'
                  change_kernel: '#/components/schemas/droplet_action_change_kernel'
                  enable_ipv6: '#/components/schemas/droplet_action'
                  snapshot: '#/components/schemas/droplet_action_snapshot'
      responses:
        '201':
          $ref: '#/components/responses/droplet_action'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            # Enable Backups
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"enable_backups"}' \
              "https://api.digitalocean.com/v2/droplets/3164450/actions"

            # Disable Backups
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"disable_backups"}' \
              "https://api.digitalocean.com/v2/droplets/3164450/actions"

            # Reboot a Droplet
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"reboot"}' \
              "https://api.digitalocean.com/v2/droplets/3164450/actions"

            # Power cycle a Droplet
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"power_cycle"}' \
              "https://api.digitalocean.com/v2/droplets/3164450/actions"

            # Shutdown and Droplet
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"shutdown"}' \
              "https://api.digitalocean.com/v2/droplets/3067649/actions"

            # Power off a Droplet
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"power_off"}' \
              "https://api.digitalocean.com/v2/droplets/3164450/actions"

            # Power on a Droplet
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"power_on"}' \
              "https://api.digitalocean.com/v2/droplets/3164450/actions"

            # Restore a Droplet
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"restore", "image": 12389723 }' \
              "https://api.digitalocean.com/v2/droplets/3067649/actions"

            # Password Reset a Droplet
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"password_reset"}' \
              "https://api.digitalocean.com/v2/droplets/3164450/actions"

            # Resize a Droplet
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"resize","size":"1gb"}' \
              "https://api.digitalocean.com/v2/droplets/3164450/actions"

            # Rebuild a Droplet
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"rebuild","image":"ubuntu-16-04-x64"}' \
              "https://api.digitalocean.com/v2/droplets/3164450/actions"

            # Rename a Droplet
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"rename","name":"nifty-new-name"}' \
              "https://api.digitalocean.com/v2/droplets/3164450/actions"

            # Change the Kernel
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"change_kernel","kernel":991}' \
              "https://api.digitalocean.com/v2/droplets/3164450/actions"

            # Enable IPv6
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"enable_ipv6"}' \
              "https://api.digitalocean.com/v2/droplets/3164450/actions"

            # Enable Private Networking
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"enable_private_networking"}' \
              "https://api.digitalocean.com/v2/droplets/3164450/actions"

            # Snapshot a Droplet
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"snapshot","name":"Nifty New Snapshot"}' \
              "https://api.digitalocean.com/v2/droplets/3164450/actions"

            # Acting on Tagged Droplets
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"enable_backups"}' \
              "https://api.digitalocean.com/v2/droplets/actions?tag_name=awesome"

            # Retrieve a Droplet Action
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/3164444/actions/36804807"
        - lang: Go
          source: >-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )


            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()
            // Enable Backups
                action, _, err := client.DropletActions.EnableBackups(ctx, 3164450)

            // Disable Backups

            //  action, _, err := client.DropletActions.DisableBackups(ctx,
            3164450)


            // Reboot a Droplet

            //  action, _, err := client.DropletActions.Reboot(ctx, 3164450)


            // Power Cycle a Droplet

            //  action, _, err := client.DropletActions.PowerCycle(ctx, 3164450)


            // Shutdown a Droplet

            //  action, _, err := client.DropletActions.Shutdown(ctx, 3067649)


            // Power Off a Droplet

            //  action, _, err := client.DropletActions.PowerOff(ctx, 3164450)


            // Power On a Droplet

            //  action, _, err := client.DropletActions.PowerOn(ctx, 3164450)


            // Restore a Droplet

            //  action, _, err := client.DropletActions.Restore(ctx, 3164449,
            12389723)


            // Password Reset a Droplet

            //  action, _, err := client.DropletActions.PasswordReset(ctx,
            3164450)


            // Resize a Droplet

            //  action, _, err := client.DropletActions.Resize(ctx, 3164450,
            "1gb", true)


            // Rebuild a Droplet

            //  action, _, err := client.DropletActions.RebuildByImageSlug(ctx,
            3164450, "ubuntu-16-04-x64")


            // Rename a Droplet

            //  action, _, err := client.DropletActions.Rename(ctx, 3164450,
            "nifty-new-name")


            // Change the Kernel

            //  action, _, err := client.DropletActions.ChangeKernel(ctx,
            3164450, 991)


            // Enable IPv6

            //  action, _, err := client.DropletActions.EnableIPv6(ctx, 3164450)


            // Enable Private Networking

            //  action, _, err :=
            client.DropletActions.EnablePrivateNetworking(ctx, 3164450)


            // Snapshot a Droplet

            //  action, _, err := client.DropletActions.Snapshot(ctx, 3164450,
            "Nifty New Snapshot")


            // Retrieve a Droplet Action

            //  action, _, err := client.DropletActions.Get(ctx, 3164450,
            36804807)


            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            # Enable Backups

            client.droplet_actions.enable_backups(droplet_id: 3164450)


            # Disable Backups

            # client.droplet_actions.disable_backups(droplet_id: 3164450)


            # Reboot a Droplet

            # client.droplet_actions.reboot(droplet_id: 3164450)


            # Power Cycle a Droplet

            # client.droplet_actions.power_cycle(droplet_id: 3164450)


            # Shutdown a Droplet

            # client.droplet_actions.shutdown(droplet_id: 3067649)


            # Power Off a Droplet

            # client.droplet_actions.power_off(droplet_id: 3164450)


            # Power On a Droplet

            # client.droplet_actions.power_on(droplet_id: 3164450)


            # Restore a Droplet

            # client.droplet_actions.restore(droplet_id: 3067649, image:
            12389723)


            # Password Reset a Droplet

            # client.droplet_actions.password_reset(droplet_id: 3164450)


            # Resize a Droplet

            # client.droplet_actions.resize(droplet_id: 3164450, size: '1gb')


            # Rebuild a Droplet

            # client.droplet_actions.rebuild(droplet_id: 3164450, image:
            'ubuntu-16-04-x64')


            # Rename a Droplet

            # client.droplet_actions.rename(droplet_id: 3164450, name:
            'nifty-new-name')


            # Change the Kernel

            # client.droplet_actions.change_kernel(droplet_id: 3164450, kernel:
            991)


            # Enable IPv6

            # client.droplet_actions.enable_ipv6(droplet_id: 3164450)


            # Enable Private Networking

            # client.droplet_actions.enable_private_networking(droplet_id:
            3164450)


            # Snapshot a Droplet

            # client.droplet_actions.snapshot(droplet_id: 3164450, name: 'Nifty
            New Snapshot')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            # enable back ups example
            req = {
              "type": "enable_backups"
            }

            resp = client.droplet_actions.post(droplet_id=346652, body=req)
      security:
        - bearer_auth:
            - droplet:update
  /v2/droplets/actions:
    post:
      operationId: dropletActions_post_byTag
      summary: Acting on Tagged Droplets
      description: >
        Some actions can be performed in bulk on tagged Droplets. The actions
        can be

        initiated by sending a POST to `/v2/droplets/actions?tag_name=$TAG_NAME`
        with

        the action arguments.


        Only a sub-set of action types are supported:


        - `power_cycle`

        - `power_on`

        - `power_off`

        - `shutdown`

        - `enable_ipv6`

        - `enable_backups`

        - `disable_backups`

        - `snapshot` (also requires `image:create` permission)
      tags:
        - Droplet Actions
      parameters:
        - $ref: '#/components/parameters/droplet_tag_name'
      requestBody:
        description: >
          The `type` attribute set in the request body will specify the action
          that

          will be taken on the Droplet. Some actions will require additional

          attributes to be set as well.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/droplet_action'
                - $ref: '#/components/schemas/droplet_action_snapshot'
              discriminator:
                propertyName: type
                mapping:
                  enable_backups: '#/components/schemas/droplet_action'
                  disable_backups: '#/components/schemas/droplet_action'
                  power_cycle: '#/components/schemas/droplet_action'
                  shutdown: '#/components/schemas/droplet_action'
                  power_off: '#/components/schemas/droplet_action'
                  power_on: '#/components/schemas/droplet_action'
                  enable_ipv6: '#/components/schemas/droplet_action'
                  snapshot: '#/components/schemas/droplet_action_snapshot'
      responses:
        '201':
          $ref: '#/components/responses/droplet_actions_response'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"enable_backups"}' \
              "https://api.digitalocean.com/v2/droplets/actions?tag_name=awesome"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                action, _, err := client.DropletActions.PowerOffByTag(ctx, "awesome")
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.droplet_actions.power_off_for_tag(tag: 'awesome')
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            req = {

            "type": "enable_backups"

            }


            resp =
            client.droplet_actions.post_by_tag(tag_name="production",body=req)
      security:
        - bearer_auth:
            - droplet:update
  /v2/droplets/{droplet_id}/actions/{action_id}:
    get:
      operationId: dropletActions_get
      summary: Retrieve a Droplet Action
      description: >
        To retrieve a Droplet action, send a GET request to

        `/v2/droplets/$DROPLET_ID/actions/$ACTION_ID`.


        The response will be a JSON object with a key called `action`. The value
        will

        be a Droplet action object.
      tags:
        - Droplet Actions
      parameters:
        - $ref: '#/components/parameters/droplet_id'
        - $ref: '#/components/parameters/action_id'
      responses:
        '200':
          $ref: '#/components/responses/action'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/3164444/actions/36804807"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                action, _, err := client.DropletActions.Get(ctx, 3164450, 36804807)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.droplet_actions.find(droplet_id: 3164444, id: 36804807)
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            resp = client.droplet_actions.get(droplet_id=3934132,
            action_id=2432342)
      security:
        - bearer_auth:
            - droplet:read
  /v2/droplets/{droplet_id}/kernels:
    get:
      operationId: droplets_list_kernels
      summary: List All Available Kernels for a Droplet
      description: >
        To retrieve a list of all kernels available to a Droplet, send a GET
        request

        to `/v2/droplets/$DROPLET_ID/kernels`


        The response will be a JSON object that has a key called `kernels`. This
        will

        be set to an array of `kernel` objects, each of which contain the
        standard

        `kernel` attributes.
      tags:
        - Droplets
      parameters:
        - $ref: '#/components/parameters/droplet_id'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/all_kernels'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/3164494/kernels?page=1&per_page=1"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                kernels, _, err := client.Droplets.Kernels(ctx, 3164494, opt) 
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            kernels = client.droplets.kernels(id: 3164494)
            kernels.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.droplets.list_kernels(droplet_id=594828)
      security:
        - bearer_auth:
            - droplet:read
  /v2/droplets/{droplet_id}/firewalls:
    get:
      operationId: droplets_list_firewalls
      summary: List all Firewalls Applied to a Droplet
      description: >
        To retrieve a list of all firewalls available to a Droplet, send a GET
        request

        to `/v2/droplets/$DROPLET_ID/firewalls`


        The response will be a JSON object that has a key called `firewalls`.
        This will

        be set to an array of `firewall` objects, each of which contain the
        standard

        `firewall` attributes.
      tags:
        - Droplets
      parameters:
        - $ref: '#/components/parameters/droplet_id'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/all_firewalls'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      security:
        - bearer_auth:
            - firewall:read
  /v2/droplets/{droplet_id}/neighbors:
    get:
      operationId: droplets_list_neighbors
      summary: List Neighbors for a Droplet
      description: >
        To retrieve a list of any "neighbors" (i.e. Droplets that are co-located
        on

        the same physical hardware) for a specific Droplet, send a GET request
        to

        `/v2/droplets/$DROPLET_ID/neighbors`.


        The results will be returned as a JSON object with a key of `droplets`.
        This

        will be set to an array containing objects representing any other
        Droplets

        that share the same physical hardware. An empty array indicates that the

        Droplet is not co-located any other Droplets associated with your
        account.
      tags:
        - Droplets
      parameters:
        - $ref: '#/components/parameters/droplet_id'
      responses:
        '200':
          $ref: '#/components/responses/neighbor_droplets'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/3164494/neighbors"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.droplets.list_neighbors(droplet_id=594828)
      security:
        - bearer_auth:
            - droplet:read
  /v2/droplets/{droplet_id}/destroy_with_associated_resources:
    get:
      operationId: droplets_list_associatedResources
      summary: List Associated Resources for a Droplet
      description: >
        To list the associated billable resources that can be destroyed along
        with a

        Droplet, send a GET request to the

        `/v2/droplets/$DROPLET_ID/destroy_with_associated_resources` endpoint.


        This endpoint will only return resources that you are authorized to see.
        For

        example, to see associated Reserved IPs, include the `reserved_ip:read`
        scope.


        The response will be a JSON object containing `snapshots`, `volumes`,
        and

        `volume_snapshots` keys. Each will be set to an array of objects
        containing

        information about the associated resources.
      tags:
        - Droplets
      parameters:
        - $ref: '#/components/parameters/droplet_id'
      responses:
        '200':
          $ref: '#/components/responses/associated_resources_list'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/3164494/destroy_with_associated_resources"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.droplets.list_associated_resources(droplet_id=594828)
      security:
        - bearer_auth:
            - droplet:delete
  /v2/droplets/{droplet_id}/destroy_with_associated_resources/selective:
    delete:
      operationId: droplets_destroy_withAssociatedResourcesSelective
      summary: Selectively Destroy a Droplet and its Associated Resources
      description: >
        To destroy a Droplet along with a sub-set of its associated resources,
        send a

        DELETE request to the
        `/v2/droplets/$DROPLET_ID/destroy_with_associated_resources/selective`

        endpoint. The JSON body of the request should include `reserved_ips`,
        `snapshots`, `volumes`,

        or `volume_snapshots` keys each set to an array of IDs for the
        associated

        resources to be destroyed. The IDs can be found by querying the
        Droplet's

        associated resources. Any associated resource not included in the
        request

        will remain and continue to accrue changes on your account.


        A successful response will include a 202 response code and no content.
        Use

        the status endpoint to check on the success or failure of the
        destruction of

        the individual resources.
      tags:
        - Droplets
      parameters:
        - $ref: '#/components/parameters/droplet_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/selective_destroy_associated_resource'
      responses:
        '202':
          $ref: '#/components/responses/accepted'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"reserved_ips":["6186916"],"snapshots": ["61486916"],"volumes": ["ba49449a-7435-11ea-b89e-0a58ac14480f"],"volume_snapshots": ["edb0478d-7436-11ea-86e6-0a58ac144b91"]}' \
              "https://api.digitalocean.com/v2/droplets/187000742/destroy_with_associated_resources/selective"
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            resp =
            client.droplets.destroy_with_associated_resources_selective(droplet_id=524512)
      security:
        - bearer_auth:
            - droplet:delete
  /v2/droplets/{droplet_id}/destroy_with_associated_resources/dangerous:
    delete:
      operationId: droplets_destroy_withAssociatedResourcesDangerous
      summary: Destroy a Droplet and All of its Associated Resources (Dangerous)
      description: >
        To destroy a Droplet along with all of its associated resources, send a
        DELETE

        request to the
        `/v2/droplets/$DROPLET_ID/destroy_with_associated_resources/dangerous`

        endpoint. The headers of this request must include an `X-Dangerous` key
        set to

        `true`. To preview which resources will be destroyed, first query the

        Droplet's associated resources. This operation _can not_ be reverse and
        should

        be used with caution.


        A successful response will include a 202 response code and no content.
        Use the

        status endpoint to check on the success or failure of the destruction of
        the

        individual resources.
      tags:
        - Droplets
      parameters:
        - $ref: '#/components/parameters/droplet_id'
        - $ref: '#/components/parameters/x_dangerous'
      responses:
        '202':
          $ref: '#/components/responses/accepted'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE -H "X-Dangerous: true" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/187000742/destroy_with_associated_resources/dangerous"
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            resp =
            client.droplets.destroy_with_associated_resources_dangerous(droplet_id=524512)
      security:
        - bearer_auth:
            - droplet:delete
  /v2/droplets/{droplet_id}/destroy_with_associated_resources/status:
    get:
      operationId: droplets_get_DestroyAssociatedResourcesStatus
      summary: Check Status of a Droplet Destroy with Associated Resources Request
      description: >
        To check on the status of a request to destroy a Droplet with its
        associated

        resources, send a GET request to the

        `/v2/droplets/$DROPLET_ID/destroy_with_associated_resources/status`
        endpoint.
      tags:
        - Droplets
      parameters:
        - $ref: '#/components/parameters/droplet_id'
      responses:
        '200':
          $ref: '#/components/responses/associated_resources_status'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/3164494/destroy_with_associated_resources/status"
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            resp =
            client.droplets.get_destroy_associated_resources_status(droplet_id=5624512)
      security:
        - bearer_auth:
            - droplet:delete
  /v2/droplets/{droplet_id}/destroy_with_associated_resources/retry:
    post:
      operationId: droplets_destroy_retryWithAssociatedResources
      summary: Retry a Droplet Destroy with Associated Resources Request
      description: >
        If the status of a request to destroy a Droplet with its associated
        resources

        reported any errors, it can be retried by sending a POST request to the

        `/v2/droplets/$DROPLET_ID/destroy_with_associated_resources/retry`
        endpoint.


        Only one destroy can be active at a time per Droplet. If a retry is
        issued

        while another destroy is in progress for the Droplet a 409 status code
        will

        be returned. A successful response will include a 202 response code and
        no

        content.
      tags:
        - Droplets
      parameters:
        - $ref: '#/components/parameters/droplet_id'
      responses:
        '202':
          $ref: '#/components/responses/accepted'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '409':
          $ref: '#/components/responses/conflict'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/3164494/destroy_with_associated_resources/retry"
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            resp =
            client.droplets.destroy_retry_with_associated_resources(droplet_id=524512)
      security:
        - bearer_auth:
            - droplet:delete
  /v2/droplets/autoscale:
    get:
      operationId: autoscalepools_list
      summary: List All Autoscale Pools
      description: >
        To list all autoscale pools in your team, send a GET request to
        `/v2/droplets/autoscale`.

        The response body will be a JSON object with a key of `autoscale_pools`
        containing an array of autoscale pool objects.

        These each contain the standard autoscale pool attributes.
      tags:
        - Droplet Autoscale Pools
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/autoscale_pool_name'
      responses:
        '200':
          $ref: '#/components/responses/all_autoscale_pools'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/autoscale?page=1&per_page=1"
      security:
        - bearer_auth:
            - droplet:read
    post:
      operationId: autoscalepools_create
      summary: Create a New Autoscale Pool
      description: >
        To create a new autoscale pool, send a POST request to
        `/v2/droplets/autoscale` setting the required attributes.


        The response body will contain a JSON object with a key called
        `autoscale_pool` containing the standard attributes for the new
        autoscale pool.
      tags:
        - Droplet Autoscale Pools
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/autoscale_pool_create'
            examples:
              Autoscale Create Request Dynamic Config:
                $ref: '#/components/examples/autoscale_create_request_dynamic'
              Autoscale Create Request Static Config:
                $ref: '#/components/examples/autoscale_create_request_static'
      responses:
        '202':
          $ref: '#/components/responses/autoscale_pool_create'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{
                "name": "test-autoscalergroup",
                "config": {
                  "min_instances": 1,
                  "max_instances": 5,
                  "target_cpu_utilization": 0.5,
                  "cooldown_minutes": 5
                },
                "droplet_template": {
                  "size": "c-2",
                  "region": "tor1",
                  "image": "ubuntu-20-04-x64",
                  "tags": [
                    "test-ag-01"
                  ],
                  "ssh_keys": [
                    "392594",
                    "385255"
                  ],
                  "vpc_uuid": "c472520a-831e-4770-8135-542c57a69daa",
                  "ipv6": true,
                  "user_data": "\n#cloud-config\nruncmd:\n- apt-get update\n"
                }
              }' \
              "https://api.digitalocean.com/v2/droplets/autoscale"
      security:
        - bearer_auth:
            - droplet:create
  /v2/droplets/autoscale/{autoscale_pool_id}:
    get:
      operationId: autoscalepools_get
      summary: Retrieve an Existing Autoscale Pool
      description: >
        To show information about an individual autoscale pool, send a GET
        request to

        `/v2/droplets/autoscale/$AUTOSCALE_POOL_ID`.
      tags:
        - Droplet Autoscale Pools
      parameters:
        - $ref: '#/components/parameters/autoscale_pool_id'
      responses:
        '200':
          $ref: '#/components/responses/existing_autoscale_pool'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/autoscale/880fee37-d07a-4f94-94a0-f07d9fc7bbb4"
      security:
        - bearer_auth:
            - droplet:read
    put:
      operationId: autoscalepools_update
      summary: Update Autoscale Pool
      description: >
        To update the configuration of an existing autoscale pool, send a PUT
        request to

        `/v2/droplets/autoscale/$AUTOSCALE_POOL_ID`. The request must contain a
        full representation

        of the autoscale pool including existing attributes. 
      tags:
        - Droplet Autoscale Pools
      parameters:
        - $ref: '#/components/parameters/autoscale_pool_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/autoscale_pool_create'
            examples:
              Autoscale Update Request:
                $ref: '#/components/examples/autoscale_update_request'
      responses:
        '200':
          $ref: '#/components/responses/autoscale_pool_create'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PUT \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{
                "name": "test-autoscalergroup-01",
                "config": {
                  "min_instances": 1,
                  "max_instances": 5,
                  "target_cpu_utilization": 0.5,
                  "cooldown_minutes": 10
                },
                "droplet_template": {
                  "size": "c-2",
                  "region": "tor1",
                  "image": "ubuntu-20-04-x64",
                  "tags": [
                    "test-ag-01"
                  ],
                  "ssh_keys": [
                    "372862",
                    "367582",
                    "355790"
                  ],
                  "vpc_uuid": "4637280e-3842-4661-a628-a6f0392959d3",
                  "with_droplet_agent": true,
                  "ipv6": true,
                  "user_data": "\n#cloud-config\nruncmd:\n- apt-get update\n"
                }
              }' \
              "https://api.digitalocean.com/v2/droplets/autoscale/d0067f19-c9bd-4d8c-b28b-e464fd1fb250"
      security:
        - bearer_auth:
            - droplet:create
    delete:
      operationId: autoscalepools_delete
      summary: Delete autoscale pool
      description: >
        To destroy an autoscale pool, send a DELETE request to the
        `/v2/droplets/autoscale/$AUTOSCALE_POOL_ID` endpoint.


        A successful response will include a 202 response code and no content. 
      tags:
        - Droplet Autoscale Pools
      parameters:
        - $ref: '#/components/parameters/autoscale_pool_id'
      responses:
        '202':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/autoscale/880fee37-d07a-4f94-94a0-f07d9fc7bbb4"
      security:
        - bearer_auth:
            - droplet:delete
  /v2/droplets/autoscale/{autoscale_pool_id}/dangerous:
    delete:
      operationId: autoscalepools_delete_dangerous
      summary: Delete autoscale pool and resources
      description: >
        To destroy an autoscale pool and its associated resources (Droplets),

        send a DELETE request to the
        `/v2/droplets/autoscale/$AUTOSCALE_POOL_ID/dangerous` endpoint.
      tags:
        - Droplet Autoscale Pools
      parameters:
        - $ref: '#/components/parameters/autoscale_pool_id'
        - $ref: '#/components/parameters/parameters_x_dangerous'
      responses:
        '202':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -H "X-Dangerous: true" \
              "https://api.digitalocean.com/v2/droplets/autoscale/880fee37-d07a-4f94-94a0-f07d9fc7bbb4/dangerous"
      security:
        - bearer_auth:
            - droplet:delete
  /v2/droplets/autoscale/{autoscale_pool_id}/members:
    get:
      operationId: autoscalepools_list_members
      summary: List members
      description: >
        To list the Droplets in an autoscale pool, send a GET request to
        `/v2/droplets/autoscale/$AUTOSCALE_POOL_ID/members`.


        The response body will be a JSON object with a key of `droplets`. This
        will be

        set to an array containing information about each of the Droplets in the
        autoscale pool.
      tags:
        - Droplet Autoscale Pools
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/autoscale_pool_id'
      responses:
        '200':
          $ref: '#/components/responses/all_members'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/autoscale/d0067f19-c9bd-4d8c-b28b-e464fd1fb250/members"
      security:
        - bearer_auth:
            - droplet:read
  /v2/droplets/autoscale/{autoscale_pool_id}/history:
    get:
      operationId: autoscalepools_list_history
      summary: List history events
      description: >
        To list all of the scaling history events of an autoscale pool, send a
        GET request to `/v2/droplets/autoscale/$AUTOSCALE_POOL_ID/history`.


        The response body will be a JSON object with a key of `history`. This
        will be

        set to an array containing objects each representing a history event. 
      tags:
        - Droplet Autoscale Pools
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/autoscale_pool_id'
      responses:
        '200':
          $ref: '#/components/responses/history_events'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X  GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/droplets/autoscale/07445b1b-1dc1-414d-b0a7-239ac66a9148/history"
      security:
        - bearer_auth:
            - droplet:read
  /v2/firewalls:
    get:
      operationId: firewalls_list
      summary: List All Firewalls
      description: >-
        To list all of the firewalls available on your account, send a GET
        request to `/v2/firewalls`.
      tags:
        - Firewalls
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/list_firewalls_response'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/firewalls"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                firewalls, _, err := client.Firewalls.List(ctx, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            firewalls = client.firewalls.all
            firewalls.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.firewalls.list()
      security:
        - bearer_auth:
            - firewall:read
    post:
      operationId: firewalls_create
      summary: Create a New Firewall
      description: >
        To create a new firewall, send a POST request to `/v2/firewalls`. The
        request

        must contain at least one inbound or outbound access rule.
      tags:
        - Firewalls
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/firewall'
                - required:
                    - name
                - anyOf:
                    - title: Inbound Rules
                      required:
                        - inbound_rules
                    - title: Outbound Rules
                      required:
                        - outbound_rules
            example:
              name: firewall
              inbound_rules:
                - protocol: tcp
                  ports: '80'
                  sources:
                    load_balancer_uids:
                      - 4de7ac8b-495b-4884-9a69-1050c6793cd6
                - protocol: tcp
                  ports: '22'
                  sources:
                    tags:
                      - gateway
                    addresses:
                      - 18.0.0.0/8
              outbound_rules:
                - protocol: tcp
                  ports: '80'
                  destinations:
                    addresses:
                      - 0.0.0.0/0
                      - '::/0'
              droplet_ids:
                - 8043964
      responses:
        '202':
          $ref: '#/components/responses/create_firewall_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"firewall","inbound_rules":[{"protocol":"tcp","ports":"80","sources":{"load_balancer_uids": ["4de7ac8b-495b-4884-9a69-1050c6793cd6"]}},{"protocol": "tcp","ports": "22","sources":{"tags": ["gateway"],"addresses": ["18.0.0.0/8"]}}],"outbound_rules":[{"protocol":"tcp","ports":"80","destinations":{"addresses":["0.0.0.0/0","::/0"]}}],"droplet_ids":[8043964]}' \
              "https://api.digitalocean.com/v2/firewalls"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                createRequest := &godo.FirewallRequest{
                    Name: 'firewall',
                    InboundRules: []godo.InboundRule{
                        {
                            Protocol: 'tcp',
                            PortRange: '80',
                            Sources: &godo.Sources{
                                LoadBalancerUIDs: []string{'4de7ac8b-495b-4884-9a69-1050c6793cd6'},
                            },
                        },
                        {
                            Protocol:  'tcp',
                            PortRange: '22',
                            Sources: &godo.Sources{
                                Addresses: []string{'18.0.0.0/8'},
                                Tags: []string{'gateway'},
                            },
                        },
                    },
                    OutboundRules: []godo.OutboundRule{
                        {
                            Protocol: 'tcp',
                            PortRange: '80',
                            Destinations: &godo.Destinations{
                                Addresses: []string{'0.0.0.0/0', '::/0'},
                            },
                        },
                    },
                    DropletIDs: []int{8043964},
                }

                firewall, req, err := client.Firewalls.Create(ctx, createRequest)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            firewall = DropletKit::Firewall.new(
              name: 'firewall',
              inbound_rules: [
                DropletKit::FirewallInboundRule.new(
                  protocol: 'tcp',
                  ports: '80',
                  sources: {
                    load_balancer_uids: ['4de7ac8b-495b-4884-9a69-1050c6793cd6']
                  }
                ),
                DropletKit::FirewallInboundRule.new(
                  protocol: 'tcp',
                  ports: '22',
                  sources: {
                    tags: ['gateway'],
                    addresses: ['18.0.0.0/8']
                  }
                )
              ],
              outbound_rules: [
                DropletKit::FirewallOutboundRule.new(
                  protocol: 'tcp',
                  ports: '80',
                  destinations: {
                    addresses: ['0.0.0.0/0', '::/0'],
                  }
                )
              ],
              droplet_ids: [8043964]
            )

            client.firewalls.create(firewall)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "firewall",
              "inbound_rules": [
                {
                  "protocol": "tcp",
                  "ports": "80",
                  "sources": {
                    "load_balancer_uids": [
                      "4de7ac8b-495b-4884-9a69-1050c6793cd6"
                    ]
                  }
                },
                {
                  "protocol": "tcp",
                  "ports": "22",
                  "sources": {
                    "tags": [
                      "gateway"
                    ],
                    "addresses": [
                      "18.0.0.0/8"
                    ]
                  }
                }
              ],
              "outbound_rules": [
                {
                  "protocol": "tcp",
                  "ports": "80",
                  "destinations": {
                    "addresses": [
                      "0.0.0.0/0",
                      "::/0"
                    ]
                  }
                }
              ],
              "droplet_ids": [
                8043964
              ]
            }

            resp = client.firewalls.create(body=req)
      security:
        - bearer_auth:
            - firewall:create
  /v2/firewalls/{firewall_id}:
    get:
      operationId: firewalls_get
      summary: Retrieve an Existing Firewall
      description: >-
        To show information about an existing firewall, send a GET request to
        `/v2/firewalls/$FIREWALL_ID`.
      tags:
        - Firewalls
      parameters:
        - $ref: '#/components/parameters/firewall_id'
      responses:
        '200':
          $ref: '#/components/responses/get_firewall_response'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/firewalls/bb4b2611-3d72-467b-8602-280330ecd65c"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                firewall, _, err := client.Firewalls.Get(ctx, 'bb4b2611-3d72-467b-8602-280330ecd65c')
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.firewalls.find(id: 'bb4b2611-3d72-467b-8602-280330ecd65c')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.firewalls.get(firewall_id= "as9di9d")
      security:
        - bearer_auth:
            - firewall:read
    put:
      operationId: firewalls_update
      summary: Update a Firewall
      description: >
        To update the configuration of an existing firewall, send a PUT request
        to

        `/v2/firewalls/$FIREWALL_ID`. The request should contain a full
        representation

        of the firewall including existing attributes. **Note that any
        attributes that

        are not provided will be reset to their default values.**

        <br><br>You must have read access (e.g. `droplet:read`) to all resources
        attached

        to the firewall to successfully update the firewall.
      tags:
        - Firewalls
      parameters:
        - $ref: '#/components/parameters/firewall_id'
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
              allOf:
                - $ref: '#/components/schemas/firewall'
                - anyOf:
                    - title: Inbound Rules
                      required:
                        - inbound_rules
                    - title: Outbound Rules
                      required:
                        - outbound_rules
            example:
              name: frontend-firewall
              inbound_rules:
                - protocol: tcp
                  ports: '8080'
                  sources:
                    load_balancer_uids:
                      - 4de7ac8b-495b-4884-9a69-1050c6793cd6
                - protocol: tcp
                  ports: '22'
                  sources:
                    tags:
                      - gateway
                    addresses:
                      - 18.0.0.0/8
              outbound_rules:
                - protocol: tcp
                  ports: '8080'
                  destinations:
                    addresses:
                      - 0.0.0.0/0
                      - '::/0'
              droplet_ids:
                - 8043964
              tags:
                - frontend
      responses:
        '200':
          $ref: '#/components/responses/put_firewall_response'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PUT \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"firewall","inbound_rules":[{"protocol":"tcp","ports":"8080","sources":{"load_balancer_uids": ["4de7ac8b-495b-4884-9a69-1050c6793cd6"]}},{"protocol": "tcp","ports": "22","sources":{"tags": ["gateway"],"addresses": ["18.0.0.0/8"]}}],"outbound_rules":[{"protocol":"tcp","ports":"8080","destinations":{"addresses":["0.0.0.0/0","::/0"]}}],"droplet_ids":[8043964],"tags":["frontend"]}' \
              "https://api.digitalocean.com/v2/firewalls/bb4b2611-3d72-467b-8602-280330ecd65c"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                updateRequest := &godo.FirewallRequest{
                    Name: 'firewall',
                    InboundRules: []godo.InboundRule{
                        {
                            Protocol: 'tcp',
                            PortRange: '8080',
                            Sources: &godo.Sources{
                                LoadBalancerUIDs: []string{'4de7ac8b-495b-4884-9a69-1050c6793cd6'},
                            },
                        },
                        {
                            Protocol:  'tcp',
                            PortRange: '22',
                            Sources: &godo.Sources{
                                Addresses: []string{'18.0.0.0/8'},
                                Tags: []string{'gateway'},
                            },
                        },
                    },
                    OutboundRules: []godo.OutboundRule{
                        {
                            Protocol: 'tcp',
                            PortRange: '8080',
                            Destinations: &godo.Destinations{
                                Addresses: []string{'0.0.0.0/0', '::/0'},
                            },
                        },
                    },
                    DropletIDs: []int{8043964},
                    Tags: []string{'frontend'}
                }

                firewall, req, err := client.Firewalls.Create(ctx, 'bb4b2611-3d72-467b-8602-280330ecd65c', updateRequest)
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            firewall = DropletKit::Firewall.new(
              name: 'firewall',
              inbound_rules: [
                DropletKit::FirewallInboundRule.new(
                  protocol: 'tcp',
                  ports: '8080',
                  sources: {
                    load_balancer_uids: ['4de7ac8b-495b-4884-9a69-1050c6793cd6']
                  }
                ),
                DropletKit::FirewallInboundRule.new(
                  protocol: 'tcp',
                  ports: '22',
                  sources: {
                    tags: ['gateway'],
                    addresses: ['18.0.0.0/8']
                  }
                )
              ],
              outbound_rules: [
                DropletKit::FirewallOutboundRule.new(
                  protocol: 'tcp',
                  ports: '8080',
                  destinations: {
                    addresses: ['0.0.0.0/0', '::/0'],
                  }
                )
              ],
              droplet_ids: [8043964],
              tags: ['frontend']
            )


            client.firewalls.update(firewall, id:
            'bb4b2611-3d72-467b-8602-280330ecd65c')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "frontend-firewall",
              "inbound_rules": [
                {
                  "protocol": "tcp",
                  "ports": "8080",
                  "sources": {
                    "load_balancer_uids": [
                      "4de7ac8b-495b-4884-9a69-1050c6793cd6"
                    ]
                  }
                },
                {
                  "protocol": "tcp",
                  "ports": "22",
                  "sources": {
                    "tags": [
                      "gateway"
                    ],
                    "addresses": [
                      "18.0.0.0/8"
                    ]
                  }
                }
              ],
              "outbound_rules": [
                {
                  "protocol": "tcp",
                  "ports": "8080",
                  "destinations": {
                    "addresses": [
                      "0.0.0.0/0",
                      "::/0"
                    ]
                  }
                }
              ],
              "droplet_ids": [
                8043964
              ],
              "tags": [
                "frontend"
              ]
            }

            resp = client.firewalls.update(firewall_id="3afda9", body=req)
      security:
        - bearer_auth:
            - firewall:update
    delete:
      operationId: firewalls_delete
      summary: Delete a Firewall
      description: >
        To delete a firewall send a DELETE request to
        `/v2/firewalls/$FIREWALL_ID`.


        No response body will be sent back, but the response code will indicate

        success. Specifically, the response code will be a 204, which means that
        the

        action was successful with no returned body data.
      tags:
        - Firewalls
      parameters:
        - $ref: '#/components/parameters/firewall_id'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/firewalls/bb4b2611-3d72-467b-8602-280330ecd65c"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.Firewalls.Delete(ctx, 'bb4b2611-3d72-467b-8602-280330ecd65c')
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.firewalls.delete(id: 'bb4b2611-3d72-467b-8602-280330ecd65c')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.firewalls.delete(firewall_id= "as9di9d")
      security:
        - bearer_auth:
            - firewall:delete
  /v2/firewalls/{firewall_id}/droplets:
    post:
      operationId: firewalls_assign_droplets
      summary: Add Droplets to a Firewall
      description: >
        To assign a Droplet to a firewall, send a POST request to

        `/v2/firewalls/$FIREWALL_ID/droplets`. In the body of the request, there

        should be a `droplet_ids` attribute containing a list of Droplet IDs.


        No response body will be sent back, but the response code will indicate

        success. Specifically, the response code will be a 204, which means that
        the

        action was successful with no returned body data.
      tags:
        - Firewalls
      parameters:
        - $ref: '#/components/parameters/firewall_id'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                droplet_ids:
                  type: array
                  description: >-
                    An array containing the IDs of the Droplets to be assigned
                    to the firewall.
                  items:
                    type: integer
                  example:
                    - 49696269
              required:
                - droplet_ids
              type: object
            example:
              droplet_ids:
                - 49696269
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"droplet_ids":[49696269]}' \
              "https://api.digitalocean.com/v2/firewalls/bb4b2611-3d72-467b-8602-280330ecd65c/droplets"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.Firewalls.AddDroplets(ctx, 'bb4b2611-3d72-467b-8602-280330ecd65c', 49696269) 
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            client.firewalls.add_droplets([49696269], id:
            'bb4b2611-3d72-467b-8602-280330ecd65c')
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            req = {
              "droplet_ids": [
                49696269
              ]
            }


            resp = client.firewalls.assign_droplets(firewall_id="39fa4gz",
            body=req)
      security:
        - bearer_auth:
            - firewall:update
    delete:
      operationId: firewalls_delete_droplets
      summary: Remove Droplets from a Firewall
      description: >
        To remove a Droplet from a firewall, send a DELETE request to

        `/v2/firewalls/$FIREWALL_ID/droplets`. In the body of the request, there
        should

        be a `droplet_ids` attribute containing a list of Droplet IDs.


        No response body will be sent back, but the response code will indicate

        success. Specifically, the response code will be a 204, which means that
        the

        action was successful with no returned body data.
      tags:
        - Firewalls
      parameters:
        - $ref: '#/components/parameters/firewall_id'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                droplet_ids:
                  type: array
                  description: >-
                    An array containing the IDs of the Droplets to be removed
                    from the firewall.
                  items:
                    type: integer
                  example:
                    - 49696269
              required:
                - droplet_ids
              type: object
            example:
              droplet_ids:
                - 49696269
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"droplet_ids":[49696269]}' \
              "https://api.digitalocean.com/v2/firewalls/bb4b2611-3d72-467b-8602-280330ecd65c/droplets"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.Firewalls.RemoveDroplets(ctx, 'bb4b2611-3d72-467b-8602-280330ecd65c', 49696269)
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            client.firewalls.remove_droplets([49696269], id:
            'bb4b2611-3d72-467b-8602-280330ecd65c')
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            req = {
              "droplet_ids": [
                49696269
              ]
            }


            resp = client.firewalls.delete_droplets(firewall_id="39fa4gz",
            body=req)
      security:
        - bearer_auth:
            - firewall:update
  /v2/firewalls/{firewall_id}/tags:
    post:
      operationId: firewalls_add_tags
      summary: Add Tags to a Firewall
      description: >
        To assign a tag representing a group of Droplets to a firewall, send a
        POST

        request to `/v2/firewalls/$FIREWALL_ID/tags`. In the body of the
        request,

        there should be a `tags` attribute containing a list of tag names.


        No response body will be sent back, but the response code will indicate

        success. Specifically, the response code will be a 204, which means that
        the

        action was successful with no returned body data.
      tags:
        - Firewalls
      parameters:
        - $ref: '#/components/parameters/firewall_id'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                tags:
                  allOf:
                    - $ref: '#/components/schemas/existing_tags_array'
                    - description: >-
                        An array containing the names of the Tags to be assigned
                        to the firewall.
              required:
                - tags
              type: object
            example:
              tags:
                - frontend
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"tags":["frontend"]}' \
              "https://api.digitalocean.com/v2/firewalls/bb4b2611-3d72-467b-8602-280330ecd65c/tags"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.Firewalls.AddTags(ctx, 'bb4b2611-3d72-467b-8602-280330ecd65c', 'frontend') 
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            client.firewalls.add_tags(['frontend'], id:
            'bb4b2611-3d72-467b-8602-280330ecd65c')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "tags": [
                "frontend"
              ]
            }

            resp = client.firewalls.add_tags(firewall_id="39fa4gz", body=req)
      security:
        - bearer_auth:
            - firewall:update
    delete:
      operationId: firewalls_delete_tags
      summary: Remove Tags from a Firewall
      description: >
        To remove a tag representing a group of Droplets from a firewall, send a

        DELETE request to `/v2/firewalls/$FIREWALL_ID/tags`. In the body of the

        request, there should be a `tags` attribute containing a list of tag
        names.


        No response body will be sent back, but the response code will indicate

        success. Specifically, the response code will be a 204, which means that
        the

        action was successful with no returned body data.
      tags:
        - Firewalls
      parameters:
        - $ref: '#/components/parameters/firewall_id'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                tags:
                  allOf:
                    - $ref: '#/components/schemas/existing_tags_array'
                    - description: >-
                        An array containing the names of the Tags to be removed
                        from the firewall.
              required:
                - tags
              type: object
            example:
              tags:
                - frontend
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"tags":["frontend"]}' \
              "https://api.digitalocean.com/v2/firewalls/bb4b2611-3d72-467b-8602-280330ecd65c/tags"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.Firewalls.RemoveTags(ctx, 'bb4b2611-3d72-467b-8602-280330ecd65c', 'frontend')
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            client.firewalls.remove_tags(['frontend'], id:
            'bb4b2611-3d72-467b-8602-280330ecd65c')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "tags": [
                "frontend"
              ]
            }

            resp = client.firewalls.delete_tags(firewall_id="39fa4gz", body=req)
      security:
        - bearer_auth:
            - firewall:update
  /v2/firewalls/{firewall_id}/rules:
    post:
      operationId: firewalls_add_rules
      summary: Add Rules to a Firewall
      description: >
        To add additional access rules to a firewall, send a POST request to

        `/v2/firewalls/$FIREWALL_ID/rules`. The body of the request may include
        an

        inbound_rules and/or outbound_rules attribute containing an array of
        rules to

        be added.


        No response body will be sent back, but the response code will indicate

        success. Specifically, the response code will be a 204, which means that
        the

        action was successful with no returned body data.
      tags:
        - Firewalls
      parameters:
        - $ref: '#/components/parameters/firewall_id'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/firewall_rules'
                - anyOf:
                    - title: Inbound Rules
                      required:
                        - inbound_rules
                    - title: Outbound Rules
                      required:
                        - outbound_rules
            example:
              inbound_rules:
                - protocol: tcp
                  ports: '3306'
                  sources:
                    droplet_ids:
                      - 49696269
              outbound_rules:
                - protocol: tcp
                  ports: '3306'
                  destinations:
                    droplet_ids:
                      - 49696269
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"inbound_rules":[{"protocol":"tcp","ports":"3306","sources":{"droplet_ids":[49696269]}}],"outbound_rules":[{"protocol":"tcp","ports":"3306","destinations":{"droplet_ids":[49696269]}}]}' \
              "https://api.digitalocean.com/v2/firewalls/bb4b2611-3d72-467b-8602-280330ecd65c/rules" 
        - lang: Go
          source: >-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )


            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

            ruleRequest := &godo.FirewallRulesRequest{
                InboundRules: []godo.InboundRule{
                    {
                        Protocol:      'tcp',
                        PortRange:     '3306',
                        Sources: &godo.Sources{
                            DropletIDs: []int{49696269},
                        },
                    },
                },
                OutboundRules: []godo.OutboundRule{
                    {
                        Protocol:      'tcp',
                        PortRange:     '3306',
                        Destinations: &godo.Destinations{
                            DropletIDs: []int{49696269},
                        },
                    },
                },
            }


            _, err := c.Firewalls.AddRules(ctx,
            'bb4b2611-3d72-467b-8602-280330ecd65c', ruleRequest)

            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            inbound_rule = DropletKit::FirewallInboundRule.new(
              protocol: 'tcp',
              ports: '3306',
              sources: {
                droplet_ids: [49696269]
              }
            )


            outbound_rule = DropletKit::FirewallOutboundRule.new(
              protocol: 'tcp',
              ports: '3306',
              destinations: {
                droplet_ids: [49696269]
              }
            )


            client.firewalls.add_rules(inbound_rules: [inbound_rule],
            outbound_rules: [outbound_rule], id:
            'bb4b2611-3d72-467b-8602-280330ecd65c')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "inbound_rules": [
                {
                  "protocol": "tcp",
                  "ports": "3306",
                  "sources": {
                    "droplet_ids": [
                      49696269
                    ]
                  }
                }
              ],
              "outbound_rules": [
                {
                  "protocol": "tcp",
                  "ports": "3306",
                  "destinations": {
                    "droplet_ids": [
                      49696269
                    ]
                  }
                }
              ]
            }

            resp = client.firewalls.add_rules(firewall_id="39fa4gz", body=req)
      security:
        - bearer_auth:
            - firewall:update
    delete:
      operationId: firewalls_delete_rules
      summary: Remove Rules from a Firewall
      description: >
        To remove access rules from a firewall, send a DELETE request to

        `/v2/firewalls/$FIREWALL_ID/rules`. The body of the request may include
        an

        `inbound_rules` and/or `outbound_rules` attribute containing an array of
        rules

        to be removed.


        No response body will be sent back, but the response code will indicate

        success. Specifically, the response code will be a 204, which means that
        the

        action was successful with no returned body data.
      tags:
        - Firewalls
      parameters:
        - $ref: '#/components/parameters/firewall_id'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/firewall_rules'
                - anyOf:
                    - title: Inbound Rules
                      required:
                        - inbound_rules
                    - title: Outbound Rules
                      required:
                        - outbound_rules
            example:
              inbound_rules:
                - protocol: tcp
                  ports: '3306'
                  sources:
                    droplet_ids:
                      - 49696269
              outbound_rules:
                - protocol: tcp
                  ports: '3306'
                  destinations:
                    droplet_ids:
                      - 49696269
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"inbound_rules":[{"protocol":"tcp","ports":"3306","sources":{"droplet_ids":[49696269]}}],"outbound_rules":[{"protocol":"tcp","ports":"3306","destinations":{"droplet_ids":[49696269]}}]}' \
              "https://api.digitalocean.com/v2/firewalls/bb4b2611-3d72-467b-8602-280330ecd65c/rules"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                ruleRequest := &godo.FirewallRulesRequest{
                    InboundRules: []godo.InboundRule{
                        {
                            Protocol:      'tcp',
                            PortRange:     '3306',
                            Sources: &godo.Sources{
                                DropletIDs: []int{49696269},
                            },
                        },
                    },
                    OutboundRules: []godo.OutboundRule{
                        {
                            Protocol:      'tcp',
                            PortRange:     '3306',
                            Destinations: &godo.Destinations{
                                DropletIDs: []int{49696269},
                            },
                        },
                    },
                }

                _, err := c.Firewalls.RemoveRules(ctx, 'bb4b2611-3d72-467b-8602-280330ecd65c', ruleRequest)

            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            inbound_rule = DropletKit::FirewallInboundRule.new(
              protocol: 'tcp',
              ports: '3306',
              sources: {
                droplet_ids: [49696269]
              }
            )


            outbound_rule = DropletKit::FirewallOutboundRule.new(
              protocol: 'tcp',
              ports: '3306',
              destinations: {
                droplet_ids: [49696269]
              }
            )


            client.firewalls.remove_rules(inbound_rules: [inbound_rule],
            outbound_rules: [outbound_rule], id:
            'bb4b2611-3d72-467b-8602-280330ecd65c')
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            req = {
              "inbound_rules": [
                {
                  "protocol": "tcp",
                  "ports": "3306",
                  "sources": {
                    "droplet_ids": [
                      49696269
                    ]
                  }
                }
              ],
              "outbound_rules": [
                {
                  "protocol": "tcp",
                  "ports": "3306",
                  "destinations": {
                    "droplet_ids": [
                      49696269
                    ]
                  }
                }
              ]
            }


            resp = client.firewalls.delete_rules(firewall_id="39fa4gz",
            body=req)
      security:
        - bearer_auth:
            - firewall:update
  /v2/images:
    get:
      operationId: images_list
      summary: List All Images
      description: >
        To list all of the images available on your account, send a GET request
        to /v2/images.


        ## Filtering Results

        -----


        It's possible to request filtered results by including certain query
        parameters.


        **Image Type**


        Either 1-Click Application or OS Distribution images can be filtered by
        using the `type` query parameter.


        > Important: The `type` query parameter does not directly relate to the
        `type` attribute.


        To retrieve only ***distribution*** images, include the `type` query
        parameter set to distribution, `/v2/images?type=distribution`.


        To retrieve only ***application*** images, include the `type` query
        parameter set to application, `/v2/images?type=application`.


        **User Images**


        To retrieve only the private images of a user, include the `private`
        query parameter set to true, `/v2/images?private=true`.


        **Tags**


        To list all images assigned to a specific tag, include the `tag_name`
        query parameter set to the name of the tag in your GET request. For
        example, `/v2/images?tag_name=$TAG_NAME`.
      tags:
        - Images
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/private'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/all_images'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/images?page=1&per_page=1"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                // List all images
                images, _, err := client.Images.List(ctx, opt)

                // List all application images
                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                images, _, err := client.Images.ListApplication(ctx, opt) 
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            # List all images
            images = client.images.all
            images.each

            # List all application images
            images = client.images.all(type: 'application')
            images.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.images.list()
      security:
        - bearer_auth:
            - image:read
    post:
      operationId: images_create_custom
      summary: Create a Custom Image
      description: >
        To create a new custom image, send a POST request to /v2/images.

        The body must contain a url attribute pointing to a Linux virtual
        machine

        image to be imported into DigitalOcean.

        The image must be in the raw, qcow2, vhdx, vdi, or vmdk format.

        It may be compressed using gzip or bzip2 and must be smaller than 100 GB
        after
         being decompressed.
      tags:
        - Images
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/image_new_custom'
      responses:
        '202':
          $ref: '#/components/responses/new_custom_image'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name": "ubuntu-18.04-minimal", "url": "http://cloud-images.ubuntu.com/minimal/releases/bionic/release/ubuntu-18.04-minimal-cloudimg-amd64.img", "distribution": "Ubuntu", "region": "nyc3", "description": "Cloud-optimized image w/ small footprint", "tags":["base-image", "prod"]}' \
              "https://api.digitalocean.com/v2/images"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "ubuntu-18.04-minimal",
              "url": "http://cloud-images.ubuntu.com/minimal/releases/bionic/release/ubuntu-18.04-minimal-cloudimg-amd64.img",
              "distribution": "Ubuntu",
              "region": "nyc3",
              "description": "Cloud-optimized image w/ small footprint",
              "tags": [
                "base-image",
                "prod"
              ]
            }

            resp = client.images.create_custom(body=req)
      security:
        - bearer_auth:
            - image:create
  /v2/images/{image_id}:
    get:
      operationId: images_get
      summary: Retrieve an Existing Image
      description: |
        To retrieve information about an image, send a `GET` request to
        `/v2/images/$IDENTIFIER`.
      tags:
        - Images
      parameters:
        - in: path
          name: image_id
          description: >
            A unique number (id) or string (slug) used to identify and reference
            a

            specific image.


            **Public** images can be identified by image `id` or `slug`.


            **Private** images *must* be identified by image `id`.
          required: true
          schema:
            anyOf:
              - type: integer
              - type: string
          examples:
            byId:
              summary: Retrieve a public or private image by id
              value: 62137902
            bySlug:
              summary: Retrieve a public image by slug
              value: ubuntu-16-04-x64
      responses:
        '200':
          $ref: '#/components/responses/existing_image'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            # Get existing image by ID
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/images/7555620"

            # Get existing image by slug
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/images/ubuntu-16-04-x64"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                // Get existing image by ID
                image, _, err := client.Images.GetByID(ctx, 7555620)

                // Get existing image by slug
                // image, _, err := client.Images.GetBySlug(ctx, "ubuntu-16-04-x64") 
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            # Retrieve image by ID
            client.images.find(id: '7555620')

            # Retrieve image by slug
            client.images.find(id: 'ubuntu-16-04-x64')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.images.get(image_id=134215)
      security:
        - bearer_auth:
            - image:read
    put:
      operationId: images_update
      summary: Update an Image
      description: >
        To update an image, send a `PUT` request to `/v2/images/$IMAGE_ID`.

        Set the `name` attribute to the new value you would like to use.

        For custom images, the `description` and `distribution` attributes may
        also be updated.
      tags:
        - Images
      parameters:
        - $ref: '#/components/parameters/image_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/image_update'
      responses:
        '200':
          $ref: '#/components/responses/updated_image'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PUT \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"new-image-name"}' \
              "https://api.digitalocean.com/v2/images/7938391"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                updateRequest := &godo.ImageUpdateRequest{
                    Name: "new-image-name",
                }

                image, _, err := client.Images.Update(ctx, id, updateRequest)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            image = DropletKit::Image.new(name: 'new-image-name')
            client.images.update(image, id: 7938391)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "Nifty New Snapshot",
              "distribution": "Ubuntu",
              "description": " "
            }

            resp = client.images.update(image_id=234532, body=req)
      security:
        - bearer_auth:
            - image:update
    delete:
      operationId: images_delete
      summary: Delete an Image
      description: >
        To delete a snapshot or custom image, send a `DELETE` request to
        `/v2/images/$IMAGE_ID`.
      tags:
        - Images
      parameters:
        - $ref: '#/components/parameters/image_id'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/images/7938391"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.Images.Delete(ctx, 7938391)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.images.delete(id: 7938391)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.images.delete(image_id=134215)
      security:
        - bearer_auth:
            - image:delete
  /v2/images/{image_id}/actions:
    get:
      operationId: imageActions_list
      summary: List All Actions for an Image
      description: >-
        To retrieve all actions that have been executed on an image, send a GET
        request to `/v2/images/$IMAGE_ID/actions`.
      tags:
        - Image Actions
      parameters:
        - $ref: '#/components/parameters/image_id'
      responses:
        '200':
          $ref: '#/components/responses/get_image_actions_response'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/images/7555620/actions?page=1&per_page=1"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                
            }
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.image_actions.list(image_id=7938269)
      security:
        - bearer_auth:
            - image:read
    post:
      operationId: imageActions_post
      summary: Initiate an Image Action
      description: >
        The following actions are available on an Image.


        ## Convert an Image to a Snapshot


        To convert an image, for example, a backup to a snapshot, send a POST
        request

        to `/v2/images/$IMAGE_ID/actions`. Set the `type` attribute to
        `convert`.


        ## Transfer an Image


        To transfer an image to another region, send a POST request to

        `/v2/images/$IMAGE_ID/actions`. Set the `type` attribute to `transfer`
        and set

        `region` attribute to the slug identifier of the region you wish to
        transfer

        to.
      tags:
        - Image Actions
      parameters:
        - $ref: '#/components/parameters/image_id'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/image_action_base'
                - $ref: '#/components/schemas/image_action_transfer'
              discriminator:
                propertyName: type
                mapping:
                  convert: '#/components/schemas/image_action_base'
                  transfer: '#/components/schemas/image_action_transfer'
      responses:
        '201':
          $ref: '#/components/responses/post_image_action_response'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            # Transfer an Existing Image
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"transfer","region":"nyc2"}' \
              "https://api.digitalocean.com/v2/images/7938269/actions"

            # Convert an Image into a Snapshot
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"convert"}' \
              "https://api.digitalocean.com/v2/images/7938291/actions"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                // Transfer an existing image
                transferRequest := &godo.ActionRequest{
                    "type":   "transfer",
                    "region": "nyc2",
                }
              # Transfer an Image
                transfer, _, err := client.ImageActions.Transfer(ctx, 7938269, transferRequest)

              # Convert an Image to a Snapshot
              # client.image_actions.convert(image_id: 7938269)

            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            # Transfer an Image
            client.image_actions.transfer(image_id: 7938269, region: 'nyc2')

            # Convert an Image to a Snapshot
            # client.image_actions.convert(image_id: 7938269)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "type": "convert"
            }
            resp = client.image_actions.post(image_id=342341, body=req)
      security:
        - bearer_auth:
            - image:update
  /v2/images/{image_id}/actions/{action_id}:
    get:
      operationId: imageActions_get
      summary: Retrieve an Existing Action
      description: >-
        To retrieve the status of an image action, send a GET request to
        `/v2/images/$IMAGE_ID/actions/$IMAGE_ACTION_ID`.
      tags:
        - Image Actions
      parameters:
        - $ref: '#/components/parameters/image_id'
        - $ref: '#/components/parameters/action_id'
      responses:
        '200':
          $ref: '#/components/responses/get_image_action_response'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/images/7938269/actions/36805527"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                action, _, err := client.ImageActions.Get(ctx, 7938269, 36805527)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.image_actions.find(image_id: 7938269, id: 36805527)
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            resp = client.image_actions.get(action_id=36805527,
            image_id=7938269)
      security:
        - bearer_auth:
            - image:read
  /v2/load_balancers:
    post:
      operationId: loadBalancers_create
      summary: Create a New Load Balancer
      description: >
        To create a new load balancer instance, send a POST request to

        `/v2/load_balancers`.


        You can specify the Droplets that will sit behind the load balancer
        using one

        of two methods:


        * Set `droplet_ids` to a list of specific Droplet IDs.

        * Set `tag` to the name of a tag. All Droplets with this tag applied
        will be
          assigned to the load balancer. Additional Droplets will be automatically
          assigned as they are tagged.

        These methods are mutually exclusive.
      tags:
        - Load Balancers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/load_balancer_create'
            examples:
              Basic Create Request:
                $ref: '#/components/examples/load_balancer_basic_create_request'
              SSL Termination Create Request:
                $ref: >-
                  #/components/examples/load_balancer_ssl_termination_create_request
              Create Request Using Droplet Tag:
                $ref: '#/components/examples/load_balancer_using_tag_create_request'
              Sticky Sessions and Custom Health Check:
                $ref: >-
                  #/components/examples/load_balancer_sticky_sessions_and_health_check_create_request
      responses:
        '202':
          $ref: '#/components/responses/load_balancer_create'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            # Create new load balancer
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name": "example-lb-01","size_unit": 1, "region": "nyc3", "forwarding_rules":[{"entry_protocol":"http","entry_port":80,"target_protocol":"http","target_port":80,"certificate_id":"","tls_passthrough":false}, {"entry_protocol": "https","entry_port": 444,"target_protocol": "https","target_port": 443,"tls_passthrough": true}], "health_check":{"protocol":"http","port":80,"path":"/","check_interval_seconds":10,"response_timeout_seconds":5,"healthy_threshold":5,"unhealthy_threshold":3}, "sticky_sessions":{"type":"none"}, "firewall":{"deny":["ip:1.2.3.4","cidr:2.3.4.0/24"],"allow":["cidr:1.2.0.0/16","ip:2.3.4.5"]}, "droplet_ids": [3164444, 3164445]}' \
              "https://api.digitalocean.com/v2/load_balancers"

            # Create new load balancer with Droplet tag
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name": "example-lb-01", "region": "nyc3", "size_unit": 1, "forwarding_rules":[{"entry_protocol":"http","entry_port":80,"target_protocol":"http","target_port":80,"certificate_id":"","tls_passthrough":false}, {"entry_protocol": "https","entry_port": 444,"target_protocol": "https","target_port": 443,"tls_passthrough": true}], "health_check":{"protocol":"http","port":80,"path":"/","check_interval_seconds":10,"response_timeout_seconds":5,"healthy_threshold":5,"unhealthy_threshold":3}, "sticky_sessions":{"type":"none"}, "firewall":{"deny":["ip:1.2.3.4", "cidr:2.3.4.0/24"],"allow":["cidr:1.2.0.0/16","ip:2.3.4.5"]}, "tag": "web:prod"}' \
              "https://api.digitalocean.com/v2/load_balancers"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                createRequest := &godo.LoadBalancerRequest{
                    Name:      "example-01",
                    SizeUnit: "1",
                    Algorithm: "round_robin",
                    Region:    "nyc3",
                    ForwardingRules: []godo.ForwardingRule{
                        {
                            EntryProtocol:  "http",
                            EntryPort:      80,
                            TargetProtocol: "http",
                            TargetPort:     80,
                        },
                        {
                            EntryProtocol:  "https",
                            EntryPort:      443,
                            TargetProtocol: "https",
                            TargetPort:     443,
                            TlsPassthrough: true,
                        },
                    },
                    HealthCheck: &godo.HealthCheck{
                        Protocol:               "http",
                        Port:                   80,
                        Path:                   "/",
                        CheckIntervalSeconds:   10,
                        ResponseTimeoutSeconds: 5,
                        HealthyThreshold:       5,
                        UnhealthyThreshold:     3,
                    },
                    StickySessions: &godo.StickySessions{
                        Type: "none",
                    },
                    DropletIDs:          []int{3164444, 3164445},
                    RedirectHttpToHttps: false,
                    Firewall:            &godo.LBFirewall{
                        Deny: []string{"ip:1.2.3.4", "cidr:2.3.4.0/24"},
                        Allow: []string{"cidr:1.2.0.0/16", "ip:2.3.4.5"},
                    }
              // Create new load balancer with Droplet tag
              //     Tag:                 "web:prod",
              //     RedirectHttpToHttps: false,
                }

                lb, _, err := client.LoadBalancers.Create(ctx, createRequest)
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            load_balancer = DropletKit::LoadBalancer.new(
              name: 'example-lb-01',
              size_unit: '1',
              algorithm: 'round_robin',
            # Create new load balancer with Droplet tag
            # tag: 'web:prod',
              droplet_ids: [ 3164444, 3164445],
              redirect_http_to_https: true,
              region: 'nyc3',
              forwarding_rules: [
                DropletKit::ForwardingRule.new(
                  entry_protocol: 'http',
                  entry_port: 80,
                  target_protocol: 'http',
                  target_port: 80,
                  certificate_id: '',
                  tls_passthrough: false
                ),
                DropletKit::ForwardingRule.new(
                  entry_protocol: 'https',
                  entry_port: 443,
                  target_protocol: 'https',
                  target_port: 443,
                  certificate_id: '',
                  tls_passthrough: true
                )
              ],
              sticky_sessions: DropletKit::StickySession.new(
                type: 'cookies',
                cookie_name: 'DO-LB',
                cookie_ttl_seconds: 5
              ),
              health_check: DropletKit::HealthCheck.new(
                protocol: 'http',
                port: 80,
                path: '/',
                check_interval_seconds: 10,
                response_timeout_seconds: 5,
                healthy_threshold: 5,
                unhealthy_threshold: 3
              )
            )
            client.load_balancers.create(load_balancer)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "example-lb-01",
              "region": "nyc3",
              "forwarding_rules": [
                {
                  "entry_protocol": "http",
                  "entry_port": 80,
                  "target_protocol": "http",
                  "target_port": 80
                },
                {
                  "entry_protocol": "https",
                  "entry_port": 443,
                  "target_protocol": "https",
                  "target_port": 443,
                  "tls_passthrough": True
                }
              ],
              "droplet_ids": [
                3164444,
                3164445
              ],
              "project_id": "9cc10173-e9ea-4176-9dbc-a4cee4c4ff30",
              "http_idle_timeout_seconds": 60,
              "firewall": {
                "deny": [
                  "cidr:1.2.0.0/16",
                  "ip:2.3.4.5"
                ],
                "allow": [
                  "ip:1.2.3.4",
                  "cidr:2.3.4.0/24"
                ]
              }
            }

            resp = client.load_balancers.create(body=req)
      security:
        - bearer_auth:
            - load_balancer:create
    get:
      operationId: loadBalancers_list
      summary: List All Load Balancers
      description: >
        To list all of the load balancer instances on your account, send a GET
        request

        to `/v2/load_balancers`.
      tags:
        - Load Balancers
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/all_load_balancers'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/load_balancers"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                lbs, _, err := c.LoadBalancers.List(ctx, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            load_balancers = client.load_balancers.all
            load_balancers.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.load_balancers.list()
      security:
        - bearer_auth:
            - load_balancer:read
  /v2/load_balancers/{lb_id}:
    get:
      operationId: loadBalancers_get
      summary: Retrieve an Existing Load Balancer
      description: >
        To show information about a load balancer instance, send a GET request
        to

        `/v2/load_balancers/$LOAD_BALANCER_ID`.
      tags:
        - Load Balancers
      parameters:
        - $ref: '#/components/parameters/load_balancer_id'
      responses:
        '200':
          $ref: '#/components/responses/existing_load_balancer'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/load_balancers/4de7ac8b-495b-4884-9a69-1050c6793cd6"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                lb, _, err := client.LoadBalancers.Get(ctx, "4de7ac8b-495b-4884-9a69-1050c6793cd6")
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            client.load_balancers.find(id:
            '4de7ac8b-495b-4884-9a69-1050c6793cd6')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.load_balancers.get(lb_id="afda3ad")
      security:
        - bearer_auth:
            - load_balancer:read
    put:
      operationId: loadBalancers_update
      summary: Update a Load Balancer
      description: >
        To update a load balancer's settings, send a PUT request to

        `/v2/load_balancers/$LOAD_BALANCER_ID`. The request should contain a
        full

        representation of the load balancer including existing attributes. It
        may

        contain _one of_ the `droplets_ids` or `tag` attributes as they are
        mutually

        exclusive. **Note that any attribute that is not provided will be reset
        to its

        default value.**
      tags:
        - Load Balancers
      parameters:
        - $ref: '#/components/parameters/load_balancer_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/load_balancer_create'
            examples:
              load_balancer_update_request:
                $ref: '#/components/examples/load_balancer_update_request'
      responses:
        '200':
          $ref: '#/components/responses/updated_load_balancer'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PUT \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"example-lb-01","size_unit":"2","region":"nyc3","algorithm":"least_connections","forwarding_rules":[{"entry_protocol":"http","entry_port":80,"target_protocol":"http","target_port":80},{"entry_protocol":"https","entry_port":444,"target_protocol":"https","target_port":443,"tls_passthrough":true}],"health_check":{"protocol":"http","port":80,"path":"/","check_interval_seconds":10,"response_timeout_seconds":5,"healthy_threshold":5,"unhealthy_threshold":3},"sticky_sessions":{"type":"cookies", "cookie_name": "DO_LB", "cookie_ttl_seconds": 300}, "firewall":{"deny":["ip:1.2.3.4","cidr:2.3.4.0/24"], "allow":["cidr:1.2.0.0/16","ip:2.3.4.5"]}, "droplet_ids": [3164444, 3164445]}' \
              "https://api.digitalocean.com/v2/load_balancers/4de7ac8b-495b-4884-9a69-1050c6793cd6"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                updateRequest := &godo.LoadBalancerRequest{
                    Name:      "example-01",
                    SizeUnit: "2",
                    Algorithm: "round_robin",
                    Region:    "nyc3",
                    ForwardingRules: []godo.ForwardingRule{
                        {
                            EntryProtocol:  "http",
                            EntryPort:      80,
                            TargetProtocol: "http",
                            TargetPort:     80,
                        },
                        {
                            EntryProtocol:  "https",
                            EntryPort:      443,
                            TargetProtocol: "https",
                            TargetPort:     443,
                            TlsPassthrough: true,
                        },
                    },
                    HealthCheck: &godo.HealthCheck{
                        Protocol:               "http",
                        Port:                   80,
                        Path:                   "/",
                        CheckIntervalSeconds:   10,
                        ResponseTimeoutSeconds: 5,
                        HealthyThreshold:       5,
                        UnhealthyThreshold:     3,
                    },
                    StickySessions: &godo.StickySessions{
                        Type:             "cookies",
                        CookieName:       "DO_LB",
                        CookieTtlSeconds: 300,
                    },
                    DropletIDs:          []int{3164444, 3164445},
                    RedirectHttpToHttps: false,
                    Firewall:            &godo.LBFirewall{
                        Deny: []string{"ip:1.2.3.4", "cidr:2.3.4.0/24"},
                        Allow: []string{"cidr:1.2.0.0/16", "ip:2.3.4.5"},
                    }
                }

                lb, _, err := c.LoadBalancers.Update(ctx, "c2c97ca7-6f63-4e23-8909-906fd86efb5e", updateRequest)
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            load_balancer = DropletKit::LoadBalancer.new(
              name: 'example-lb-01',
              size_unit: '2',
              algorithm: 'round_robin',
              droplet_ids: [ 3164444, 3164445],
              redirect_http_to_https: true,
              region: 'nyc3',
              forwarding_rules: [
                DropletKit::ForwardingRule.new(
                  entry_protocol: 'http',
                  entry_port: 80,
                  target_protocol: 'http',
                  target_port: 80,
                  certificate_id: '',
                  tls_passthrough: false
                ),
                DropletKit::ForwardingRule.new(
                  entry_protocol: 'https',
                  entry_port: 443,
                  target_protocol: 'https',
                  target_port: 443,
                  certificate_id: '',
                  tls_passthrough: true
                )
              ],
              sticky_sessions: DropletKit::StickySession.new(
                type: 'cookies',
                cookie_name: 'DO-LB-COOKIE',
                cookie_ttl_seconds: 5
              ),
              health_check: DropletKit::HealthCheck.new(
                protocol: 'http',
                port: 80,
                path: '/',
                check_interval_seconds: 10,
                response_timeout_seconds: 5,
                healthy_threshold: 5,
                unhealthy_threshold: 3
              )
            )

            client.load_balancers.update(load_balancer, id:
            '4de7ac8b-495b-4884-9a69-1050c6793cd6')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "updated-example-lb-01",
              "region": "nyc3",
              "droplet_ids": [
                3164444,
                3164445
              ],
              "algorithm": "round_robin",
              "forwarding_rules": [
                {
                  "entry_protocol": "http",
                  "entry_port": 80,
                  "target_protocol": "http",
                  "target_port": 80,
                  "certificate_id": "",
                  "tls_passthrough": false
                },
                {
                  "entry_protocol": "https",
                  "entry_port": 443,
                  "target_protocol": "https",
                  "target_port": 443,
                  "certificate_id": "",
                  "tls_passthrough": true
                }
              ],
              "health_check": {
                "protocol": "http",
                "port": 80,
                "path": "/",
                "check_interval_seconds": 10,
                "response_timeout_seconds": 5,
                "healthy_threshold": 5,
                "unhealthy_threshold": 3
              },
              "sticky_sessions": {
                "type": "none"
              },
              "redirect_http_to_https": False,
              "enable_proxy_protocol": True,
              "enable_backend_keepalive": True,
              "vpc_uuid": "c33931f2-a26a-4e61-b85c-4e95a2ec431b",
              "project_id": "9cc10173-e9ea-4176-9dbc-a4cee4c4ff30",
              "http_idle_timeout_seconds": 60,
              "firewall": {
                "deny": [
                  "cidr:1.2.0.0/16",
                  "ip:2.3.4.5"
                ],
                "allow": [
                  "ip:1.2.3.4",
                  "cidr:2.3.4.0/24"
                ]
              }
            }
            resp = client.load_balancers.update(lb_id="fda9fda", body=req)
      security:
        - bearer_auth:
            - load_balancer:update
    delete:
      operationId: loadBalancers_delete
      summary: Delete a Load Balancer
      description: >
        To delete a load balancer instance, disassociating any Droplets assigned
        to it

        and removing it from your account, send a DELETE request to

        `/v2/load_balancers/$LOAD_BALANCER_ID`.


        A successful request will receive a 204 status code with no body in
        response.

        This indicates that the request was processed successfully.
      tags:
        - Load Balancers
      parameters:
        - $ref: '#/components/parameters/load_balancer_id'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/load_balancers/4de7ac8b-495b-4884-9a69-1050c6793cd6"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.LoadBalancers.Delete(ctx, "4de7ac8b-495b-4884-9a69-1050c6793cd6")
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            client.load_balancers.delete(id:
            '4de7ac8b-495b-4884-9a69-1050c6793cd6')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.load_balancers.delete(lb_id="afda3ad")
      security:
        - bearer_auth:
            - load_balancer:delete
  /v2/load_balancers/{lb_id}/cache:
    delete:
      operationId: loadBalancers_delete_cache
      summary: Delete a Global Load Balancer CDN Cache
      description: >
        To delete a Global load balancer CDN cache, send a DELETE request to

        `/v2/load_balancers/$LOAD_BALANCER_ID/cache`.


        A successful request will receive a 204 status code with no body in
        response.

        This indicates that the request was processed successfully.
      tags:
        - Load Balancers
      parameters:
        - $ref: '#/components/parameters/load_balancer_id'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/load_balancers/4de7ac8b-495b-4884-9a69-1050c6793cd6/cache"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.LoadBalancers.PurgeCache(ctx, "4de7ac8b-495b-4884-9a69-1050c6793cd6")
            }
      security:
        - bearer_auth:
            - load_balancer:delete
  /v2/load_balancers/{lb_id}/droplets:
    post:
      operationId: loadBalancers_add_droplets
      summary: Add Droplets to a Load Balancer
      description: >
        To assign a Droplet to a load balancer instance, send a POST request to

        `/v2/load_balancers/$LOAD_BALANCER_ID/droplets`. In the body of the
        request,

        there should be a `droplet_ids` attribute containing a list of Droplet
        IDs.

        Individual Droplets can not be added to a load balancer configured with
        a

        Droplet tag. Attempting to do so will result in a "422 Unprocessable
        Entity"

        response from the API.


        No response body will be sent back, but the response code will indicate

        success. Specifically, the response code will be a 204, which means that
        the

        action was successful with no returned body data.
      tags:
        - Load Balancers
      parameters:
        - $ref: '#/components/parameters/load_balancer_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                droplet_ids:
                  type: array
                  items:
                    type: integer
                  example:
                    - 3164444
                    - 3164445
                  description: >-
                    An array containing the IDs of the Droplets assigned to the
                    load balancer.
              required:
                - droplet_ids
              type: object
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"droplet_ids": [3164446, 3164447]}' \
              "https://api.digitalocean.com/v2/load_balancers/4de7ac8b-495b-4884-9a69-1050c6793cd6/droplets"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                droplets := []int{3164446, 3164447}
                _, err := client.LoadBalancers.AddDroplets(ctx, "4de7ac8b-495b-4884-9a69-1050c6793cd6", droplets...)
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            client.load_balancers.add_droplets([3164446, 3164447], id:
            '4de7ac8b-495b-4884-9a69-1050c6793cd6')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "droplet_ids": [
                3164444,
                3164445
              ]
            }

            resp = client.load_balancers.add_droplets(lb_id="1fd32a", body=req)
      security:
        - bearer_auth:
            - load_balancer:update
    delete:
      operationId: loadBalancers_remove_droplets
      summary: Remove Droplets from a Load Balancer
      description: >
        To remove a Droplet from a load balancer instance, send a DELETE request
        to

        `/v2/load_balancers/$LOAD_BALANCER_ID/droplets`. In the body of the
        request,

        there should be a `droplet_ids` attribute containing a list of Droplet
        IDs.


        No response body will be sent back, but the response code will indicate

        success. Specifically, the response code will be a 204, which means that
        the

        action was successful with no returned body data.
      tags:
        - Load Balancers
      parameters:
        - $ref: '#/components/parameters/load_balancer_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                droplet_ids:
                  type: array
                  items:
                    type: integer
                  example:
                    - 3164444
                    - 3164445
                  description: >-
                    An array containing the IDs of the Droplets assigned to the
                    load balancer.
              required:
                - droplet_ids
              type: object
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"droplet_ids": [3164446, 3164447]}' \
              "https://api.digitalocean.com/v2/load_balancers/4de7ac8b-495b-4884-9a69-1050c6793cd6/droplets"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                droplets := []int{3164446, 3164447}
                _, err := client.LoadBalancers.RemoveDroplets(ctx, "4de7ac8b-495b-4884-9a69-1050c6793cd6", droplets...)
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            client.load_balancers.remove_droplets([3164446, 3164447], id:
            '4de7ac8b-495b-4884-9a69-1050c6793cd6')
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            req = {
              "droplet_ids": [
                3164444,
                3164445
              ]
            }


            resp = client.load_balancers.remove_droplets(lb_id="fda9fda",
            body=req)
      security:
        - bearer_auth:
            - load_balancer:update
  /v2/load_balancers/{lb_id}/forwarding_rules:
    post:
      operationId: loadBalancers_add_forwardingRules
      summary: Add Forwarding Rules to a Load Balancer
      description: >
        To add an additional forwarding rule to a load balancer instance, send a
        POST

        request to `/v2/load_balancers/$LOAD_BALANCER_ID/forwarding_rules`. In
        the body

        of the request, there should be a `forwarding_rules` attribute
        containing an

        array of rules to be added.


        No response body will be sent back, but the response code will indicate

        success. Specifically, the response code will be a 204, which means that
        the

        action was successful with no returned body data.
      tags:
        - Load Balancers
      parameters:
        - $ref: '#/components/parameters/load_balancer_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                forwarding_rules:
                  type: array
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/forwarding_rule'
              required:
                - forwarding_rules
              type: object
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"forwarding_rules": [{"entry_protocol": "tcp","entry_port": 3306,"target_protocol": "tcp","target_port": 3306}]}' \
              "https://api.digitalocean.com/v2/load_balancers/4de7ac8b-495b-4884-9a69-1050c6793cd6/forwarding_rules"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                forwardingRule := []godo.ForwardingRule{
                    {
                        EntryProtocol:  "tcp",
                        EntryPort:      3306,
                        TargetProtocol: "tcp",
                        TargetPort:     3306,
                    },
                }
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            rule = DropletKit::ForwardingRule.new(
              entry_protocol: 'tcp',
              entry_port: 3306,
              target_protocol: 'tcp',
              target_port: 3306,
              certificate_id: '',
              tls_passthrough: false
            )

            client.load_balancers.add_forwarding_rules([rule], id:
            '4de7ac8b-495b-4884-9a69-1050c6793cd6')
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            req = {
              "forwarding_rules": [
                {
                  "entry_protocol": "https",
                  "entry_port": 443,
                  "target_protocol": "http",
                  "target_port": 80,
                  "certificate_id": "892071a0-bb95-49bc-8021-3afd67a210bf",
                  "tls_passthrough": False
                }
              ]
            }


            resp = client.load_balancers.add_forwarding_rules(lb_id="1fd32a",
            body=req)
      security:
        - bearer_auth:
            - load_balancer:update
    delete:
      operationId: loadBalancers_remove_forwardingRules
      summary: Remove Forwarding Rules from a Load Balancer
      description: >
        To remove forwarding rules from a load balancer instance, send a DELETE

        request to `/v2/load_balancers/$LOAD_BALANCER_ID/forwarding_rules`. In
        the

        body of the request, there should be a `forwarding_rules` attribute
        containing

        an array of rules to be removed.


        No response body will be sent back, but the response code will indicate

        success. Specifically, the response code will be a 204, which means that
        the

        action was successful with no returned body data.
      tags:
        - Load Balancers
      parameters:
        - $ref: '#/components/parameters/load_balancer_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                forwarding_rules:
                  type: array
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/forwarding_rule'
              required:
                - forwarding_rules
              type: object
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"forwarding_rules": [{"entry_protocol": "tcp","entry_port": 3306,"target_protocol": "tcp","target_port": 3306}]}' \
              "https://api.digitalocean.com/v2/load_balancers/4de7ac8b-495b-4884-9a69-1050c6793cd6/forwarding_rules"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                forwardingRule := []godo.ForwardingRule{
                    {
                        EntryProtocol:  "tcp",
                        EntryPort:      3306,
                        TargetProtocol: "tcp",
                        TargetPort:     3306,
                    },
                }

                _, err := client.LoadBalancers.RemoveForwardingRules(ctx, "4de7ac8b-495b-4884-9a69-1050c6793cd6", forwardingRule...)
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            rule = DropletKit::ForwardingRule.new(
              entry_protocol: 'tcp',
              entry_port: 3306,
              target_protocol: 'tcp',
              target_port: 3306,
              certificate_id: '',
              tls_passthrough: false
            )

            client.load_balancers.remove_forwarding_rules([rule], id:
            '4de7ac8b-495b-4884-9a69-1050c6793cd6')
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            req = {
              "forwarding_rules": [
                {
                  "entry_protocol": "https",
                  "entry_port": 443,
                  "target_protocol": "http",
                  "target_port": 80,
                  "certificate_id": "892071a0-bb95-49bc-8021-3afd67a210bf",
                  "tls_passthrough": False
                }
              ]
            }


            resp =
            client.load_balancers.remove_forwarding_rules(lb_id="fda9fda",
            body=req)
      security:
        - bearer_auth:
            - load_balancer:update
  /v2/regions:
    get:
      operationId: regions_list
      summary: List All Data Center Regions
      description: >-
        To list all of the regions that are available, send a GET request to
        `/v2/regions`.

        The response will be a JSON object with a key called `regions`. The
        value of this will be an array of `region` objects, each of which will
        contain the standard region attributes.
      tags:
        - Regions
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/all_regions'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/regions"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                regions, _, err := client.Regions.List(ctx, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            regions = client.regions.all
            regions.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.regions.list()
      security:
        - bearer_auth:
            - regions:read
  /v2/reports/droplet_neighbors_ids:
    get:
      operationId: droplets_list_neighborsIds
      summary: List All Droplet Neighbors
      description: >
        To retrieve a list of all Droplets that are co-located on the same
        physical

        hardware, send a GET request to `/v2/reports/droplet_neighbors_ids`.


        The results will be returned as a JSON object with a key of
        `neighbor_ids`.

        This will be set to an array of arrays. Each array will contain a set of

        Droplet IDs for Droplets that share a physical server. An empty array

        indicates that all Droplets associated with your account are located on

        separate physical hardware.
      tags:
        - Droplets
      responses:
        '200':
          $ref: '#/components/responses/droplet_neighbors_ids'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/reports/droplet_neighbors_ids"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.droplets.list_neighbors_ids()
      security:
        - bearer_auth:
            - droplet:read
  /v2/reserved_ips:
    get:
      operationId: reservedIPs_list
      summary: List All Reserved IPs
      description: >-
        To list all of the reserved IPs available on your account, send a GET
        request to `/v2/reserved_ips`.
      tags:
        - Reserved IPs
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/reserved_ip_list'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/reserved_ips?page=1&per_page=20" 
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                reservedIPs, _, err := client.ReservedIPs.List(ctx, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            reserved_ips = client.reserved_ips.all
            reserved_ips.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.reserved_ips.list()
      security:
        - bearer_auth:
            - reserved_ip:read
    post:
      operationId: reservedIPs_create
      summary: Create a New Reserved IP
      description: >-
        On creation, a reserved IP must be either assigned to a Droplet or
        reserved to a region.

        * To create a new reserved IP assigned to a Droplet, send a POST
          request to `/v2/reserved_ips` with the `droplet_id` attribute.

        * To create a new reserved IP reserved to a region, send a POST request
        to
          `/v2/reserved_ips` with the `region` attribute.

        **Note**:  In addition to the standard rate limiting, only 12 reserved
        IPs may be created per 60 seconds.
      tags:
        - Reserved IPs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reserved_ip_create'
      responses:
        '202':
          $ref: '#/components/responses/reserved_ip_created'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"droplet_id": 123456}' \
              "https://api.digitalocean.com/v2/reserved_ips" 
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
              token := os.Getenv("DIGITALOCEAN_TOKEN")

              client := godo.NewFromToken(token)
              ctx := context.TODO()

              createRequest := &godo.ReservedIPCreateRequest{
                  DropletID: 123456,
                  Region:    "nyc3",
                  ProjectID: "1234a77a-12cd-11ed-909f-43c99lbf6030",
              }

              reservedIP, _, err := client.ReservedIPs.Create(ctx, createRequest)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            reserved_ip = DropletKit::ReservedIp.new(droplet_id: 123456)
            client.reserved_ips.create(reserved_ip) 
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "droplet_id": 2457247
            }

            resp = client.reserved_ips.create(body=req)
      security:
        - bearer_auth:
            - reserved_ip:create
  /v2/reserved_ips/{reserved_ip}:
    get:
      operationId: reservedIPs_get
      summary: Retrieve an Existing Reserved IP
      description: >-
        To show information about a reserved IP, send a GET request to
        `/v2/reserved_ips/$RESERVED_IP_ADDR`.
      tags:
        - Reserved IPs
      parameters:
        - $ref: '#/components/parameters/reserved_ip'
      responses:
        '200':
          $ref: '#/components/responses/reserved_ip'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/reserved_ips/45.55.96.47" 
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                reservedIP, _, err := client.ReservedIPs.Get(ctx, "45.55.96.47")
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.reserved_ips.find(ip: '45.55.96.47')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.reserved_ips.get(reserved_ip="45.55.96.47")
      security:
        - bearer_auth:
            - reserved_ip:read
    delete:
      operationId: reservedIPs_delete
      summary: Delete a Reserved IP
      description: >
        To delete a reserved IP and remove it from your account, send a DELETE
        request

        to `/v2/reserved_ips/$RESERVED_IP_ADDR`.


        A successful request will receive a 204 status code with no body in
        response.

        This indicates that the request was processed successfully.
      tags:
        - Reserved IPs
      parameters:
        - $ref: '#/components/parameters/reserved_ip'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/reserved_ips/45.55.96.47"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.ReservedIPs.Delete(ctx, "45.55.96.34")
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.reserved_ips.delete(ip: '45.55.96.47') 
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.reserved_ips.delete(reserved_ip="45.55.96.47")
      security:
        - bearer_auth:
            - reserved_ip:delete
  /v2/reserved_ips/{reserved_ip}/actions:
    get:
      operationId: reservedIPsActions_list
      summary: List All Actions for a Reserved IP
      description: >-
        To retrieve all actions that have been executed on a reserved IP, send a
        GET request to `/v2/reserved_ips/$RESERVED_IP/actions`.
      tags:
        - Reserved IP Actions
      parameters:
        - $ref: '#/components/parameters/reserved_ip'
      responses:
        '200':
          $ref: '#/components/responses/reserved_ip_actions'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/reserved_ips/45.55.96.47/actions?page=1&per_page=1"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                actions, _, err := client.ReservedIPActions.List(ctx, '45.55.96.47', opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            actions = client.reserved_ip_actions.all(ip: '45.55.96.47')
            actions.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.reserved_ips_actions.list(reserved_ip="45.55.96.47")
      security:
        - bearer_auth:
            - reserved_ip:read
    post:
      operationId: reservedIPsActions_post
      summary: Initiate a Reserved IP Action
      description: >
        To initiate an action on a reserved IP send a POST request to

        `/v2/reserved_ips/$RESERVED_IP/actions`. In the JSON body to the
        request,

        set the `type` attribute to on of the supported action types:


        | Action     | Details

        |------------|--------

        | `assign`   | Assigns a reserved IP to a Droplet

        | `unassign` | Unassign a reserved IP from a Droplet
      tags:
        - Reserved IP Actions
      parameters:
        - $ref: '#/components/parameters/reserved_ip'
      requestBody:
        description: >
          The `type` attribute set in the request body will specify the action
          that

          will be taken on the reserved IP.
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/reserved_ip_action_unassign'
                - $ref: '#/components/schemas/reserved_ip_action_assign'
              discriminator:
                propertyName: type
                mapping:
                  unassign: '#/components/schemas/reserved_ip_action_unassign'
                  assign: '#/components/schemas/reserved_ip_action_assign'
      responses:
        '201':
          $ref: '#/components/responses/reserved_ip_action'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            # Assign a Reserved IP to a Droplet
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"assign","droplet_id":8219222}' \
              "https://api.digitalocean.com/v2/reserved_ips/45.55.96.47/actions"

            # Unassign a Reserved IP
            # curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"unassign"}' \
              "https://api.digitalocean.com/v2/reserved_ips/45.55.96.47/actions"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

              // Assign a Reserved IP to a Droplet
                action, _, err := client.ReservedIPActions.Assign(ctx, "45.55.96.47", 8219222)

              // Unassign a Reserved IP
              action, _, err := client.ReservedIPActions.Unassign(ctx, "45.55.96.47")  
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            # Assign a Reserved IP to a Droplet

            client.reserved_ip_actions.assign(ip: '45.55.96.47', droplet_id:
            8219222)


            # Unassign a Reserved IP

            # client.reserved_ip_actions.unassign(ip: '45.55.96.47')
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            req={
              "type": "unassign"
            }


            resp = client.reserved_ips_actions.post(reserved_ip="49.32.13.21",
            body=req)
      security:
        - bearer_auth:
            - reserved_ip:update
  /v2/reserved_ips/{reserved_ip}/actions/{action_id}:
    get:
      operationId: reservedIPsActions_get
      summary: Retrieve an Existing Reserved IP Action
      description: >-
        To retrieve the status of a reserved IP action, send a GET request to
        `/v2/reserved_ips/$RESERVED_IP/actions/$ACTION_ID`.
      tags:
        - Reserved IP Actions
      parameters:
        - $ref: '#/components/parameters/reserved_ip'
        - $ref: '#/components/parameters/action_id'
      responses:
        '200':
          $ref: '#/components/responses/reserved_ip_action'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/reserved_ips/45.55.96.47/actions/72531856"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                action, _, err := client.ReservedIPActions.Get(ctx, "45.55.96.47", 72531856)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.reserved_ip_actions.find(ip: '45.55.96.47', id: 72531856)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.reserved_ips_actions.get(reserved_ip="45.55.96.47")
      security:
        - bearer_auth:
            - reserved_ip:read
  /v2/reserved_ipv6:
    get:
      operationId: reservedIPv6_list
      summary: '[Public Preview] List All Reserved IPv6s'
      description: >-
        To list all of the reserved IPv6s available on your account, send a GET
        request to `/v2/reserved_ipv6`.
      tags:
        - '[Public Preview] Reserved IPv6'
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/reserved_ipv6_list'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/reserved_ipv6?page=1&per_page=20" 
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                reservedIPs, _, err := client.ReservedIPV6s.List(ctx, opt)
            }
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.reserved_ipv6s.list()
      security:
        - bearer_auth:
            - reserved_ip:read
    post:
      operationId: reservedIPv6_create
      summary: '[Public Preview] Create a New Reserved IPv6'
      description: >-
        On creation, a reserved IPv6 must be reserved to a region.

        * To create a new reserved IPv6 reserved to a region, send a POST
        request to
          `/v2/reserved_ipv6` with the `region_slug` attribute.
      tags:
        - '[Public Preview] Reserved IPv6'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reserved_ipv6_create'
      responses:
        '201':
          $ref: '#/components/responses/reserved_ipv6_create'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"region_slug": "nyc3"}' \
              "https://api.digitalocean.com/v2/reserved_ipv6" 
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                createRequest := &godo.ReservedIPV6CreateRequest{
                    RegionSlug: "nyc3",
                }

                reservedIPV6, _, err := client.ReservedIPV6s.Create(ctx, createRequest)
            }
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "region_slug": nyc3
            }

            resp = client.reserved_ipv6s.create(body=req)
      security:
        - bearer_auth:
            - reserved_ip:create
  /v2/reserved_ipv6/{reserved_ipv6}:
    get:
      operationId: reservedIPv6_get
      summary: '[Public Preview] Retrieve an Existing Reserved IPv6'
      description: >-
        To show information about a reserved IPv6, send a GET request to
        `/v2/reserved_ipv6/$RESERVED_IPV6`.
      tags:
        - '[Public Preview] Reserved IPv6'
      parameters:
        - $ref: '#/components/parameters/reserved_ipv6'
      responses:
        '200':
          $ref: '#/components/responses/reserved_ipv6'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/reserved_ipv6/2409:40d0:f7:1017:74b4:3a96:105e:4c6e" 
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                reservedIP, _, err := client.ReservedIPV6s.Get(ctx, "2409:40d0:f7:1017:74b4:3a96:105e:4c6e")
            }
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            resp =
            client.reserved_ipv6s.get(reserved_ipv6="2409:40d0:f7:1017:74b4:3a96:105e:4c6e")
      security:
        - bearer_auth:
            - reserved_ip:read
    delete:
      operationId: reservedIPv6_delete
      summary: '[Public Preview] Delete a Reserved IPv6'
      description: >
        To delete a reserved IP and remove it from your account, send a DELETE
        request

        to `/v2/reserved_ipv6/$RESERVED_IPV6`.


        A successful request will receive a 204 status code with no body in
        response.

        This indicates that the request was processed successfully.
      tags:
        - '[Public Preview] Reserved IPv6'
      parameters:
        - $ref: '#/components/parameters/reserved_ipv6'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '422':
          $ref: '#/components/responses/unprocessable_entity'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/reserved_ipv6/2409:40d0:f7:1017:74b4:3a96:105e:4c6e"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.ReservedIPV6s.Delete(ctx, "2409:40d0:f7:1017:74b4:3a96:105e:4c6e")
            }
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            resp =
            client.reserved_ipv6s.delete(reserved_ipv6="2409:40d0:f7:1017:74b4:3a96:105e:4c6e")
      security:
        - bearer_auth:
            - reserved_ip:delete
  /v2/reserved_ipv6/{reserved_ipv6}/actions:
    post:
      operationId: reservedIPv6Actions_post
      summary: '[Public Preview] Initiate a Reserved IPv6 Action'
      description: >
        To initiate an action on a reserved IPv6 send a POST request to

        `/v2/reserved_ipv6/$RESERVED_IPV6/actions`. In the JSON body to the
        request,

        set the `type` attribute to on of the supported action types:


        | Action     | Details

        |------------|--------

        | `assign`   | Assigns a reserved IPv6 to a Droplet

        | `unassign` | Unassign a reserved IPv6 from a Droplet
      tags:
        - '[Public Preview] Reserved IPv6 Actions'
      parameters:
        - $ref: '#/components/parameters/reserved_ipv6'
      requestBody:
        description: >
          The `type` attribute set in the request body will specify the action
          that

          will be taken on the reserved IPv6.
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/reserved_ipv6_action_unassign'
                - $ref: '#/components/schemas/reserved_ipv6_action_assign'
              discriminator:
                propertyName: type
                mapping:
                  unassign: '#/components/schemas/reserved_ipv6_action_unassign'
                  assign: '#/components/schemas/reserved_ipv6_action_assign'
      responses:
        '201':
          $ref: '#/components/responses/reserved_ipv6_action'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            # Assign a Reserved IPv6 to a Droplet
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"assign","droplet_id":8219222}' \
              "https://api.digitalocean.com/v2/reserved_ipv6/2409:40d0:f7:1017:74b4:3a96:105e:4c6e/actions"

            # Unassign a Reserved IPv6 from a Droplet
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"unassign"}' \
              "https://api.digitalocean.com/v2/reserved_ipv6/2409:40d0:f7:1017:74b4:3a96:105e:4c6e/actions"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

              // Assign a Reserved IPv6 to a Droplet
                action, _, err := client.ReservedIPV6Actions.Assign(ctx, "2409:40d0:f7:1017:74b4:3a96:105e:4c6e", 8219222)

              // Unassign a Reserved IPv6
               action, _, err := client.ReservedIPV6Actions.Unassign(ctx, "2409:40d0:f7:1017:74b4:3a96:105e:4c6e")  
            }
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            req={
              "type": "unassign"
            }


            resp =
            client.reserved_ipv6s_actions.post(reserved_ipv6="2409:40d0:f7:1017:74b4:3a96:105e:4c6e",
            body=req)
      security:
        - bearer_auth:
            - reserved_ip:update
  /v2/sizes:
    get:
      operationId: sizes_list
      summary: List All Droplet Sizes
      description: >-
        To list all of available Droplet sizes, send a GET request to
        `/v2/sizes`.

        The response will be a JSON object with a key called `sizes`. The value
        of this will be an array of `size` objects each of which contain the
        standard size attributes.
      tags:
        - Sizes
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/all_sizes'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/sizes" 
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                sizes, _, err := client.Sizes.List(ctx, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            sizes = client.sizes.all
            sizes.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.sizes.list()
      security:
        - bearer_auth:
            - sizes:read
            - regions:read
  /v2/snapshots:
    get:
      operationId: snapshots_list
      summary: List All Snapshots
      description: >
        To list all of the snapshots available on your account, send a GET
        request to

        `/v2/snapshots`.


        The response will be a JSON object with a key called `snapshots`. This
        will be

        set to an array of `snapshot` objects, each of which will contain the
        standard

        snapshot attributes.


        ### Filtering Results by Resource Type


        It's possible to request filtered results by including certain query
        parameters.


        #### List Droplet Snapshots


        To retrieve only snapshots based on Droplets, include the
        `resource_type`

        query parameter set to `droplet`. For example,
        `/v2/snapshots?resource_type=droplet`.


        #### List Volume Snapshots


        To retrieve only snapshots based on volumes, include the `resource_type`

        query parameter set to `volume`. For example,
        `/v2/snapshots?resource_type=volume`.
      tags:
        - Snapshots
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/snapshot_resource_type'
      responses:
        '200':
          $ref: '#/components/responses/snapshots'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            # List all snapshots
            curl -X GET \
              -H 'Content-Type: application/json' \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/snapshots?page=1&per_page=1"

            # List all Droplet snapshots
            curl -X GET \
              -H 'Content-Type: application/json' \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/snapshots?page=1&per_page=1&resource_type=droplet"

            # List volume snapshots
            curl -X GET \
              -H 'Content-Type: application/json' \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/snapshots?page=1&per_page=1&resource_type=volume"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }
            // List all snapshots
                snapshots, _, err := client.Snapshots.List(ctx, opt)

            // List all Droplet snapshots
            //  snapshots, _, err := client.Snapshots.ListDroplet(ctx, opt)

            // List all volume snapshots
            //  snapshots, _, err := client.Snapshots.ListVolume(ctx, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            # List all snapshots
            snapshots = client.snapshots.all
            snapshots.each

            # List all Droplet snapshots
            # snapshots = client.snapshots.all(resource_type: 'droplet')
            # snapshots.each

            # List volume snapshots
            # snapshots = client.snapshots.all(resource_type: 'volume')
            # snapshots.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.snapshots.list()
      security:
        - bearer_auth:
            - snapshot:read
  /v2/snapshots/{snapshot_id}:
    get:
      operationId: snapshots_get
      summary: Retrieve an Existing Snapshot
      description: >
        To retrieve information about a snapshot, send a GET request to

        `/v2/snapshots/$SNAPSHOT_ID`.


        The response will be a JSON object with a key called `snapshot`. The
        value of

        this will be an snapshot object containing the standard snapshot
        attributes.
      tags:
        - Snapshots
      parameters:
        - $ref: '#/components/parameters/snapshot_id'
      responses:
        '200':
          $ref: '#/components/responses/snapshots_existing'
        '400':
          $ref: '#/components/responses/not_a_snapshot'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H 'Content-Type: application/json' \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/snapshots/fbe805e8-866b-11e6-96bf-000f53315a41"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                snapshot, _, err := client.Snapshots.Get(ctx, 'fbe805e8-866b-11e6-96bf-000f53315a41')
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            snapshot = client.snapshots.find(id:
            'fbe805e8-866b-11e6-96bf-000f53315a41')
        - lang: cURL
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.snapshots.get(snapshot_id="fbe805e8")
      security:
        - bearer_auth:
            - snapshot:read
            - block_storage_snapshot:read
    delete:
      operationId: snapshots_delete
      summary: Delete a Snapshot
      description: >
        Both Droplet and volume snapshots are managed through the
        `/v2/snapshots/`

        endpoint. To delete a snapshot, send a DELETE request to

        `/v2/snapshots/$SNAPSHOT_ID`.


        A status of 204 will be given. This indicates that the request was
        processed

        successfully, but that no response body is needed.
      tags:
        - Snapshots
      parameters:
        - $ref: '#/components/parameters/snapshot_id'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '400':
          $ref: '#/components/responses/not_a_snapshot'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H 'Content-Type: application/json' \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/snapshots/fbe805e8-866b-11e6-96bf-000f53315a41"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.Snapshots.Delete(ctx, 'fbe805e8-866b-11e6-96bf-000f53315a41')
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.snapshots.delete(id: 'fbe805e8-866b-11e6-96bf-000f53315a41')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.snapshots.delete(snapshot_id="fbe805e8")
      security:
        - bearer_auth:
            - image:delete
            - snapshot:delete
  /v2/tags:
    get:
      operationId: tags_list
      summary: List All Tags
      description: >
        To list all of your tags, you can send a GET request to `/v2/tags`.


        This endpoint will only return tagged resources that you are authorized
        to see

        (e.g. Droplets will only be returned if you have `droplet:read`).
      tags:
        - Tags
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/tags_all'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/tags"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }
                tags, _, err := client.Tags.List(ctx, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            tags = client.tags.all
            tags.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.tags.list()
      security:
        - bearer_auth:
            - tag:read
    post:
      operationId: tags_create
      summary: Create a New Tag
      description: >-
        To create a tag you can send a POST request to `/v2/tags` with a `name`
        attribute.
      tags:
        - Tags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tags'
      responses:
        '201':
          $ref: '#/components/responses/tags_new'
        '400':
          $ref: '#/components/responses/tags_bad_request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"awesome"}' \
              "https://api.digitalocean.com/v2/tags"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                createRequest := &TagCreateRequest{
                    Name: "testing-1",
                }
                client.Tags.Create(ctx, request)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            tag = DropletKit::Tag.new(name: 'awesome')
            client.tags.create(tag)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {"name": "extra-awesome"}

            resp = client.tags.create(body=req)
      security:
        - bearer_auth:
            - tag:create
  /v2/tags/{tag_id}:
    get:
      operationId: tags_get
      summary: Retrieve a Tag
      description: >
        To retrieve an individual tag, you can send a `GET` request to

        `/v2/tags/$TAG_NAME`.


        This endpoint will only return tagged resources that you are authorized
        to see.

        For example, to see tagged Droplets, include the `droplet:read` scope.
      tags:
        - Tags
      parameters:
        - $ref: '#/components/parameters/tag_id'
      responses:
        '200':
          $ref: '#/components/responses/tags_existing'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/tags/awesome"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                tag, _, err := client.Tags.Get(ctx, "awesome")
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.tags.find(name: 'awesome')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.tags.get(tag_id="awesome")
      security:
        - bearer_auth:
            - tag:read
    delete:
      operationId: tags_delete
      summary: Delete a Tag
      description: >-
        A tag can be deleted by sending a `DELETE` request to
        `/v2/tags/$TAG_NAME`. Deleting a tag also untags all the resources that
        have previously been tagged by the Tag
      tags:
        - Tags
      parameters:
        - $ref: '#/components/parameters/tag_id'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/tags/awesome"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                client.Tags.Delete(ctx, "awesome")
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.tags.delete(name: 'awesome')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.tags.delete(tag_id="awesome")
      security:
        - bearer_auth:
            - tag:delete
  /v2/tags/{tag_id}/resources:
    post:
      operationId: tags_assign_resources
      summary: Tag a Resource
      description: >
        Resources can be tagged by sending a POST request to

        `/v2/tags/$TAG_NAME/resources` with an array of json objects containing

        `resource_id` and `resource_type` attributes.


        Currently only tagging of Droplets, Databases, Images, Volumes, and
        Volume

        Snapshots is supported. `resource_type` is expected to be the string
        `droplet`,

        `database`, `image`, `volume` or `volume_snapshot`. `resource_id` is
        expected

        to be the ID of the resource as a string.


        In order to tag a resource, you must have both `tag:create` and
        `<resource type>:update` scopes. For example, 

        to tag a Droplet, you must have `tag:create` and `droplet:update`.
      tags:
        - Tags
      parameters:
        - $ref: '#/components/parameters/tag_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tags_resource'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"resources":[{"resource_id":"9569411","resource_type":"droplet"},{"resource_id":"7555620","resource_type":"image"},{"resource_id":"3d80cb72-342b-4aaa-b92e-4e4abb24a933","resource_type":"volume"}]}' \
              "https://api.digitalocean.com/v2/tags/awesome/resources"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }
                tags, _, err := client.Tags.List(ctx, opt)
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            client.tags.tag_resources(name: 'awesome', resources: [{
            resource_id: '9569411', resource_type: 'droplet' },{ resource_id:
            '7555620', resource_type: 'image' },{ resource_id:
            '3d80cb72-342b-4aaa-b92e-4e4abb24a933', resource_type: 'volume'}])
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "resources": [
                {
                  "resource_id": "9569411",
                  "resource_type": "droplet"
                },
                {
                  "resource_id": "7555620",
                  "resource_type": "image"
                },
                {
                  "resource_id": "3d80cb72-342b-4aaa-b92e-4e4abb24a933",
                  "resource_type": "volume"
                }
              ]
            }

            resp = client.tags.assign_resources(tag_id="awesome", body=req)
      security:
        - bearer_auth:
            - tag:create
    delete:
      operationId: tags_unassign_resources
      summary: Untag a Resource
      description: >
        Resources can be untagged by sending a DELETE request to

        `/v2/tags/$TAG_NAME/resources` with an array of json objects containing

        `resource_id` and `resource_type` attributes.


        Currently only untagging of Droplets, Databases, Images, Volumes, and
        Volume

        Snapshots is supported. `resource_type` is expected to be the string
        `droplet`,

        `database`, `image`, `volume` or `volume_snapshot`. `resource_id` is
        expected

        to be the ID of the resource as a string.


        In order to untag a resource, you must have both `tag:delete` and
        `<resource type>:update` scopes. For example, 

        to untag a Droplet, you must have `tag:delete` and `droplet:update`.
      tags:
        - Tags
      parameters:
        - $ref: '#/components/parameters/tag_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tags_resource'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"resources":[{"resource_id":"9569411","resource_type":"droplet"},{"resource_id":"7555620","resource_type":"image"},{"resource_id":"3d80cb72-342b-4aaa-b92e-4e4abb24a933","resource_type":"volume"}]}' \
              "https://api.digitalocean.com/v2/tags/awesome/resources"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                untagResourcesRequest := &godo.UntagResourcesRequest{
                    Resources: []Resource{{ID: "11457573", Type: "droplet"},{ID: "7555620", Type: "image"},{ID: "3d80cb72-342b-4aaa-b92e-4e4abb24a933", Type: "volume"}},
                }
                client.Tags.UntagResources(ctx, "awesome", untagResourcesRequest)
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            client.tags.untag_resources(name: 'awesome', resources: [{
            resource_id: '9569411', resource_type: 'droplet' },{ resource_id:
            '7555620', resource_type: 'image' },{ resource_id:
            '3d80cb72-342b-4aaa-b92e-4e4abb24a933', resource_type: 'volume' }])
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "resources": [
                {
                  "resource_id": "9569411",
                  "resource_type": "droplet"
                },
                {
                  "resource_id": "7555620",
                  "resource_type": "image"
                },
                {
                  "resource_id": "3d80cb72-342b-4aaa-b92e-4e4abb24a933",
                  "resource_type": "volume"
                }
              ]
            }

            resp = client.tags.unassign_resources(tag_id="awesome", body=req)
      security:
        - bearer_auth:
            - tag:delete
  /v2/volumes:
    get:
      operationId: volumes_list
      summary: List All Block Storage Volumes
      description: >+
        To list all of the block storage volumes available on your account, send
        a GET request to `/v2/volumes`.

        ## Filtering Results

        ### By Region

        The `region` may be provided as query parameter in order to restrict
        results to volumes available in a specific region. For example:
        `/v2/volumes?region=nyc1`

        ### By Name

        It is also possible to list volumes on your account that match a
        specified name. To do so, send a GET request with the volume's name as a
        query parameter to `/v2/volumes?name=$VOLUME_NAME`.

        **Note:** You can only create one volume per region with the same name.

        ### By Name and Region

        It is also possible to retrieve information about a block storage volume
        by name. To do so, send a GET request with the volume's name and the
        region slug for the region it is located in as query parameters to
        `/v2/volumes?name=$VOLUME_NAME&region=nyc1`.


      tags:
        - Block Storage
      parameters:
        - $ref: '#/components/parameters/volume_name'
        - $ref: '#/components/parameters/region'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/volumes'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            # List all volumes
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/volumes?region=nyc1"

            # List volumes filtered by name
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/volumes?name=example"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                volumes, _, err := client.Storage.ListVolumes(ctx, opt)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            volumes = client.volumes.all
            volumes.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.volumes.list(region="nyc3")
      security:
        - bearer_auth:
            - block_storage:read
    post:
      operationId: volumes_create
      summary: Create a New Block Storage Volume
      description: >-
        To create a new volume, send a POST request to `/v2/volumes`.
        Optionally, a `filesystem_type` attribute may be provided in order to
        automatically format the volume's filesystem. Pre-formatted volumes are
        automatically mounted when attached to Ubuntu, Debian, Fedora, Fedora
        Atomic, and CentOS Droplets created on or after April 26, 2018.
        Attaching pre-formatted volumes to Droplets without support for
        auto-mounting is not recommended.
      tags:
        - Block Storage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/volumes_ext4'
                - $ref: '#/components/schemas/volumes_xfs'
            examples:
              ext4 volume:
                value:
                  size_gigabytes: 10
                  name: ext4-example
                  description: Block store for examples
                  region: nyc1
                  filesystem_type: ext4
                  filesystem_label: ext4_volume_01
              xfs volume:
                value:
                  size_gigabytes: 10
                  name: xfs_example
                  description: Block store for examples
                  region: nyc1
                  filesystem_type: xfs
                  filesystem_label: xfs_volume01
              Volume from a snapshot:
                value:
                  size_gigabytes: 10
                  name: snapshot_example
                  snapshot_id: b0798135-fb76-11eb-946a-0a58ac146f33
                  region: nyc1
                  description: A new volume based on a snapshot
                  filesystem_type: ext4
                  filesystem_label: ext4_volume_01
      responses:
        '201':
          $ref: '#/components/responses/volume'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"size_gigabytes":10, "name": "example", "description": "Block store for examples", "region": "nyc1", "filesystem_type": "ext4", "filesystem_label": "example"}' \
              "https://api.digitalocean.com/v2/volumes"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                createRequest := &VolumeCreateRequest{
                    Region:        "nyc1",
                    Name:          "example",
                    Description:   "Block store for examples",
                    SizeGigaBytes: 10,
                }

                volume, _, err := client.Storage.CreateVolume(ctx, createRequest)
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            volume = DropletKit::Volume.new(
              size_gigabytes: 10,
              name: 'Example',
              description: 'Block store for examples',
              region: 'nyc1'
            )
            client.volumes.create(volume)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "size_gigabytes": 10,
              "name": "ext4-example",
              "description": "Block store for examples",
              "region": "nyc1",
              "filesystem_type": "ext4",
              "filesystem_label": "ext4_volume_01"
            }

            resp = client.volumes.create(body=req)
      security:
        - bearer_auth:
            - block_storage:create
    delete:
      operationId: volumes_delete_byName
      summary: Delete a Block Storage Volume by Name
      description: >+
        Block storage volumes may also be deleted by name by sending a DELETE
        request with the volume's **name** and the **region slug** for the
        region it is located in as query parameters to
        `/v2/volumes?name=$VOLUME_NAME&region=nyc1`.

        No response body will be sent back, but the response code will indicate
        success. Specifically, the response code will be a 204, which means that
        the action was successful with no returned body data.

      tags:
        - Block Storage
      parameters:
        - $ref: '#/components/parameters/volume_name'
        - $ref: '#/components/parameters/region'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/volumes?name=example&region=nyc1" 
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.volumes.delete_by_name(name="ext4-ex")
      security:
        - bearer_auth:
            - block_storage:delete
  /v2/volumes/actions:
    post:
      operationId: volumeActions_post
      summary: Initiate A Block Storage Action By Volume Name
      description: >
        To initiate an action on a block storage volume by Name, send a POST
        request to

        `~/v2/volumes/actions`. The body should contain the appropriate

        attributes for the respective action.


        ## Attach a Block Storage Volume to a Droplet


        | Attribute   |
        Details                                                             |

        | ----------- |
        ------------------------------------------------------------------- |

        | type        | This must be
        `attach`                                               |

        | volume_name | The name of the block storage
        volume                                |

        | droplet_id  | Set to the Droplet's
        ID                                             |

        | region      | Set to the slug representing the region where the volume
        is located |


        Each volume may only be attached to a single Droplet. However, up to
        fifteen

        volumes may be attached to a Droplet at a time. Pre-formatted volumes
        will be

        automatically mounted to Ubuntu, Debian, Fedora, Fedora Atomic, and
        CentOS

        Droplets created on or after April 26, 2018 when attached. On older
        Droplets,

        [additional
        configuration](https://docs.digitalocean.com/products/volumes/how-to/mount/)

        is required.


        ## Remove a Block Storage Volume from a Droplet


        | Attribute   |
        Details                                                             |

        | ----------- |
        ------------------------------------------------------------------- |

        | type        | This must be
        `detach`                                               |

        | volume_name | The name of the block storage
        volume                                |

        | droplet_id  | Set to the Droplet's
        ID                                             |

        | region      | Set to the slug representing the region where the volume
        is located |
      tags:
        - Block Storage Actions
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/volume_action_post_attach'
                - $ref: '#/components/schemas/volume_action_post_detach'
              discriminator:
                propertyName: type
                mapping:
                  attach: '#/components/schemas/volume_action_post_attach'
                  detach: '#/components/schemas/volume_action_post_detach'
            examples:
              VolumeActionAttach:
                value:
                  type: attach
                  volume_name: example
                  droplet_id: 11612190
                  region: nyc1
                  tags:
                    - aninterestingtag
              VolumeActionDetach:
                value:
                  type: detach
                  volume_name: example
                  droplet_id: 11612190
                  region: nyc1
      responses:
        '202':
          $ref: '#/components/responses/volumeAction'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            # Attach a volume to a Droplet by name
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type": "attach", "volume_name": "example", "region": "nyc1", "droplet_id": "11612190","tags":["aninterestingtag"] }' \
              "https://api.digitalocean.com/v2/volumes/actions"

            # Remove a volume from a Droplet by name
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type": "detach", "droplet_id": "11612190", "volume_name": "example", "region": "nyc1"}' \
              "https://api.digitalocean.com/v2/volumes/actions"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "type": "attach",
              "volume_name": "example",
              "droplet_id": 11612190,
              "region": "nyc1",
              "tags": [
                "aninterestingtag"
              ]
            }

            resp = client.volume_actions.post(body=req)
      security:
        - bearer_auth:
            - block_storage_action:create
  /v2/volumes/snapshots/{snapshot_id}:
    get:
      operationId: volumeSnapshots_get_byId
      summary: Retrieve an Existing Volume Snapshot
      description: >+
        To retrieve the details of a snapshot that has been created from a
        volume, send a GET request to
        `/v2/volumes/snapshots/$VOLUME_SNAPSHOT_ID`.

      tags:
        - Block Storage
      parameters:
        - $ref: '#/components/parameters/volume_snapshot_id'
      responses:
        '200':
          $ref: '#/components/responses/volumeSnapshot'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H 'Content-Type: application/json' \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/volumes/snapshots/fbe805e8-866b-11e6-96bf-000f53315a41"
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "big-data-snapshot1475261774"
            }

            resp = client.volume_snapshots.get_by_id(snapshot_id="da3aa3a")
      security:
        - bearer_auth:
            - block_storage_snapshot:read
    delete:
      operationId: volumeSnapshots_delete_byId
      summary: Delete a Volume Snapshot
      description: >
        To delete a volume snapshot, send a DELETE request to

        `/v2/volumes/snapshots/$VOLUME_SNAPSHOT_ID`.


        A status of 204 will be given. This indicates that the request was
        processed

        successfully, but that no response body is needed.
      tags:
        - Block Storage
      parameters:
        - $ref: '#/components/parameters/volume_snapshot_id'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H 'Content-Type: application/json' \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/snapshots/fbe805e8-866b-11e6-96bf-000f53315a41"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.Storage.DeleteSnapshot(ctx, "82a48a18-873f-11e6-96bf-000f53315a41")
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.snapshots.delete(id: "fbe805e8-866b-11e6-96bf-000f53315a41")
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "big-data-snapshot1475261774"
            }

            resp = client.volume_snapshots.delete_by_id(snapshot_id="da3aa3a")
      security:
        - bearer_auth:
            - block_storage_snapshot:delete
  /v2/volumes/{volume_id}:
    get:
      operationId: volumes_get
      summary: Retrieve an Existing Block Storage Volume
      description: >+
        To show information about a block storage volume, send a GET request to
        `/v2/volumes/$VOLUME_ID`.

      tags:
        - Block Storage
      parameters:
        - $ref: '#/components/parameters/volume_id'
      responses:
        '200':
          $ref: '#/components/responses/volume'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            # Retrieve an existing volume
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/volumes/7724db7c-e098-11e5-b522-000f53304e51"

            # Retrieve and existing volume by name
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/volumes?name=example&region=nyc1"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                volume, _, err := client.Storage.GetVolume(ctx, "7724db7c-e098-11e5-b522-000f53304e51")
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.volumes.find(id: '7724db7c-e098-11e5-b522-000f53304e51')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.volumes.get(volume_id="7724db7c")
      security:
        - bearer_auth:
            - block_storage:read
    delete:
      operationId: volumes_delete
      summary: Delete a Block Storage Volume
      description: >+
        To delete a block storage volume, destroying all data and removing it
        from your account, send a DELETE request to `/v2/volumes/$VOLUME_ID`.

        No response body will be sent back, but the response code will indicate
        success. Specifically, the response code will be a 204, which means that
        the action was successful with no returned body data.

      tags:
        - Block Storage
      parameters:
        - $ref: '#/components/parameters/volume_id'
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/volumes/7724db7c-e098-11e5-b522-000f53304e51"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                _, err := client.Storage.DeleteVolume(ctx, "7724db7c-e098-11e5-b522-000f53304e51")
            }
        - lang: Ruby
          source: |-
            require 'droplet_kit'
            token = ENV['DIGITALOCEAN_TOKEN']
            client = DropletKit::Client.new(access_token: token)

            client.volumes.delete(id: '7724db7c-e098-11e5-b522-000f53304e51')
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.volumes.delete(volume_id="7724db7c")
      security:
        - bearer_auth:
            - block_storage:delete
  /v2/volumes/{volume_id}/actions:
    get:
      operationId: volumeActions_list
      summary: List All Actions for a Volume
      description: >+
        To retrieve all actions that have been executed on a volume, send a GET
        request to `/v2/volumes/$VOLUME_ID/actions`.

      tags:
        - Block Storage Actions
      parameters:
        - $ref: '#/components/parameters/volume_id'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/volumeActions'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/volumes/7724db7c-e098-11e5-b522-000f53304e51/actions?page=1&per_page=1"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                actions, _, err := client.StorageActions(ctx, "7724db7c-e098-11e5-b522-000f53304e51", opt)
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            actions = client.volume.actions(id:
            '7724db7c-e098-11e5-b522-000f53304e51')

            actions.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.volume_actions.list(volume_id="7724db7c")
      security:
        - bearer_auth:
            - block_storage_action:read
    post:
      operationId: volumeActions_post_byId
      summary: Initiate A Block Storage Action By Volume Id
      description: >
        To initiate an action on a block storage volume by Id, send a POST
        request to

        `~/v2/volumes/$VOLUME_ID/actions`. The body should contain the
        appropriate

        attributes for the respective action.


        ## Attach a Block Storage Volume to a Droplet


        | Attribute  |
        Details                                                             |

        | ---------- |
        ------------------------------------------------------------------- |

        | type       | This must be
        `attach`                                               |

        | droplet_id | Set to the Droplet's
        ID                                             |

        | region     | Set to the slug representing the region where the volume
        is located |


        Each volume may only be attached to a single Droplet. However, up to
        fifteen

        volumes may be attached to a Droplet at a time. Pre-formatted volumes
        will be

        automatically mounted to Ubuntu, Debian, Fedora, Fedora Atomic, and
        CentOS

        Droplets created on or after April 26, 2018 when attached. On older
        Droplets,

        [additional
        configuration](https://docs.digitalocean.com/products/volumes/how-to/mount/)

        is required.


        ## Remove a Block Storage Volume from a Droplet


        | Attribute  |
        Details                                                             |

        | ---------- |
        ------------------------------------------------------------------- |

        | type       | This must be
        `detach`                                               |

        | droplet_id | Set to the Droplet's
        ID                                             |

        | region     | Set to the slug representing the region where the volume
        is located |


        ## Resize a Volume


        | Attribute      |
        Details                                                             |

        | -------------- |
        ------------------------------------------------------------------- |

        | type           | This must be
        `resize`                                               |

        | size_gigabytes | The new size of the block storage volume in GiB
        (1024^3)            |

        | region         | Set to the slug representing the region where the
        volume is located |


        Volumes may only be resized upwards. The maximum size for a volume is
        16TiB.
      tags:
        - Block Storage Actions
      parameters:
        - $ref: '#/components/parameters/volume_id'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/volume_action_post_attach'
                - $ref: '#/components/schemas/volume_action_post_detach'
                - $ref: '#/components/schemas/volume_action_post_resize'
              discriminator:
                propertyName: type
                mapping:
                  attach: '#/components/schemas/volume_action_post_attach'
                  detach: '#/components/schemas/volume_action_post_detach'
                  resize: '#/components/schemas/volume_action_post_resize'
            examples:
              VolumeActionAttach:
                value:
                  type: attach
                  droplet_id: 11612190
                  region: nyc1
                  tags:
                    - aninterestingtag
              VolumeActionDetach:
                value:
                  type: detach
                  droplet_id: 11612190
                  region: nyc1
              VolumeActionResize:
                value:
                  type: resize
                  size_gigabytes: 100
                  region: nyc1
      responses:
        '202':
          $ref: '#/components/responses/volumeAction'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            # Attach a Volume to a Droplet by ID
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type": "attach", "droplet_id": 11612190, "region": "nyc1", "tags":["aninterestingtag"]}' \
              "https://api.digitalocean.com/v2/volumes/7724db7c-e098-11e5-b522-000f53304e51/actions"

            # Remove a Volume from a Droplet by ID
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type": "detach", "droplet_id": "11612190", "region": "nyc1"}' \
              "https://api.digitalocean.com/v2/volumes/7724db7c-e098-11e5-b522-000f53304e51/actions"

            # Resize a Volume
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"type":"resize","size_gigabytes": 100, "region":"nyc1"}' \
              "https://api.digitalocean.com/v2/volumes/7724db7c-e098-11e5-b522-000f53304e51/actions"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

              // Attach a Volume to a Droplet by ID
                action, _, err := client.StorageActions.Attach(ctx, "7724db7c-e098-11e5-b522-000f53304e51", 11612190)

              // Remove a Volume from a Droplet by ID
              // action, _, err := client.StorageActions.Detach(ctx, "7724db7c-e098-11e5-b522-000f53304e51")

              // Resize a Volume
              // action, _, err := client.StorageActions.Resize(ctx, "7724db7c-e098-11e5-b522-000f53304e51", 100, "nyc1")
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            # Attach a Volume to a Droplet by ID

            client.volume_actions.attach(volume_id:'7724db7c-e098-11e5-b522-000f53304e51',
            droplet_id: 11612190, region: 'nyc1'



            # Remove a Volume from a Droplet by ID

            #
            client.volume_actions.detach(volume_id:'7724db7c-e098-11e5-b522-000f53304e51',
            droplet_id: 11612190, region: 'nyc1'
        - lang: Python
          source: >-
            import os

            from pydo import Client


            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))


            req = {
              "type": "attach",
              "droplet_id": 11612190,
              "region": "nyc1",
              "tags": [
                "aninterestingtag"
              ]
            }


            resp = client.volume_actions.post_by_id(volume_id="7724db7c",
            body=req)
      security:
        - bearer_auth:
            - block_storage_action:create
  /v2/volumes/{volume_id}/actions/{action_id}:
    get:
      operationId: volumeActions_get
      summary: Retrieve an Existing Volume Action
      description: >+
        To retrieve the status of a volume action, send a GET request to
        `/v2/volumes/$VOLUME_ID/actions/$ACTION_ID`.

      tags:
        - Block Storage Actions
      parameters:
        - $ref: '#/components/parameters/volume_id'
        - $ref: '#/components/parameters/action_id'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/volumeAction'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/volumes/7724db7c-e098-11e5-b522-000f53304e51/actions/72531856"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                action, _, err := client.StorageActions.Get(ctx, "7724db7c-e098-11e5-b522-000f53304e51", 72531856)
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            client.volume.actions.find(volume_id:
            '7724db7c-e098-11e5-b522-000f53304e51', id: 72531856)
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            resp = client.volume_actions.get(volume_id="7724db7c")
      security:
        - bearer_auth:
            - block_storage_action:read
  /v2/volumes/{volume_id}/snapshots:
    get:
      operationId: volumeSnapshots_list
      summary: List Snapshots for a Volume
      description: >+
        To retrieve the snapshots that have been created from a volume, send a
        GET request to `/v2/volumes/$VOLUME_ID/snapshots`.

      tags:
        - Block Storage
      parameters:
        - $ref: '#/components/parameters/volume_id'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/volumeSnapshots'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H 'Content-Type: application/json' \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/volumes/82a48a18-873f-11e6-96bf-000f53315a41/snapshots?page=1&per_page=1"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                opt := &godo.ListOptions{
                    Page:    1,
                    PerPage: 200,
                }

                volumes, _, err := client.Storage.ListSnapshots(ctx, '82a48a18-873f-11e6-96bf-000f53315a41', opt)
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            snapshots = client.volumes.snapshots(id:
            '82a48a18-873f-11e6-96bf-000f53315a41')

            snapshots.each
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "big-data-snapshot1475261774"
            }

            resp = client.volume_snapshots.list(snapshot_id="da3aa3a")
      security:
        - bearer_auth:
            - block_storage_snapshot:read
    post:
      operationId: volumeSnapshots_create
      summary: Create Snapshot from a Volume
      description: >-
        To create a snapshot from a volume, sent a POST request to
        `/v2/volumes/$VOLUME_ID/snapshots`.
      tags:
        - Block Storage
      parameters:
        - $ref: '#/components/parameters/volume_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: A human-readable name for the volume snapshot.
                  example: big-data-snapshot1475261774
                tags:
                  $ref: '#/components/schemas/tags_array'
              required:
                - name
              type: object
            example:
              name: big-data-snapshot1475261774
      responses:
        '201':
          $ref: '#/components/responses/volumeSnapshot'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H 'Content-Type: application/json' \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{"name":"big-data-snapshot1475261774", "tags":["aninterestingtag"]}' \
              "https://api.digitalocean.com/v2/volumes/82a48a18-873f-11e6-96bf-000f53315a41/snapshots"
        - lang: Go
          source: |-
            import (
                "context"
                "os"

                "github.com/digitalocean/godo"
            )

            func main() {
                token := os.Getenv("DIGITALOCEAN_TOKEN")

                client := godo.NewFromToken(token)
                ctx := context.TODO()

                snapshot, _, err := client.Storage.CreateSnapshot(ctx, &godo.SnapshotCreateRequest{
                  VolumeID:    "82a48a18-873f-11e6-96bf-000f53315a41",
                  Name:        "my snapshot",
                  Description: "my description",
                  Tags:        []string{"one", "two"},
                })
            }
        - lang: Ruby
          source: >-
            require 'droplet_kit'

            token = ENV['DIGITALOCEAN_TOKEN']

            client = DropletKit::Client.new(access_token: token)


            client.volumes.create_snapshot(id:
            "82a48a18-873f-11e6-96bf-000f53315a41", name:
            "big-data-snapshot1475261774")
        - lang: Python
          source: |-
            import os
            from pydo import Client

            client = Client(token=os.environ.get("DIGITALOCEAN_TOKEN"))

            req = {
              "name": "big-data-snapshot1475261774"
            }

            resp = client.volume_snapshots.create(volume_id="da3aa3a", body=req)
      security:
        - bearer_auth:
            - block_storage_snapshot:create
  /v2/vpc_nat_gateways:
    get:
      operationId: vpcnatgateways_list
      summary: List All VPC NAT Gateways
      description: >
        To list all VPC NAT gateways in your team, send a GET request to
        `/v2/vpc_nat_gateways`.

        The response body will be a JSON object with a key of `vpc_nat_gateways`
        containing an array of VPC NAT gateway objects.

        These each contain the standard VPC NAT gateway attributes.
      tags:
        - '[Public Preview] VPC NAT Gateways'
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/vpc_nat_gateway_state'
        - $ref: '#/components/parameters/vpc_nat_gateway_region'
        - $ref: '#/components/parameters/vpc_nat_gateway_type'
        - $ref: '#/components/parameters/vpc_nat_gateway_name'
      responses:
        '200':
          $ref: '#/components/responses/vpc_nat_gateways'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/vpc_nat_gateways?page=1&per_page=10"
      security:
        - bearer_auth:
            - nat_gateway:read
    post:
      operationId: vpcnatgateways_create
      summary: Create a New VPC NAT Gateway
      description: >
        To create a new VPC NAT gateway, send a POST request to
        `/v2/vpc_nat_gateways` setting the required attributes.


        The response body will contain a JSON object with a key called
        `vpc_nat_gateway` containing the standard attributes for the new VPC NAT
        gateway.
      tags:
        - '[Public Preview] VPC NAT Gateways'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vpc_nat_gateway_create'
            examples:
              VPC NAT Gateway Create Request:
                $ref: '#/components/examples/vpc_nat_gateway_create_request'
      responses:
        '202':
          $ref: '#/components/responses/vpc_nat_gateway'
        '401':
          $ref: '#/components/responses/unauthorized'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{
                "name": "test-vpc-nat-gateways",
                "type": "PUBLIC",
                "region": "tor1",
                "size": 1,
                "vpcs": [
                  {
                    "vpc_uuid": "0eb1752f-807b-4562-a077-8018e13ab1fb"
                  }
                ],
                "udp_timeout_seconds": 30,
                "icmp_timeout_seconds": 30,
                "tcp_timeout_seconds": 30
              }' \
              "https://api.digitalocean.com/v2/vpc_nat_gateways"
      security:
        - bearer_auth:
            - nat_gateway:create
            - nat_gateway:read
  /v2/vpc_nat_gateways/{id}:
    get:
      operationId: vpcnatgateways_get
      summary: Retrieve an Existing VPC NAT Gateway
      description: >
        To show information about an individual VPC NAT gateway, send a GET
        request to

        `/v2/vpc_nat_gateways/$VPC_NAT_GATEWAY_ID`.
      tags:
        - '[Public Preview] VPC NAT Gateways'
      parameters:
        - $ref: '#/components/parameters/vpc_nat_gateway_id'
      responses:
        '200':
          $ref: '#/components/responses/vpc_nat_gateway'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X GET \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/vpc_nat_gateways/a21d90fe-dc75-4097-993a-2dc7d1a8a438"
      security:
        - bearer_auth:
            - nat_gateway:read
    put:
      operationId: vpcnatgateways_update
      summary: Update VPC NAT Gateway
      description: >
        To update the configuration of an existing VPC NAT Gateway, send a PUT
        request to

        `/v2/vpc_nat_gateways/$VPC_NAT_GATEWAY_ID`. The request must contain a
        full representation

        of the VPC NAT Gateway including existing attributes. 
      tags:
        - '[Public Preview] VPC NAT Gateways'
      parameters:
        - $ref: '#/components/parameters/vpc_nat_gateway_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vpc_nat_gateway_update'
            examples:
              VPC NAT Gateway Update Request:
                $ref: '#/components/examples/vpc_nat_gateway_update_request'
      responses:
        '200':
          $ref: '#/components/responses/vpc_nat_gateway'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X PUT \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              -d '{
                "name": "test-vpc-nat-gateways",
                "type": "PUBLIC",
                "region": "tor1",
                "size": 5,
                "vpcs": [
                  {
                    "vpc_uuid": "0eb1752f-807b-4562-a077-8018e13ab1fb"
                  }
                ],
                "udp_timeout_seconds": 30,
                "icmp_timeout_seconds": 30,
                "tcp_timeout_seconds": 300
              }' \
              "https://api.digitalocean.com/v2/vpc_nat_gateways/a21d90fe-dc75-4097-993a-2dc7d1a8a438"
      security:
        - bearer_auth:
            - nat_gateway:update
            - nat_gateway:read
    delete:
      operationId: vpcnatgateways_delete
      summary: Delete VPC NAT Gateway
      description: >
        To destroy a VPC NAT Gateway, send a DELETE request to the
        `/v2/vpc_nat_gateways/$VPC_NAT_GATEWAY_ID` endpoint.


        A successful response will include a 202 response code and no content. 
      tags:
        - '[Public Preview] VPC NAT Gateways'
      parameters:
        - $ref: '#/components/parameters/vpc_nat_gateway_id'
      responses:
        '202':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/not_found'
        '429':
          $ref: '#/components/responses/too_many_requests'
        '500':
          $ref: '#/components/responses/server_error'
        default:
          $ref: '#/components/responses/unexpected_error'
      x-codeSamples:
        - lang: cURL
          source: |-
            curl -X DELETE \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
              "https://api.digitalocean.com/v2/vpc_nat_gateways/a21d90fe-dc75-4097-993a-2dc7d1a8a438"
      security:
        - bearer_auth:
            - nat_gateway:delete
components:
  schemas:
    sshKeys:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ssh_key_id'
        fingerprint:
          $ref: '#/components/schemas/ssh_key_fingerprint'
        public_key:
          description: >-
            The entire public key string that was uploaded. Embedded into the
            root user's `authorized_keys` file if you include this key during
            Droplet creation.
          type: string
          example: >-
            ssh-rsa
            AEXAMPLEaC1yc2EAAAADAQABAAAAQQDDHr/jh2Jy4yALcK4JyWbVkPRaWmhck3IgCoeOO3z1e2dBowLh64QAM+Qb72pxekALga2oi4GvT+TlWNhzPH4V
            example
        name:
          $ref: '#/components/schemas/ssh_key_name'
      required:
        - public_key
        - name
    ssh_key_name:
      type: string
      description: >-
        A human-readable display name for this key, used to easily identify the
        SSH keys when they are displayed.
      example: My SSH Public Key
    cdn_endpoint:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: 892071a0-bb95-49bc-8021-3afd67a210bf
          description: >-
            A unique ID that can be used to identify and reference a CDN
            endpoint.
        origin:
          type: string
          format: hostname
          example: static-images.nyc3.digitaloceanspaces.com
          description: >-
            The fully qualified domain name (FQDN) for the origin server which
            provides the content for the CDN. This is currently restricted to a
            Space.
        endpoint:
          type: string
          format: hostname
          readOnly: true
          example: static-images.nyc3.cdn.digitaloceanspaces.com
          description: >-
            The fully qualified domain name (FQDN) from which the CDN-backed
            content is served.
        ttl:
          type: integer
          example: 3600
          enum:
            - 60
            - 600
            - 3600
            - 86400
            - 604800
          default: 3600
          description: >-
            The amount of time the content is cached by the CDN's edge servers
            in seconds. TTL must be one of 60, 600, 3600, 86400, or 604800.
            Defaults to 3600 (one hour) when excluded.
        certificate_id:
          type: string
          format: uuid
          example: 892071a0-bb95-49bc-8021-3afd67a210bf
          description: >-
            The ID of a DigitalOcean managed TLS certificate used for SSL when a
            custom subdomain is provided.
        custom_domain:
          type: string
          format: hostname
          example: static.example.com
          description: >-
            The fully qualified domain name (FQDN) of the custom subdomain used
            with the CDN endpoint.
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2018-03-21T16:02:37Z'
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the CDN endpoint was created.
      required:
        - origin
    update_endpoint:
      type: object
      properties:
        ttl:
          type: integer
          example: 3600
          enum:
            - 60
            - 600
            - 3600
            - 86400
            - 604800
          default: 3600
          description: >-
            The amount of time the content is cached by the CDN's edge servers
            in seconds. TTL must be one of 60, 600, 3600, 86400, or 604800.
            Defaults to 3600 (one hour) when excluded.
        certificate_id:
          type: string
          format: uuid
          example: 892071a0-bb95-49bc-8021-3afd67a210bf
          description: >-
            The ID of a DigitalOcean managed TLS certificate used for SSL when a
            custom subdomain is provided.
        custom_domain:
          type: string
          format: hostname
          example: static.example.com
          description: >-
            The fully qualified domain name (FQDN) of the custom subdomain used
            with the CDN endpoint.
    purge_cache:
      type: object
      properties:
        files:
          type: array
          items:
            type: string
          example:
            - path/to/image.png
            - path/to/css/*
          description: >-
            An array of strings containing the path to the content to be purged
            from the CDN cache.
      required:
        - files
    certificate_request_lets_encrypt:
      title: Let's Encrypt Certificate Request
      allOf:
        - $ref: '#/components/schemas/certificate_create_base'
        - type: object
          properties:
            dns_names:
              type: array
              items:
                type: string
              example:
                - www.example.com
                - example.com
              description: >-
                An array of fully qualified domain names (FQDNs) for which the
                certificate was issued. A certificate covering all subdomains
                can be issued using a wildcard (e.g. `*.example.com`).
          required:
            - dns_names
    certificate_request_custom:
      title: Custom Certificate Request
      allOf:
        - $ref: '#/components/schemas/certificate_create_base'
        - type: object
          properties:
            private_key:
              type: string
              example: |-
                -----BEGIN PRIVATE KEY-----
                MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDBIZMz8pnK6V52
                SVf+CYssOfCQHAx5f0Ou5rYbq3xNh8VHAIYJCQ1QxQIxKSP6+uODSYrb2KWyurP1
                DwGb8OYm0J3syEDtCUQik1cpCzpeNlAZ2f8FzXyYQAqPopxdRpsFz8DtZnVvu86X
                wrE4oFPl9MReICmZfBNWylpV5qgFPoXyJ70ZAsTm3cEe3n+LBXEnY4YrVDRWxA3w
                Z2mzZ03HZ1hHrxK9CMnS829U+8sK+UneZpCO7yLRPuxwhmps0wpK/YuZZfRAKF1F
                ZRnak/SIQ28rnWufmdg16YqqHgl5JOgnb3aslKRvL4dI2Gwnkd2IHtpZnTR0gxFX
                fqqbQwuRAgMBAAECggEBAILLmkW0JzOkmLTDNzR0giyRkLoIROqDpfLtjKdwm95l
                9NUBJcU4vCvXQITKt/NhtnNTexcowg8pInb0ksJpg3UGE+4oMNBXVi2UW5MQZ5cm
                cVkQqgXkBF2YAY8FMaB6EML+0En2+dGR/3gIAr221xsFiXe1kHbB8Nb2c/d5HpFt
                eRpLVJnK+TxSr78PcZA8DDGlSgwvgimdAaFUNO2OqB9/0E9UPyKk2ycdff/Z6ldF
                0hkCLtdYTTl8Kf/OwjcuTgmA2O3Y8/CoQX/L+oP9Rvt9pWCEfuebiOmHJVPO6Y6x
                gtQVEXwmF1pDHH4Qtz/e6UZTdYeMl9G4aNO2CawwcaYECgYEA57imgSOG4XsJLRh
                GGncV9R/xhy4AbDWLtAMzQRX4ktvKCaHWyQV2XK2we/cu29NLv2Y89WmerTNPOU+
                P8+pB31uty2ELySVn15QhKpQClVEAlxCnnNjXYrii5LOM80+lVmxvQwxVd8Yz8nj
                IntyioXNBEnYS7V2RxxFGgFun1cCgYEA1V3W+Uyamhq8JS5EY0FhyGcXdHd70K49
                W1ou7McIpncf9tM9acLS1hkI98rd2T69Zo8mKoV1V2hjFaKUYfNys6tTkYWeZCcJ
                3rW44j9DTD+FmmjcX6b8DzfybGLehfNbCw6n67/r45DXIV/fk6XZfkx6IEGO4ODt
                Nfnvx4TuI1cCgYBACDiKqwSUvmkUuweOo4IuCxyb5Ee8v98P5JIE/VRDxlCbKbpx
                pxEam6aBBQVcDi+n8o0H3WjjlKc6UqbW/01YMoMrvzotxNBLz8Y0QtQHZvR6KoCG
                RKCKstxTcWflzKuknbqN4RapAhNbKBDJ8PMSWfyDWNyaXzSmBdvaidbF1QKBgDI0
                o4oD0Xkjg1QIYAUu9FBQmb9JAjRnW36saNBEQS/SZg4RRKknM683MtoDvVIKJk0E
                sAlfX+4SXQZRPDMUMtA+Jyrd0xhj6zmhbwClvDMr20crF3fWdgcqtft1BEFmsuyW
                JUMe5OWmRkjPI2+9ncDPRAllA7a8lnSV/Crph5N/AoGBAIK249temKrGe9pmsmAo
                QbNuYSmwpnMoAqdHTrl70HEmK7ob6SIVmsR8QFAkH7xkYZc4Bxbx4h1bdpozGB+/
                AangbiaYJcAOD1QyfiFbflvI1RFeHgrk7VIafeSeQv6qu0LLMi2zUbpgVzxt78Wg
                eTuK2xNR0PIM8OI7pRpgyj1I
                -----END PRIVATE KEY-----
              description: >-
                The contents of a PEM-formatted private-key corresponding to the
                SSL certificate.
            leaf_certificate:
              type: string
              example: |-
                -----BEGIN CERTIFICATE-----
                MIIFFjCCA/6gAwIBAgISA0AznUJmXhu08/89ZuSPC/kRMA0GCSqGSIb3DQEBCwUA
                MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD
                ExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNjExMjQwMDIzMDBaFw0x
                NzAyMjIwMDIzMDBaMCQxIjAgBgNVBAMTGWNsb3VkLmFuZHJld3NvbWV0aGluZy5j
                b20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDBIZMz8pnK6V52SVf+
                CYssOfCQHAx5f0Ou5rYbq3xNh8VWHIYJCQ1QxQIxKSP6+uODSYrb2KWyurP1DwGb
                8OYm0J3syEDtCUQik1cpCzpeNlAZ2f8FzXyYQAqPopxdRpsFz8DtZnVvu86XwrE4
                oFPl9MReICmZfBNWylpV5qgFPoXyJ70ZAsTm3cEe3n+LBXEnY4YrVDRWxA3wZ2mz
                Z03HZ1hHrxK9CMnS829U+8sK+UneZpCO7yLRPuxwhmps0wpK/YuZZfRAKF1FZRna
                k/SIQ28rnWufmdg16YqqHgl5JOgnb3aslKRvL4dI2Gwnkd2IHtpZnTR0gxFXfqqb
                QwuRAgMBAAGjggIaMIICFjAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB
                BQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFLsAFcxAhFX1
                MbCnzr9hEO5rL4jqMB8GA1UdIwQYMBaAFKhKamMEfd265tE5t6ZFZe/zqOyhMHAG
                CCsGAQUFBwEBBGQwYjAvBggrBgEFBQcwAYYjaHR0cDovL29jc3AuaW50LXgzLmxl
                dHNlbmNyeXB0Lm9yZy8wLwYIKwYBBQUHMAKGI2h0dHA6Ly9jZXJ0LmludC14My5s
                ZXRzZW5jcnlwdC5vcmcvMCQGA1UdEQQdMBuCGWNsb3VkLmFuZHJld3NvbWV0aGlu
                Zy5jb20wgf4GA1UdIASB9jCB8zAIBgZngQwBAgWrgeYGCysGAQQBgt8TAQEBMIHW
                MCYGCCsGAQUFBwIBFhpodHRwOi8vY3BzLmxldHNlbmNyeXB0Lm9yZzCBqwYIKwYB
                BQUHAgIwgZ4MgZtUaGlzIENlcnRpZmljYXRlIG1heSBvbmx5IGJlIHJlbGllZCB1
                cG9uIGJ5IFJlbHlpbmcgUGFydGllcyBhbmQgb25seSQ2ziBhY2NvcmRhbmNlIHdp
                dGggdGhlIENlcnRpZmljYXRlIFBvbGljeSBmb3VuZCBhdCBodHRwczovL2xldHNl
                bmNyeXB0Lm9yZy9yZXBvc2l0b3J5LzANBgkqhkiG9w0BAQsFAAOCAQEAOZVQvrjM
                PKXLARTjB5XsgfyDN3/qwLl7SmwGkPe+B+9FJpfScYG1JzVuCj/SoaPaK34G4x/e
                iXwlwOXtMOtqjQYzNu2Pr2C+I+rVmaxIrCUXFmC205IMuUBEeWXG9Y/HvXQLPabD
                D3Gdl5+Feink9SDRP7G0HaAwq13hI7ARxkL9p+UIY39X0dV3WOboW2Re8nrkFXJ7
                q9Z6shK5QgpBfsLjtjNsQzaGV3ve1gOg25aTJGearBWOvEjJNA1wGMoKVXOtYwm/
                WyWoVdCQ8HmconcbJB6xc0UZ1EjvzRr5ZIvSa5uHZD0L3m7/kpPWlAlFJ7hHASPu
                UlF1zblDmg2Iaw==
                -----END CERTIFICATE-----
              description: The contents of a PEM-formatted public SSL certificate.
            certificate_chain:
              type: string
              example: |-
                -----BEGIN CERTIFICATE-----
                MIIFFjCCA/6gAwIBAgISA0AznUJmXhu08/89ZuSPC/kRMA0GCSqGSIb3DQEBCwUA
                MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD
                ExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNjExMjQwMDIzMDBaFw0x
                NzAyMjIwMDIzMDBaMCQxIjAgBgNVBAMTGWNsb3VkLmFuZHJld3NvbWV0aGluZy5j
                b20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDBIZMz7tnK6V52SVf+
                CYssOfCQHAx5f0Ou5rYbq3xNh8VHAIYJCQ1QxQIxKSP6+uODSYrb2KWyurP1DwGb
                8OYm0J3syEDtCUQik1cpCzpeNlAZ2f8FzXyYQAqPopxdRpsFz8DtZnVvu86XwrE4
                oFPl9MReICmZfBNWylpV5qgFPoXyJ70ZAsTm3cEe3n+LBXEnY4YrVDRWxA3wZ2mz
                Z03HZ1hHrxK9CMnS829U+8sK+UneZpCO7yLRPuxwhmps0wpK/YuZZfRAKF1FZRna
                k/SIQ28rnWufmdg16YqqHgl5JOgnb3aslKRvL4dI2Gwnkd2IHtpZnTR0gxFXfqqb
                QwuRAgMBAAGjggIaMIICFjAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB
                BQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFLsAFcxAhFX1
                MbCnzr9hEO5rL4jqMB8GA1UdIwQYMBaAFKhKamMEfd265tE5t6ZFZe/zqOyhMHAG
                CCsGAQUFBwEBBGQwYjAvBggrBgEFBQcwAYYjaHR0cDovL29jc3AuaW50LXgzLmxl
                dHNlbmNyeXB0Lm9yZy8wLwYIKwYBBQUHMAKGI2h0dHA6Ly9jZXJ0LmludC14My5s
                ZXRzZW5jcnlwdC5vcmcvMCQGA1UdEQQdMBuCGWNsb3VkLmFuZHJld3NvbWV0aGlu
                Zy5jb20wgf4GA1UdIASB9jCB8zAIBgZngQwBAgEwgeWECysGAQQBgt8TAQEBMIHW
                MCYGCCsGAQUFBwIBFhpodHRwOi8vY3BzLmxldHNlbmNyeXB0Lm9yZzCBqwYIKwYB
                BQUHAgIwgZ4MgZtUaGlzIENlcnRpZmljYXRlIG1heSBvbmx5IGJlIHJlbGllZCB1
                cG9uIGJ5IFJlbHlpbmcgUGFydGllcyBhbmQgb25seSQ2ziBhY2NvcmRhbmNlIHdp
                dGggdGhlIENlcnRpZmljYXRlIFBvbGljeSBmb3VuZCBhdCBsdHRwczovL2xldHNl
                bmNyeXB0Lm9yZy9yZXBvc2l0b3J5LzANBgkqhkiG9w0BAQsFAAOCAQEAOZVQvrjM
                PKXLARTjB5XsgfyDN3/qwLl7SmwGkPe+B+9FJpfScYG1JzVuCj/SoaPaK34G4x/e
                iXwlwOXtMOtqjQYzNu2Pr2C+I+rVmaxIrCUXFmC205IMuUBEeWXG9Y/HvXQLPabD
                D3Gdl5+Feink9SDRP7G0HaAwq13hI7ARxkL3o+UIY39X0dV3WOboW2Re8nrkFXJ7
                q9Z6shK5QgpBfsLjtjNsQzaGV3ve1gOg25aTJGearBWOvEjJNA1wGMoKVXOtYwm/
                WyWoVdCQ8HmconcbJB6xc0UZ1EjvzRr5ZIvSa5uHZD0L3m7/kpPWlAlFJ7hHASPu
                UlF1zblDmg2Iaw==
                -----END CERTIFICATE-----
                -----BEGIN CERTIFICATE-----
                MIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc2oLheynCDANBgkqhkiG9w0BAQsFADA/
                MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT
                DkRTVCBSb290IENBIFgzMB4XDTE2MDMxNzE2NDA0NloXDTIxMDMxNzE2NDA0Nlow
                SjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUxldCdzIEVuY3J5cHQxIzAhBgNVBAMT
                GkxldCdzIEVuY3J5cHQgQXV0aG9yaXR5IFgzMIIBIjANBgkqhkiG9w0BAQEFAAOC
                AQ8AMIIBCgKCAQEAnNMM8FrlLsd3cl03g7NoYzDq1zUmGSXhvb418XCSL7e4S0EF
                q6meNQhY7LEqxGiHC6PjdeTm86dicbp5gWAf15Gan/PQeGdxyGkOlZHP/uaZ6WA8
                SMx+yk13EiSdRxta67nsHjcAHJyse6cF6s5K671B5TaYucv9bTyWaN8jKkKQDIZ0
                Z8h/pZq4UmEUEz9l6YKHy9v6Dlb2honzhT+Xhq+w3Brvaw2VFn3EK6BlspkENnWA
                a6xK8xuQSXgvopZPKiAlKQTGdMDQMc2PMTiVFrqoM7hD8bEfwzB/onkxEz0tNvjj
                /PIzark5McWvxI0NHWQWM6r6hCm21AvA2H3DkwIPOIUo4IBfTCCAXkwEgYDVR0T
                AQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwfwYIKwYBBQUHAQEEczBxMDIG
                CCsGAQUFBzABhiZodHRwOi8vaXNyZy50cnVzdGlkLm9jc3AuaWRlbnRydXN0LmNv
                bTA7BggrBgEFBQcwAoYvaHR0cDovL2FwcHMuaWRlbnRydXN0LmNvbS9yb290cy9k
                c3Ryb290Y2F4My5wN2MwHwYDVR0jBBgwFoAUxKexpHsscfrb4UuQdf/EFWCFiRAw
                VAYDVR0gBE0wSzAIBgZngQwBAgEwPwYLKwYBBAGC3xMBAQEwMDAuBggrBgEFBQcC
                ARYiaHR0cDovL2Nwcy5yb290LXgxLmxldHNlbmNyeXB0Lm9yZzA8BgNVHR8ENTAz
                MDGgL6AthitodHRwOi8vY3JsLmlkZW50cnVzdC5jb20vRFNUUk9PVENBWDNDUkwu
                Y3JsMB0GA1UdDgQWBBSoSmpjBH3duubRObemRWXv86jsoTANBgkqhkiG9w0BAQsF
                AAOCAQEA3TPXEfNjWDjdGBX7CVW+dla5cEilaUcne8IkCJLxWh9KEik3JHRRHGJo
                uM2VcGfl96S8TihRzZvoroed6ti6WqEBmtzw3Wodatg+VyOeph4EYpr/1wXKtx8/
                wApIvJSwtmVi4MFU5aMqrSDE6ea73Mj2tcMyo5jMd6jmeWUHK8so/joWUoHOUgwu
                X4Po1QYz+3dszkDqMp4fklxBwXRsW10KXzPMTZ+sOPAveyxindmjkW8lGy+QsRlG
                PfZ+G6Z6h7mjem0Y+iWlkYcV4PIWL1iwBi8saCbGS5jN2p8M+X+Q7UNKEkROb3N6
                KOqkqm57TH2H3eDJAkSnh6/DNFu0Qg==
                -----END CERTIFICATE-----
              description: >-
                The full PEM-formatted trust chain between the certificate
                authority's certificate and your domain's SSL certificate.
          required:
            - private_key
            - leaf_certificate
    domain:
      type: object
      properties:
        name:
          type: string
          description: >-
            The name of the domain itself. This should follow the standard
            domain format of domain.TLD. For instance, `example.com` is a valid
            domain name.
          example: example.com
        ip_address:
          type: string
          writeOnly: true
          description: >-
            This optional attribute may contain an IP address. When provided, an
            A record will be automatically created pointing to the apex domain.
          example: 192.0.2.1
        ttl:
          type: integer
          readOnly: true
          nullable: true
          description: >-
            This value is the time to live for the records on this domain, in
            seconds. This defines the time frame that clients can cache queried
            information before a refresh should be requested.
          example: 1800
        zone_file:
          type: string
          readOnly: true
          nullable: true
          description: >-
            This attribute contains the complete contents of the zone file for
            the selected domain. Individual domain record resources should be
            used to get more granular control over records. However, this
            attribute can also be used to get information about the SOA record,
            which is created automatically and is not accessible as an
            individual record resource.
          example: >
            $ORIGIN example.com.

            $TTL 1800

            example.com. IN SOA ns1.digitalocean.com. hostmaster.example.com.
            1415982609 10800 3600 604800 1800

            example.com. 1800 IN NS ns1.digitalocean.com.

            example.com. 1800 IN NS ns2.digitalocean.com.

            example.com. 1800 IN NS ns3.digitalocean.com.

            example.com. 1800 IN A 1.2.3.4
    domain_record_a:
      allOf:
        - $ref: '#/components/schemas/domain_record'
        - required:
            - type
            - name
            - data
    domain_record_aaaa:
      allOf:
        - $ref: '#/components/schemas/domain_record'
        - required:
            - type
            - name
            - data
    domain_record_caa:
      allOf:
        - $ref: '#/components/schemas/domain_record'
        - required:
            - type
            - name
            - data
            - flags
            - tag
    domain_record_cname:
      allOf:
        - $ref: '#/components/schemas/domain_record'
        - required:
            - type
            - name
            - data
    domain_record_mx:
      allOf:
        - $ref: '#/components/schemas/domain_record'
        - required:
            - type
            - data
            - priority
    domain_record_ns:
      allOf:
        - $ref: '#/components/schemas/domain_record'
        - required:
            - type
            - name
            - data
            - flags
            - tag
    domain_record_soa:
      allOf:
        - $ref: '#/components/schemas/domain_record'
        - required:
            - type
            - ttl
    domain_record_srv:
      allOf:
        - $ref: '#/components/schemas/domain_record'
        - required:
            - type
            - name
            - data
            - priority
            - port
            - flags
            - tag
    domain_record_txt:
      allOf:
        - $ref: '#/components/schemas/domain_record'
        - required:
            - type
            - name
            - data
            - flags
            - tag
    domain_record:
      type: object
      required:
        - type
      properties:
        id:
          type: integer
          description: A unique identifier for each domain record.
          example: 28448429
          readOnly: true
        type:
          type: string
          description: 'The type of the DNS record. For example: A, CNAME, TXT, ...'
          example: NS
        name:
          type: string
          description: The host name, alias, or service being defined by the record.
          example: '@'
        data:
          type: string
          description: >-
            Variable data depending on record type. For example, the "data"
            value for an A record would be the IPv4 address to which the domain
            will be mapped. For a CAA record, it would contain the domain name
            of the CA being granted permission to issue certificates.
          example: ns1.digitalocean.com
        priority:
          type: integer
          description: The priority for SRV and MX records.
          nullable: true
          example: null
        port:
          type: integer
          description: The port for SRV records.
          nullable: true
          example: null
        ttl:
          type: integer
          description: >-
            This value is the time to live for the record, in seconds. This
            defines the time frame that clients can cache queried information
            before a refresh should be requested.
          example: 1800
        weight:
          type: integer
          description: The weight for SRV records.
          nullable: true
          example: null
        flags:
          type: integer
          description: An unsigned integer between 0-255 used for CAA records.
          nullable: true
          example: null
        tag:
          type: string
          description: >-
            The parameter tag for CAA records. Valid values are "issue",
            "issuewild", or "iodef"
          nullable: true
          example: null
    droplet_single_create:
      title: Single Droplet Request
      allOf:
        - type: object
          properties:
            name:
              type: string
              maxLength: 255
              pattern: ^[a-zA-Z0-9]?[a-z0-9A-Z.\-]*[a-z0-9A-Z]$
              example: example.com
              description: >-
                The human-readable string you wish to use when displaying the
                Droplet name. The name, if set to a domain name managed in the
                DigitalOcean DNS management system, will configure a PTR record
                for the Droplet. The name set during creation will also
                determine the hostname for the Droplet in its internal
                configuration.
          required:
            - name
        - $ref: '#/components/schemas/droplet_create'
    droplet_multi_create:
      title: Multiple Droplet Request
      allOf:
        - type: object
          properties:
            names:
              type: array
              items:
                type: string
                maxLength: 255
                pattern: ^[a-zA-Z0-9]?[a-z0-9A-Z.\-]*[a-z0-9A-Z]$
              example:
                - sub-01.example.com
                - sub-02.example.com
              description: >-
                An array of human human-readable strings you wish to use when
                displaying the Droplet name. Each name, if set to a domain name
                managed in the DigitalOcean DNS management system, will
                configure a PTR record for the Droplet. Each name set during
                creation will also determine the hostname for the Droplet in its
                internal configuration.
          required:
            - names
        - $ref: '#/components/schemas/droplet_create'
    droplet_action:
      required:
        - type
      type: object
      description: Specifies the action that will be taken on the Droplet.
      properties:
        type:
          type: string
          enum:
            - enable_backups
            - disable_backups
            - reboot
            - power_cycle
            - shutdown
            - power_off
            - power_on
            - restore
            - password_reset
            - resize
            - rebuild
            - rename
            - change_kernel
            - enable_ipv6
            - snapshot
          example: reboot
          description: The type of action to initiate for the Droplet.
    droplet_action_enable_backups:
      allOf:
        - $ref: '#/components/schemas/droplet_action'
        - type: object
          properties:
            backup_policy:
              allOf:
                - $ref: '#/components/schemas/droplet_backup_policy'
                - description: >-
                    An object specifying the backup policy for the Droplet. If
                    omitted, the backup plan will default to daily.
      example:
        type: enable_backups
        backup_policy:
          plan: daily
          hour: 20
    droplet_action_change_backup_policy:
      allOf:
        - $ref: '#/components/schemas/droplet_action'
        - type: object
          properties:
            backup_policy:
              allOf:
                - $ref: '#/components/schemas/droplet_backup_policy'
                - description: An object specifying the backup policy for the Droplet.
      required:
        - backup_policy
      example:
        type: enable_backups
        backup_policy:
          plan: weekly
          day: SUN
          hour: 20
    droplet_action_restore:
      allOf:
        - $ref: '#/components/schemas/droplet_action'
        - type: object
          properties:
            image:
              type: integer
              example: 12389723
              description: >-
                The ID of a backup of the current Droplet instance to restore
                from.
    droplet_action_resize:
      allOf:
        - $ref: '#/components/schemas/droplet_action'
        - type: object
          properties:
            disk:
              type: boolean
              example: true
              description: >-
                When `true`, the Droplet's disk will be resized in addition to
                its RAM and CPU. This is a permanent change and cannot be
                reversed as a Droplet's disk size cannot be decreased.
            size:
              type: string
              example: s-2vcpu-2gb
              description: >-
                The slug identifier for the size to which you wish to resize the
                Droplet.
    droplet_action_rebuild:
      allOf:
        - $ref: '#/components/schemas/droplet_action'
        - type: object
          properties:
            image:
              oneOf:
                - type: string
                - type: integer
              example: ubuntu-20-04-x64
              description: >-
                The image ID of a public or private image or the slug identifier
                for a public image. The Droplet will be rebuilt using this image
                as its base.
    droplet_action_rename:
      allOf:
        - $ref: '#/components/schemas/droplet_action'
        - type: object
          properties:
            name:
              type: string
              example: nifty-new-name
              description: The new name for the Droplet.
    droplet_action_change_kernel:
      allOf:
        - $ref: '#/components/schemas/droplet_action'
        - type: object
          properties:
            kernel:
              type: integer
              example: 12389723
              description: >-
                A unique number used to identify and reference a specific
                kernel.
    droplet_action_snapshot:
      allOf:
        - $ref: '#/components/schemas/droplet_action'
        - type: object
          properties:
            name:
              type: string
              example: Nifty New Snapshot
              description: The name to give the new snapshot of the Droplet.
    selective_destroy_associated_resource:
      type: object
      description: >-
        An object containing information about a resource to be scheduled for
        deletion.
      properties:
        floating_ips:
          type: array
          deprecated: true
          description: >-
            An array of unique identifiers for the floating IPs to be scheduled
            for deletion.
          items:
            type: string
          example:
            - '6186916'
        reserved_ips:
          type: array
          description: >-
            An array of unique identifiers for the reserved IPs to be scheduled
            for deletion.
          items:
            type: string
          example:
            - '6186916'
        snapshots:
          type: array
          description: >-
            An array of unique identifiers for the snapshots to be scheduled for
            deletion.
          items:
            type: string
          example:
            - '61486916'
        volumes:
          type: array
          description: >-
            An array of unique identifiers for the volumes to be scheduled for
            deletion.
          items:
            type: string
          example:
            - ba49449a-7435-11ea-b89e-0a58ac14480f
        volume_snapshots:
          type: array
          description: >-
            An array of unique identifiers for the volume snapshots to be
            scheduled for deletion.
          items:
            type: string
          example:
            - edb0478d-7436-11ea-86e6-0a58ac144b91
    autoscale_pool_create:
      type: object
      properties:
        name:
          example: my-autoscale-pool
          type: string
          description: >-
            The human-readable name of the autoscale pool. This field cannot be
            updated
        config:
          oneOf:
            - $ref: '#/components/schemas/autoscale_pool_static_config'
            - $ref: '#/components/schemas/autoscale_pool_dynamic_config'
          type: object
          description: >-
            The scaling configuration for an autoscale pool, which is how the
            pool scales up and down (either by resource utilization or static
            configuration).
        droplet_template:
          $ref: '#/components/schemas/autoscale_pool_droplet_template'
      required:
        - name
        - config
        - droplet_template
    firewall:
      type: object
      properties:
            id:
              type: string
              description: >-
                A unique ID that can be used to identify and reference a
                firewall.
              readOnly: true
              example: bb4b2611-3d72-467b-8602-280330ecd65c
            status:
              type: string
              description: >-
                A status string indicating the current state of the firewall.
                This can be "waiting", "succeeded", or "failed".
              enum:
                - waiting
                - succeeded
                - failed
              readOnly: true
              example: waiting
            created_at:
              type: string
              format: date-time
              description: >-
                A time value given in ISO8601 combined date and time format that
                represents when the firewall was created.
              readOnly: true
              example: '2020-05-23T21:24:00Z'
            pending_changes:
              type: array
              description: >-
                An array of objects each containing the fields "droplet_id",
                "removing", and "status". It is provided to detail exactly which
                Droplets are having their security policies updated. When empty,
                all changes have been successfully applied.
              items:
                type: object
                properties:
                  droplet_id:
                    type: integer
                    example: 8043964
                  removing:
                    type: boolean
                    example: false
                  status:
                    type: string
                    example: waiting
              readOnly: true
              example:
                - droplet_id: 8043964
                  removing: false
                  status: waiting
            name:
              type: string
              description: >-
                A human-readable name for a firewall. The name must begin with
                an alphanumeric character. Subsequent characters must either be
                alphanumeric characters, a period (.), or a dash (-).
              pattern: ^[a-zA-Z0-9][a-zA-Z0-9\.-]+$
              example: firewall
            droplet_ids:
              type: array
              description: >-
                An array containing the IDs of the Droplets assigned to the
                firewall. <br><br>Requires `droplet:read` scope.
              nullable: true
              items:
                type: integer
              example:
                - 8043964
            tags:
              allOf:
                - $ref: '#/components/schemas/existing_tags_array'
                - description: >-
                    An array containing the names of the Tags assigned to the
                    firewall. <br><br>Requires `tag:read` scope.
                  example: gateway
            inbound_rules:
              nullable: true
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/firewall_rule_base'
                  - properties:
                      sources:
                        allOf:
                          - $ref: '#/components/schemas/firewall_rule_target'
                          - description: >-
                              An object specifying locations from which inbound
                              traffic will be accepted.
                    required:
                      - sources
                    type: object
            outbound_rules:
              nullable: true
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/firewall_rule_base'
                  - properties:
                      destinations:
                        allOf:
                          - $ref: '#/components/schemas/firewall_rule_target'
                          - description: >-
                              An object specifying locations to which outbound
                              traffic that will be allowed.
                    required:
                      - destinations
                    type: object
    existing_tags_array:
      type: array
      items:
        type: string
      nullable: true
      description: >-
        A flat array of tag names as strings to be applied to the resource. Tag
        names must exist in order to be referenced in a request.
        <br><br>Requires `tag:create` and `tag:read` scopes.
      example:
        - base-image
        - prod
    firewall_rules:
      type: object
      properties:
        inbound_rules:
          nullable: true
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/firewall_rule_base'
              - properties:
                  sources:
                    allOf:
                      - $ref: '#/components/schemas/firewall_rule_target'
                      - description: >-
                          An object specifying locations from which inbound
                          traffic will be accepted.
                required:
                  - sources
                type: object
        outbound_rules:
          nullable: true
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/firewall_rule_base'
              - properties:
                  destinations:
                    allOf:
                      - $ref: '#/components/schemas/firewall_rule_target'
                      - description: >-
                          An object specifying locations to which outbound
                          traffic that will be allowed.
                required:
                  - destinations
                type: object
    image_new_custom:
      type: object
      allOf:
        - $ref: '#/components/schemas/image_update'
        - properties:
            url:
              type: string
              description: >-
                A URL from which the custom Linux virtual machine image may be
                retrieved.  The image it points to must be in the raw, qcow2,
                vhdx, vdi, or vmdk format.  It may be compressed using gzip or
                bzip2 and must be smaller than 100 GB after being decompressed.
              example: >-
                http://cloud-images.ubuntu.com/minimal/releases/bionic/release/ubuntu-18.04-minimal-cloudimg-amd64.img
            region:
              $ref: '#/components/schemas/region_slug'
            tags:
              $ref: '#/components/schemas/tags_array'
          type: object
      required:
        - name
        - url
        - region
      example:
        name: ubuntu-18.04-minimal
        url: >-
          http://cloud-images.ubuntu.com/minimal/releases/bionic/release/ubuntu-18.04-minimal-cloudimg-amd64.img
        distribution: Ubuntu
        region: nyc3
        description: Cloud-optimized image w/ small footprint
        tags:
          - base-image
          - prod
    image_update:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/image_name'
        distribution:
          $ref: '#/components/schemas/distribution'
        description:
          $ref: '#/components/schemas/image_description'
    image_action_base:
      type: object
      properties:
        type:
          type: string
          description: >-
            The action to be taken on the image. Can be either `convert` or
            `transfer`.
          enum:
            - convert
            - transfer
          example: convert
      required:
        - type
    image_action_transfer:
      allOf:
        - $ref: '#/components/schemas/image_action_base'
        - type: object
          properties:
            region:
              $ref: '#/components/schemas/region_slug'
          required:
            - type
            - region
    load_balancer_create:
      oneOf:
        - title: Assign Droplets by ID
          allOf:
            - type: object
              properties:
                droplet_ids:
                  type: array
                  items:
                    type: integer
                  example:
                    - 3164444
                    - 3164445
                  description: >-
                    An array containing the IDs of the Droplets assigned to the
                    load balancer.
            - type: object
              properties:
                region:
                  $ref: '#/components/schemas/region_slug'
            - $ref: '#/components/schemas/load_balancer_base'
          required:
            - droplet_ids
            - region
        - title: Assign Droplets by Tag
          allOf:
            - type: object
              properties:
                tag:
                  type: string
                  example: prod:web
                  description: >-
                    The name of a Droplet tag corresponding to Droplets assigned
                    to the load balancer.
            - type: object
              properties:
                region:
                  $ref: '#/components/schemas/region_slug'
            - $ref: '#/components/schemas/load_balancer_base'
          required:
            - tag
            - region
    forwarding_rule:
      type: object
      description: An object specifying a forwarding rule for a load balancer.
      properties:
        entry_protocol:
          type: string
          enum:
            - http
            - https
            - http2
            - http3
            - tcp
            - udp
          example: https
          description: >
            The protocol used for traffic to the load balancer. The possible
            values are: `http`, `https`, `http2`, `http3`, `tcp`, or `udp`. If
            you set the  `entry_protocol` to `udp`, the `target_protocol` must
            be set to `udp`.  When using UDP, the load balancer requires that
            you set up a health  check with a port that uses TCP, HTTP, or HTTPS
            to work properly.
        entry_port:
          type: integer
          example: 443
          description: >-
            An integer representing the port on which the load balancer instance
            will listen.
        target_protocol:
          type: string
          enum:
            - http
            - https
            - http2
            - tcp
            - udp
          example: http
          description: >
            The protocol used for traffic from the load balancer to the backend
            Droplets. The possible values are: `http`, `https`, `http2`, `tcp`,
            or `udp`. If you set the `target_protocol` to `udp`, the
            `entry_protocol` must be set to  `udp`. When using UDP, the load
            balancer requires that you set up a health  check with a port that
            uses TCP, HTTP, or HTTPS to work properly.
        target_port:
          type: integer
          example: 80
          description: >-
            An integer representing the port on the backend Droplets to which
            the load balancer will send traffic.
        certificate_id:
          type: string
          example: 892071a0-bb95-49bc-8021-3afd67a210bf
          description: The ID of the TLS certificate used for SSL termination if enabled.
        tls_passthrough:
          type: boolean
          example: false
          description: >-
            A boolean value indicating whether SSL encrypted traffic will be
            passed through to the backend Droplets.
      required:
        - entry_protocol
        - entry_port
        - target_protocol
        - target_port
    reserved_ip_create:
      oneOf:
        - title: Assign to Droplet
          type: object
          properties:
            droplet_id:
              type: integer
              example: 2457247
              description: The ID of the Droplet that the reserved IP will be assigned to.
          required:
            - droplet_id
        - title: Reserve to Region
          type: object
          properties:
            region:
              type: string
              example: nyc3
              description: >-
                The slug identifier for the region the reserved IP will be
                reserved to.
            project_id:
              type: string
              format: uuid
              example: 746c6152-2fa2-11ed-92d3-27aaa54e4988
              description: >-
                The UUID of the project to which the reserved IP will be
                assigned.
          required:
            - region
    reserved_ip_action_unassign:
      allOf:
        - $ref: '#/components/schemas/reserved_ip_action_type'
        - type: object
          required:
            - type
    reserved_ip_action_assign:
      allOf:
        - $ref: '#/components/schemas/reserved_ip_action_type'
        - type: object
          required:
            - type
            - droplet_id
          properties:
            droplet_id:
              type: integer
              example: 758604968
              description: The ID of the Droplet that the reserved IP will be assigned to.
    reserved_ipv6_create:
      title: Reserve to Region
      type: object
      properties:
        region_slug:
          type: string
          example: nyc3
          description: >-
            The slug identifier for the region the reserved IPv6 will be
            reserved to.
      required:
        - region_slug
    reserved_ipv6_action_unassign:
      allOf:
        - $ref: '#/components/schemas/reserved_ipv6_action_type'
        - type: object
          required:
            - type
    reserved_ipv6_action_assign:
      allOf:
        - $ref: '#/components/schemas/reserved_ipv6_action_type'
        - type: object
          required:
            - type
            - droplet_id
          properties:
            droplet_id:
              type: integer
              example: 758604968
              description: >-
                The ID of the Droplet that the reserved IPv6 will be assigned
                to.
    tags:
      type: object
      description: >-
        A tag is a label that can be applied to a resource (currently Droplets,
        Images, Volumes, Volume Snapshots, and Database clusters) in order to
        better organize or facilitate the lookups and actions on it.

        Tags have two attributes: a user defined `name` attribute and an
        embedded `resources` attribute with information about resources that
        have been tagged.
      properties:
        name:
          type: string
          description: >
            The name of the tag. Tags may contain letters, numbers, colons,
            dashes, and underscores.

            There is a limit of 255 characters per tag.


            **Note:** Tag names are case stable, which means the capitalization
            you use when you first create a tag is canonical.


            When working with tags in the API, you must use the tag's canonical
            capitalization. For example, if you create a tag named "PROD", the
            URL to add that tag to a resource would be
            `https://api.digitalocean.com/v2/tags/PROD/resources` (not
            `/v2/tags/prod/resources`).


            Tagged resources in the control panel will always display the
            canonical capitalization. For example, if you create a tag named
            "PROD", you can tag resources in the control panel by entering
            "prod". The tag will still display with its canonical
            capitalization, "PROD".
          pattern: ^[a-zA-Z0-9_\-\:]+$
          maxLength: 255
          example: extra-awesome
        resources:
          type: object
          description: >
            An embedded object containing key value pairs of resource type and
            resource statistics.

            It also includes a count of the total number of resources tagged
            with the current tag as well as a `last_tagged_uri` attribute set to
            the last resource tagged with the current tag.


            This will only include resources that you are authorized to see. For
            example, to see tagged Droplets, include the `droplet:read` scope.
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/tags_metadata'
            - properties:
                droplets:
                  allOf:
                    - description: >-
                        Droplets that are tagged with the specified
                        tag.<br>Requires `droplet:read` scope.
                    - $ref: '#/components/schemas/tags_metadata'
                imgages:
                  allOf:
                    - description: >-
                        Images that are tagged with the specified
                        tag.<br>Requires `image:read` scope.
                    - $ref: '#/components/schemas/tags_metadata'
                volumes:
                  allOf:
                    - description: >-
                        Volumes that are tagged with the specified
                        tag.<br>Requires `block_storage:read` scope.
                    - $ref: '#/components/schemas/tags_metadata'
                volume_snapshots:
                  allOf:
                    - description: >-
                        Volume Snapshots that are tagged with the specified
                        tag.<br>Requires `block_storage_snapshot:read` scope.
                    - $ref: '#/components/schemas/tags_metadata'
                databases:
                  allOf:
                    - description: >-
                        Databases that are tagged with the specified
                        tag.<br>Requires `database:read` scope.
                    - $ref: '#/components/schemas/tags_metadata'
              type: object
          example:
            count: 5
            last_tagged_uri: https://api.digitalocean.com/v2/images/7555620
            droplets:
              count: 1
              last_tagged_uri: https://api.digitalocean.com/v2/droplets/3164444
            images:
              count: 1
              last_tagged_uri: https://api.digitalocean.com/v2/images/7555620
            volumes:
              count: 1
              last_tagged_uri: >-
                https://api.digitalocean.com/v2/volumes/3d80cb72-342b-4aaa-b92e-4e4abb24a933
            volume_snapshots:
              count: 1
              last_tagged_uri: >-
                https://api.digitalocean.com/v2/snapshots/1f6f46e8-6b60-11e9-be4e-0a58ac144519
            databases:
              count: 1
              last_tagged_uri: >-
                https://api.digitalocean.com/v2/databases/b92438f6-ba03-416c-b642-e9236db91976
    tags_resource:
      type: object
      properties:
        resources:
          description: >
            An array of objects containing resource_id and resource_type 

            attributes.


            This response will only include resources that you are authorized to
            see.

            For example, to see Droplets, include the `droplet:read` scope.
          type: array
          items:
            properties:
              resource_id:
                type: string
                description: The identifier of a resource.
                example: 3d80cb72-342b-4aaa-b92e-4e4abb24a933
              resource_type:
                type: string
                description: The type of the resource.
                example: volume
                enum:
                  - droplet
                  - image
                  - volume
                  - volume_snapshot
            type: object
          example:
            - resource_id: '9569411'
              resource_type: droplet
            - resource_id: '7555620'
              resource_type: image
            - resource_id: 3d80cb72-342b-4aaa-b92e-4e4abb24a933
              resource_type: volume
      required:
        - resources
    volumes_ext4:
      type: object
      allOf:
        - $ref: '#/components/schemas/volume_base'
        - $ref: '#/components/schemas/volume_snapshot_id'
        - $ref: '#/components/schemas/volume_write_file_system_type'
        - properties:
            region:
              $ref: '#/components/schemas/region_slug'
            filesystem_label:
              allOf:
                - $ref: '#/components/schemas/volume_write_file_system_label'
                - maxLength: 16
          required:
            - name
            - size_gigabytes
            - region
          type: object
    volumes_xfs:
      type: object
      allOf:
        - $ref: '#/components/schemas/volume_base'
        - $ref: '#/components/schemas/volume_snapshot_id'
        - $ref: '#/components/schemas/volume_write_file_system_type'
        - properties:
            region:
              $ref: '#/components/schemas/region_slug'
            filesystem_label:
              allOf:
                - $ref: '#/components/schemas/volume_write_file_system_label'
                - maxLength: 12
          required:
            - name
            - size_gigabytes
            - region
          type: object
    volume_action_post_attach:
      type: object
      allOf:
        - $ref: '#/components/schemas/volume_action_post_base'
        - properties:
            droplet_id:
              $ref: '#/components/schemas/volume_action_droplet_id'
            tags:
              $ref: '#/components/schemas/tags_array'
          required:
            - droplet_id
          type: object
    volume_action_post_detach:
      type: object
      allOf:
        - $ref: '#/components/schemas/volume_action_post_base'
        - properties:
            droplet_id:
              $ref: '#/components/schemas/volume_action_droplet_id'
          required:
            - droplet_id
          type: object
    volume_action_post_resize:
      type: object
      allOf:
        - $ref: '#/components/schemas/volume_action_post_base'
        - properties:
            size_gigabytes:
              type: integer
              description: The new size of the block storage volume in GiB (1024^3).
              maximum: 16384
          required:
            - size_gigabytes
          type: object
    tags_array:
      type: array
      items:
        type: string
      nullable: true
      description: >-
        A flat array of tag names as strings to be applied to the resource. Tag
        names may be for either existing or new tags. <br><br>Requires
        `tag:create` scope.
      example:
        - base-image
        - prod
    vpc_nat_gateway_create:
      type: object
      properties:
        name:
          type: string
          example: my-vpc-nat-gateway
          description: The human-readable name of the VPC NAT gateway.
        type:
          type: string
          enum:
            - PUBLIC
          example: PUBLIC
          description: The type of the VPC NAT gateway.
        region:
          type: string
          enum:
            - nyc1
            - nyc2
            - nyc3
            - ams2
            - ams3
            - sfo1
            - sfo2
            - sfo3
            - sgp1
            - lon1
            - fra1
            - tor1
            - blr1
            - syd1
            - atl1
          example: tor1
          description: The region in which the VPC NAT gateway is created.
        size:
          type: integer
          example: 1
          description: The size of the VPC NAT gateway.
        vpcs:
          type: array
          items:
            type: object
            properties:
              vpc_uuid:
                type: string
                example: 0d3db13e-a604-4944-9827-7ec2642d32ac
                description: >-
                  The unique identifier of the VPC to which the NAT gateway is
                  attached.
          description: An array of VPCs associated with the VPC NAT gateway.
        udp_timeout_seconds:
          type: integer
          example: 30
          description: The UDP timeout in seconds for the VPC NAT gateway.
        icmp_timeout_seconds:
          type: integer
          example: 30
          description: The ICMP timeout in seconds for the VPC NAT gateway.
        tcp_timeout_seconds:
          type: integer
          example: 30
          description: The TCP timeout in seconds for the VPC NAT gateway.
      required:
        - name
        - type
        - region
        - size
        - vpcs
    vpc_nat_gateway_update:
      type: object
      properties:
        name:
          type: string
          example: my-vpc-nat-gateway
          description: The human-readable name of the VPC NAT gateway.
        size:
          type: integer
          example: 1
          description: The size of the VPC NAT gateway.
        udp_timeout_seconds:
          type: integer
          example: 30
          description: The UDP timeout in seconds for the VPC NAT gateway.
        icmp_timeout_seconds:
          type: integer
          example: 30
          description: The ICMP timeout in seconds for the VPC NAT gateway.
        tcp_timeout_seconds:
          type: integer
          example: 30
          description: The TCP timeout in seconds for the VPC NAT gateway.
      required:
        - name
        - size
    pagination:
      type: object
      properties:
        links:
          $ref: '#/components/schemas/page_links'
    meta:
      type: object
      properties:
        meta:
          allOf:
            - $ref: '#/components/schemas/meta_properties'
            - required:
                - total
      required:
        - meta
    error:
      type: object
      properties:
        id:
          description: >-
            A short identifier corresponding to the HTTP status code returned.
            For  example, the ID for a response returning a 404 status code
            would be "not_found."
          type: string
          example: not_found
        message:
          description: >-
            A message providing additional information about the error,
            including  details to help resolve it when possible.
          type: string
          example: The resource you were accessing could not be found.
        request_id:
          description: >-
            Optionally, some endpoints may include a request ID that should be 
            provided when reporting bugs or opening support tickets to help 
            identify the issue.
          type: string
          example: 4d9d8375-3c56-4925-a3e7-eb137fed17e9
      required:
        - id
        - message
    ssh_key_id:
      type: integer
      description: >-
        A unique identification number for this key. Can be used to embed a 
        specific SSH key into a Droplet.
      readOnly: true
      example: 512189
    ssh_key_fingerprint:
      type: string
      description: >-
        A unique identifier that differentiates this key from other keys using 
        a format that SSH recognizes. The fingerprint is created when the key is
        added to your account.
      readOnly: true
      example: 3b:16:bf:e4:8b:00:8b:b8:59:8c:a9:d3:f0:19:45:fa
    certificate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: 892071a0-bb95-49bc-8021-3afd67a210bf
          description: >-
            A unique ID that can be used to identify and reference a
            certificate.
        name:
          type: string
          example: web-cert-01
          description: A unique human-readable name referring to a certificate.
        not_after:
          type: string
          format: date-time
          readOnly: true
          example: '2017-02-22T00:23:00Z'
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents the certificate's expiration date.
        sha1_fingerprint:
          type: string
          readOnly: true
          example: dfcc9f57d86bf58e321c2c6c31c7a971be244ac7
          description: >-
            A unique identifier generated from the SHA-1 fingerprint of the
            certificate.
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2017-02-08T16:02:37Z'
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the certificate was created.
        dns_names:
          type: array
          items:
            type: string
          example:
            - www.example.com
            - example.com
          description: >-
            An array of fully qualified domain names (FQDNs) for which the
            certificate was issued.
        state:
          type: string
          enum:
            - pending
            - verified
            - error
          readOnly: true
          example: verified
          description: >-
            A string representing the current state of the certificate. It may
            be `pending`, `verified`, or `error`.
        type:
          type: string
          enum:
            - custom
            - lets_encrypt
          example: lets_encrypt
          description: >-
            A string representing the type of the certificate. The value will be
            `custom` for a user-uploaded certificate or `lets_encrypt` for one
            automatically generated with Let's Encrypt.
    certificate_create_base:
      type: object
      properties:
        name:
          type: string
          example: web-cert-01
          description: A unique human-readable name referring to a certificate.
        type:
          type: string
          enum:
            - custom
            - lets_encrypt
          example: lets_encrypt
          description: >-
            A string representing the type of the certificate. The value will be
            `custom` for a user-uploaded certificate or `lets_encrypt` for one
            automatically generated with Let's Encrypt.
      required:
        - name
    droplet:
      type: object
      properties:
        id:
          type: integer
          example: 3164444
          description: >-
            A unique identifier for each Droplet instance. This is automatically
            generated upon Droplet creation.
        name:
          type: string
          example: example.com
          description: The human-readable name set for the Droplet instance.
        memory:
          type: integer
          multipleOf: 8
          example: 1024
          description: Memory of the Droplet in megabytes.
        vcpus:
          type: integer
          example: 1
          description: The number of virtual CPUs.
        disk:
          type: integer
          example: 25
          description: The size of the Droplet's disk in gigabytes.
        disk_info:
          type: array
          description: >-
            An array of objects containing information about the disks available
            to the Droplet.
          items:
            $ref: '#/components/schemas/disk_info'
        locked:
          type: boolean
          example: false
          description: >-
            A boolean value indicating whether the Droplet has been locked,
            preventing actions by users.
        status:
          type: string
          enum:
            - new
            - active
            - 'off'
            - archive
          example: active
          description: >-
            A status string indicating the state of the Droplet instance. This
            may be "new", "active", "off", or "archive".
        kernel:
          $ref: '#/components/schemas/kernel'
        created_at:
          type: string
          format: date-time
          example: '2020-07-21T18:37:44Z'
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the Droplet was created.
        features:
          type: array
          items:
            type: string
          example:
            - backups
            - private_networking
            - ipv6
          description: An array of features enabled on this Droplet.
        backup_ids:
          type: array
          items:
            type: integer
          example:
            - 53893572
          description: >-
            An array of backup IDs of any backups that have been taken of the
            Droplet instance.  Droplet backups are enabled at the time of the
            instance creation.<br>Requires `image:read` scope.
        next_backup_window:
          allOf:
            - $ref: '#/components/schemas/droplet_next_backup_window'
            - description: >-
                The details of the Droplet's backups feature, if backups are
                configured for the Droplet. This object contains keys for the
                start and end times of the window during which the backup will
                start.
        snapshot_ids:
          type: array
          items:
            type: integer
          example:
            - 67512819
          description: >-
            An array of snapshot IDs of any snapshots created from the Droplet
            instance.<br>Requires `image:read` scope.
        image:
          allOf:
            - $ref: '#/components/schemas/image'
            - description: The Droplet's image.<br>Requires `image:read` scope.
        volume_ids:
          type: array
          items:
            type: string
          example:
            - 506f78a4-e098-11e5-ad9f-000f53306ae1
          description: >-
            A flat array including the unique identifier for each Block Storage
            volume attached to the Droplet.<br>Requires `block_storage:read`
            scope.
        size:
          $ref: '#/components/schemas/size'
        size_slug:
          type: string
          example: s-1vcpu-1gb
          description: The unique slug identifier for the size of this Droplet.
        networks:
          type: object
          description: >-
            The details of the network that are configured for the Droplet
            instance.  This is an object that contains keys for IPv4 and IPv6. 
            The value of each of these is an array that contains objects
            describing an individual IP resource allocated to the Droplet. 
            These will define attributes like the IP address, netmask, and
            gateway of the specific network depending on the type of network it
            is.
          properties:
            v4:
              type: array
              items:
                $ref: '#/components/schemas/network_v4'
            v6:
              type: array
              items:
                $ref: '#/components/schemas/network_v6'
        region:
          $ref: '#/components/schemas/region'
        tags:
          type: array
          items:
            type: string
          example:
            - web
            - env:prod
          description: >-
            An array of Tags the Droplet has been tagged with.<br>Requires
            `tag:read` scope.
        vpc_uuid:
          type: string
          example: 760e09ef-dc84-11e8-981e-3cfdfeaae000
          description: >-
            A string specifying the UUID of the VPC to which the Droplet is
            assigned.<br>Requires `vpc:read` scope.
        gpu_info:
          $ref: '#/components/schemas/gpu_info'
      required:
        - id
        - name
        - memory
        - vcpus
        - disk
        - locked
        - status
        - created_at
        - features
        - backup_ids
        - next_backup_window
        - snapshot_ids
        - image
        - volume_ids
        - size
        - size_slug
        - networks
        - region
        - tags
    droplet_create:
      type: object
      properties:
        region:
          type: string
          example: nyc3
          description: >-
            The slug identifier for the region that you wish to deploy the
            Droplet in. If the specific datacenter is not not important, a slug
            prefix (e.g. `nyc`) can be used to deploy the Droplet in any of the
            that region's locations (`nyc1`, `nyc2`, or `nyc3`). If the region
            is omitted from the create request completely, the Droplet may
            deploy in any region.
        size:
          type: string
          example: s-1vcpu-1gb
          description: >-
            The slug identifier for the size that you wish to select for this
            Droplet.
        image:
          oneOf:
            - type: string
            - type: integer
          example: ubuntu-20-04-x64
          description: >-
            The image ID of a public or private image or the slug identifier for
            a public image. This image will be the base image for your
            Droplet.<br>Requires `image:read` scope.
        ssh_keys:
          type: array
          items:
            anyOf:
              - type: string
              - type: integer
          example:
            - 289794
            - 3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45
          default: []
          description: >-
            An array containing the IDs or fingerprints of the SSH keys that you
            wish to embed in the Droplet's root account upon creation. You must
            add the keys to your team before they can be embedded on a
            Droplet.<br>Requires `ssh_key:read` scope.
        backups:
          type: boolean
          example: true
          default: false
          description: >-
            A boolean indicating whether automated backups should be enabled for
            the Droplet.
        backup_policy:
          allOf:
            - $ref: '#/components/schemas/droplet_backup_policy'
            - description: >-
                An object specifying the backup policy for the Droplet. If
                omitted and `backups` is `true`, the backup plan will default to
                daily.
        ipv6:
          type: boolean
          example: true
          default: false
          description: A boolean indicating whether to enable IPv6 on the Droplet.
        monitoring:
          type: boolean
          example: true
          default: false
          description: >-
            A boolean indicating whether to install the DigitalOcean agent for
            monitoring.
        tags:
          type: array
          items:
            type: string
          nullable: true
          example:
            - env:prod
            - web
          default: []
          description: >-
            A flat array of tag names as strings to apply to the Droplet after
            it is created. Tag names can either be existing or new
            tags.<br>Requires `tag:create` scope.
        user_data:
          type: string
          example: |
            #cloud-config
            runcmd:
              - touch /test.txt
          description: >-
            A string containing 'user data' which may be used to configure the
            Droplet on first boot, often a 'cloud-config' file or Bash script.
            It must be plain text and may not exceed 64 KiB in size.
        private_networking:
          type: boolean
          example: true
          default: false
          deprecated: true
          description: >-
            This parameter has been deprecated. Use `vpc_uuid` instead to
            specify a VPC network for the Droplet. If no `vpc_uuid` is provided,
            the Droplet will be placed in your account's default VPC for the
            region.
        volumes:
          type: array
          items:
            type: string
          example:
            - 12e97116-7280-11ed-b3d0-0a58ac146812
          default: []
          description: >-
            An array of IDs for block storage volumes that will be attached to
            the Droplet once created. The volumes must not already be attached
            to an existing Droplet.<br>Requires `block_storage:read` scpoe.
        vpc_uuid:
          type: string
          example: 760e09ef-dc84-11e8-981e-3cfdfeaae000
          description: >-
            A string specifying the UUID of the VPC to which the Droplet will be
            assigned. If excluded, the Droplet will be assigned to your
            account's default VPC for the region.<br>Requires `vpc:read` scope.
        with_droplet_agent:
          type: boolean
          example: true
          description: >-
            A boolean indicating whether to install the DigitalOcean agent used
            for providing access to the Droplet web console in the control
            panel. By default, the agent is installed on new Droplets but
            installation errors (i.e. OS not supported) are ignored. To prevent
            it from being installed, set to `false`. To make installation errors
            fatal, explicitly set it to `true`.
      required:
        - size
        - image
    action_link:
      type: object
      description: >-
        The linked actions can be used to check the status of a Droplet's create
        event.
      properties:
        id:
          type: integer
          example: 7515
          description: >-
            A unique numeric ID that can be used to identify and reference an
            action.
        rel:
          type: string
          example: create
          description: A string specifying the type of the related action.
        href:
          type: string
          format: uri
          example: https://api.digitalocean.com/v2/actions/7515
          description: A URL that can be used to access the action.
    droplet_snapshot:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              example: 6372321
              description: The unique identifier for the snapshot or backup.
          required:
            - id
        - $ref: '#/components/schemas/snapshots_base'
        - type: object
          properties:
            type:
              type: string
              enum:
                - snapshot
                - backup
              example: snapshot
              description: >-
                Describes the kind of image. It may be one of `snapshot` or
                `backup`. This specifies whether an image is a user-generated
                Droplet snapshot or automatically created Droplet backup.
          required:
            - type
    droplet_backup_policy_record:
      type: object
      properties:
        droplet_id:
          type: integer
          example: 7101383
          description: The unique identifier for the Droplet.
        backup_enabled:
          type: boolean
          example: true
          description: >-
            A boolean value indicating whether backups are enabled for the
            Droplet.
        backup_policy:
          allOf:
            - $ref: '#/components/schemas/droplet_backup_policy'
            - description: An object specifying the backup policy for the Droplet.
        next_backup_window:
          allOf:
            - $ref: '#/components/schemas/droplet_next_backup_window'
            - description: >-
                An object containing keys with the start and end times of the
                window during which the backup will occur.
    supported_droplet_backup_policy:
      type: object
      properties:
        name:
          type: string
          example: daily
          description: The name of the Droplet backup plan.
        possible_window_starts:
          type: array
          items:
            type: integer
          description: >
            An array of integers representing the hours of the day that a backup
            can

            start.
          example:
            - 0
            - 4
            - 8
            - 12
            - 16
            - 20
        window_length_hours:
          type: integer
          example: 4
          description: The number of hours that a backup window is open.
        retention_period_days:
          type: integer
          example: 7
          description: The number of days that a backup will be kept.
        possible_days:
          type: array
          items:
            type: string
          example:
            - SUN
            - MON
            - TUE
            - WED
            - THU
            - FRI
            - SAT
          description: The day of the week the backup will occur.
    action:
      type: object
      properties:
        id:
          type: integer
          description: >-
            A unique numeric ID that can be used to identify and reference an
            action.
          example: 36804636
        status:
          type: string
          description: >-
            The current status of the action. This can be "in-progress",
            "completed", or "errored".
          enum:
            - in-progress
            - completed
            - errored
          example: completed
          default: in-progress
        type:
          type: string
          description: >-
            This is the type of action that the object represents. For example,
            this could be "transfer" to represent the state of an image transfer
            action.
          example: create
        started_at:
          type: string
          format: date-time
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the action was initiated.
          example: '2020-11-14T16:29:21Z'
        completed_at:
          type: string
          format: date-time
          nullable: true
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the action was completed.
          example: '2020-11-14T16:30:06Z'
        resource_id:
          type: integer
          nullable: true
          description: >-
            A unique identifier for the resource that the action is associated
            with.
          example: 3164444
        resource_type:
          type: string
          description: The type of resource that the action is associated with.
          example: droplet
        region:
          $ref: '#/components/schemas/region'
        region_slug:
          type: string
          nullable: true
          description: >-
            A human-readable string that is used as a unique identifier for each
            region.
          example: nyc3
    droplet_backup_policy:
      type: object
      properties:
        plan:
          type: string
          enum:
            - daily
            - weekly
          example: daily
          description: >-
            The backup plan used for the Droplet. The plan can be either `daily`
            or `weekly`.
        weekday:
          type: string
          enum:
            - SUN
            - MON
            - TUE
            - WED
            - THU
            - FRI
            - SAT
          example: SUN
          description: The day of the week on which the backup will occur.
        hour:
          type: integer
          enum:
            - 0
            - 4
            - 8
            - 12
            - 16
            - 20
          example: 0
          description: The hour of the day that the backup window will start.
        window_length_hours:
          type: integer
          readOnly: true
          example: 4
          description: The length of the backup window starting from `hour`.
        retention_period_days:
          type: integer
          readOnly: true
          example: 7
          description: The number of days the backup will be retained.
    kernel:
      type: object
      description: >
        **Note**: All Droplets created after March 2017 use internal kernels by
        default.

        These Droplets will have this attribute set to `null`.


        The current
        [kernel](https://docs.digitalocean.com/products/droplets/how-to/kernel/)

        for Droplets with externally managed kernels. This will initially be set
        to

        the kernel of the base image when the Droplet is created.
      nullable: true
      deprecated: true
      properties:
        id:
          type: integer
          example: 7515
          description: A unique number used to identify and reference a specific kernel.
        name:
          type: string
          example: DigitalOcean GrubLoader v0.2 (20160714)
          description: >-
            The display name of the kernel. This is shown in the web UI and is
            generally a descriptive title for the kernel in question.
        version:
          type: string
          example: 2016.07.13-DigitalOcean_loader_Ubuntu
          description: >-
            A standard kernel version string representing the version, patch,
            and release information.
    associated_resource:
      type: object
      description: >-
        An objects containing information about a resource associated with a
        Droplet.
      properties:
        id:
          type: string
          example: '61486916'
          description: The unique identifier for the resource associated with the Droplet.
        name:
          type: string
          example: ubuntu-s-1vcpu-1gb-nyc1-01-1585758823330
          description: The name of the resource associated with the Droplet.
        cost:
          type: string
          example: '0.05'
          description: >-
            The cost of the resource in USD per month if the resource is
            retained after the Droplet is destroyed.
    associated_resource_status:
      type: object
      description: >-
        An objects containing information about a resources scheduled for
        deletion.
      properties:
        droplet:
          $ref: '#/components/schemas/destroyed_associated_resource'
        resources:
          type: object
          description: >-
            An object containing additional information about resource related
            to a Droplet requested to be destroyed.
          properties:
            reserved_ips:
              type: array
              items:
                $ref: '#/components/schemas/destroyed_associated_resource'
            floating_ips:
              type: array
              items:
                $ref: '#/components/schemas/destroyed_associated_resource'
            snapshots:
              type: array
              items:
                $ref: '#/components/schemas/destroyed_associated_resource'
            volumes:
              type: array
              items:
                $ref: '#/components/schemas/destroyed_associated_resource'
            volume_snapshots:
              type: array
              items:
                $ref: '#/components/schemas/destroyed_associated_resource'
        completed_at:
          type: string
          format: date-time
          example: '2020-04-01T18:11:49Z'
          description: >-
            A time value given in ISO8601 combined date and time format
            indicating when the requested action was completed.
        failures:
          type: integer
          example: 0
          description: >-
            A count of the associated resources that failed to be destroyed, if
            any.
    autoscale_pool:
      type: object
      properties:
        id:
          type: string
          example: 0d3db13e-a604-4944-9827-7ec2642d32ac
          description: >-
            A unique identifier for each autoscale pool instance. This is
            automatically generated upon autoscale pool creation.
        name:
          type: string
          example: my-autoscale-pool
          description: The human-readable name set for the autoscale pool.
        config:
          oneOf:
            - $ref: '#/components/schemas/autoscale_pool_static_config'
            - $ref: '#/components/schemas/autoscale_pool_dynamic_config'
          type: object
          description: >-
            The scaling configuration for an autoscale pool, which is how the
            pool scales up and down (either by resource utilization or static
            configuration).
        droplet_template:
          $ref: '#/components/schemas/autoscale_pool_droplet_template'
        current_utilization:
          $ref: '#/components/schemas/current_utilization'
        created_at:
          format: date-time
          title: The creation time of the autoscale pool
          type: string
          example: '2020-07-28T18:00:00Z'
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the autoscale pool was created.
        updated_at:
          format: date-time
          title: When the autoscale pool was last updated
          type: string
          example: '2020-07-28T18:00:00Z'
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the autoscale pool was last updated.
        status:
          type: string
          enum:
            - active
            - deleting
            - error
          description: The current status of the autoscale pool.
          example: active
        active_resources_count:
          type: integer
          example: 1
          description: The number of active Droplets in the autoscale pool.
      required:
        - id
        - name
        - config
        - droplet_template
        - created_at
        - updated_at
        - status
        - active_resources_count
    autoscale_pool_static_config:
      type: object
      properties:
        target_number_instances:
          title: static config
          type: integer
          example: 3
          description: Fixed number of instances in an autoscale pool.
          minimum: 1
          maximum: 1000
      required:
        - target_number_instances
    autoscale_pool_dynamic_config:
      type: object
      properties:
        min_instances:
          type: integer
          example: 5
          description: The minimum number of Droplets in an autoscale pool.
          minimum: 1
          maximum: 500
        max_instances:
          type: integer
          example: 10
          description: The maximum number of Droplets in an autoscale pool.
          minimum: 1
          maximum: 1000
        target_cpu_utilization:
          type: number
          format: float
          example: 0.6
          description: Target CPU utilization as a decimal.
          minimum: 0.05
          maximum: 1
        target_memory_utilization:
          type: number
          format: float
          example: 0.6
          description: Target memory utilization as a decimal.
          minimum: 0.05
          maximum: 1
        cooldown_minutes:
          type: integer
          example: 5
          description: >-
            The number of minutes to wait between scaling events in an autoscale
            pool. Defaults to 10 minutes.
          minimum: 5
          maximum: 20
      required:
        - min_instances
        - max_instances
    autoscale_pool_droplet_template:
      type: object
      properties:
        name:
          type: string
          example: my-droplet-name
          description: The name(s) to be applied to all Droplets in the autoscale pool.
        region:
          type: string
          example: tor1
          enum:
            - nyc1
            - nyc2
            - nyc3
            - ams2
            - ams3
            - sfo1
            - sfo2
            - sfo3
            - sgp1
            - lon1
            - fra1
            - tor1
            - blr1
            - syd1
          description: The datacenter in which all of the Droplets will be created.
        size:
          type: string
          example: c-2
          description: The Droplet size to be used for all Droplets in the autoscale pool.
        image:
          type: string
          example: ubuntu-20-04-x64
          description: >-
            The Droplet image to be used for all Droplets in the autoscale pool.
            You may specify the slug or the image ID.
        ssh_keys:
          type: array
          items:
            type: string
          example:
            - 88:66:90:d2:68:d5:b5:85:e3:26:26:11:31:57:e6:f8
          description: >
            The SSH keys to be installed on the Droplets in the autoscale pool.
            You can either specify the key ID or the fingerprint.

            Requires `ssh_key:read` scope.
        tags:
          type: array
          items:
            type: string
          example:
            - my-tag
          description: |
            The tags to apply to each of the Droplets in the autoscale pool.
            Requires `tag:read` scope.
        vpc_uuid:
          type: string
          description: >
            The VPC where the Droplets in the autoscale pool will be created.
            The VPC must be in the region where you want to create the Droplets.

            Requires `vpc:read` scope.
          example: 760e09ef-dc84-11e8-981e-3cfdfeaae000
        with_droplet_agent:
          type: boolean
          description: >-
            Installs the Droplet agent. This must be set to true to monitor
            Droplets for resource utilization scaling.
          example: true
        project_id:
          type: string
          description: |
            The project that the Droplets in the autoscale pool will belong to.
            Requires `project:read` scope.
          example: 746c6152-2fa2-11ed-92d3-27aaa54e4988
        ipv6:
          type: boolean
          description: >-
            Assigns a unique IPv6 address to each of the Droplets in the
            autoscale pool.
          example: true
        user_data:
          type: string
          example: |
            #cloud-config
            runcmd:
              - touch /test.txt
          description: >-
            A string containing user data that cloud-init consumes to configure
            a Droplet on first boot. User data is often a cloud-config file or
            Bash script. It must be plain text and may not exceed 64 KiB in
            size.
      required:
        - region
        - image
        - size
        - ssh_keys
    member:
      type: object
      properties:
        droplet_id:
          type: integer
          example: 459903570
          description: The unique identifier of the Droplet.
        created_at:
          format: date-time
          description: >-
            The creation time of the Droplet in ISO8601 combined date and time
            format.
          type: string
          example: '2020-07-28T18:00:00Z'
        updated_at:
          format: date-time
          description: >-
            The last updated time of the Droplet in ISO8601 combined date and
            time format.
          type: string
          example: '2020-07-28T18:00:00Z'
        health_status:
          type: string
          example: active
          description: The health status of the Droplet.
        status:
          type: string
          enum:
            - provisioning
            - active
            - deleting
            - 'off'
          description: The power status of the Droplet.
          example: active
        current_utilization:
          $ref: '#/components/schemas/member_current_utilization'
      required:
        - droplet_id
        - created_at
        - updated_at
        - health_status
        - status
        - current_utilization
    history:
      type: object
      properties:
        history_event_id:
          type: string
          example: 01936530-4471-7b86-9634-32d8fcfecbc6
          description: The unique identifier of the history event.
        current_instance_count:
          type: integer
          example: 2
          description: The current number of Droplets in the autoscale pool.
        desired_instance_count:
          type: integer
          example: 2
          description: >-
            The target number of Droplets for the autoscale pool after the
            scaling event.
        reason:
          type: string
          enum:
            - CONFIGURATION_CHANGE
            - SCALE_UP
            - SCALE_DOWN
          description: The reason for the scaling event.
          example: CONFIGURATION_CHANGE
        status:
          type: string
          enum:
            - in_progress
            - success
            - error
          description: The status of the scaling event.
          example: success
        created_at:
          format: date-time
          description: >-
            The creation time of the history event in ISO8601 combined date and
            time format.
          type: string
          example: '2020-07-28T18:00:00Z'
        updated_at:
          format: date-time
          description: >-
            The last updated time of the history event in ISO8601 combined date
            and time format.
          type: string
          example: '2020-07-28T18:00:00Z'
      required:
        - history_event_id
        - current_instance_count
        - desired_instance_count
        - reason
        - status
        - created_at
        - updated_at
    firewall_rule_base:
      type: object
      properties:
        protocol:
          type: string
          enum:
            - tcp
            - udp
            - icmp
          description: >-
            The type of traffic to be allowed. This may be one of `tcp`, `udp`,
            or `icmp`.
          example: tcp
        ports:
          type: string
          description: >-
            The ports on which traffic will be allowed specified as a string
            containing a single port, a range (e.g. "8000-9000"), or "0" when
            all ports are open for a protocol. For ICMP rules this parameter
            will always return "0".
          example: '8000'
      required:
        - protocol
        - ports
    firewall_rule_target:
      type: object
      properties:
        addresses:
          type: array
          items:
            type: string
          description: >-
            An array of strings containing the IPv4 addresses, IPv6 addresses,
            IPv4 CIDRs, and/or IPv6 CIDRs to which the firewall will allow
            traffic.
          example:
            - 1.2.3.4
            - 18.0.0.0/8
        droplet_ids:
          type: array
          items:
            type: integer
          description: >-
            An array containing the IDs of the Droplets to which the firewall
            will allow traffic.
          example:
            - 8043964
        load_balancer_uids:
          type: array
          items:
            type: string
          description: >-
            An array containing the IDs of the load balancers to which the
            firewall will allow traffic.
          example:
            - 4de7ac8b-495b-4884-9a69-1050c6793cd6
        kubernetes_ids:
          type: array
          items:
            type: string
          description: >-
            An array containing the IDs of the Kubernetes clusters to which the
            firewall will allow traffic.
          example:
            - 41b74c5d-9bd0-5555-5555-a57c495b81a3
        tags:
          allOf:
            - $ref: '#/components/schemas/existing_tags_array'
            - description: >-
                An array containing the names of Tags corresponding to groups of
                Droplets to which the firewall will allow traffic.
              example:
                - frontend
    image:
      type: object
      properties:
        id:
          type: integer
          description: >-
            A unique number that can be used to identify and reference a
            specific image.
          example: 7555620
          readOnly: true
        name:
          $ref: '#/components/schemas/image_name'
        type:
          type: string
          description: >-
            Describes the kind of image. It may be one of `base`, `snapshot`,
            `backup`, `custom`, or `admin`. Respectively, this specifies whether
            an image is a DigitalOcean base OS image, user-generated Droplet
            snapshot, automatically created Droplet backup, user-provided
            virtual machine image, or an image used for DigitalOcean managed
            resources (e.g. DOKS worker nodes).
          enum:
            - base
            - snapshot
            - backup
            - custom
            - admin
          example: snapshot
        distribution:
          $ref: '#/components/schemas/distribution'
        slug:
          type: string
          nullable: true
          description: >-
            A uniquely identifying string that is associated with each of the
            DigitalOcean-provided public images. These can be used to reference
            a public image as an alternative to the numeric id.
          example: nifty1
        public:
          type: boolean
          description: >-
            This is a boolean value that indicates whether the image in question
            is public or not. An image that is public is available to all
            accounts. A non-public image is only accessible from your account.
          example: true
        regions:
          $ref: '#/components/schemas/regions_array'
        created_at:
          type: string
          format: date-time
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the image was created.
          example: '2020-05-04T22:23:02Z'
        min_disk_size:
          type: integer
          description: >-
            The minimum disk size in GB required for a Droplet to use this
            image.
          example: 20
          nullable: true
          minimum: 0
        size_gigabytes:
          type: number
          format: float
          nullable: true
          description: The size of the image in gigabytes.
          example: 2.34
        description:
          $ref: '#/components/schemas/image_description'
        tags:
          $ref: '#/components/schemas/tags_array'
        status:
          type: string
          description: >-
            A status string indicating the state of a custom image. This may be
            `NEW`,
             `available`, `pending`, `deleted`, or `retired`.
          enum:
            - NEW
            - available
            - pending
            - deleted
            - retired
          example: NEW
        error_message:
          type: string
          description: >-
            A string containing information about errors that may occur when
            importing
             a custom image.
          example: ' '
    region_slug:
      type: string
      description: >-
        The slug identifier for the region where the resource will initially be 
        available.
      enum:
        - ams1
        - ams2
        - ams3
        - blr1
        - fra1
        - lon1
        - nyc1
        - nyc2
        - nyc3
        - sfo1
        - sfo2
        - sfo3
        - sgp1
        - tor1
        - syd1
      example: nyc3
    image_name:
      type: string
      description: >-
        The display name that has been given to an image.  This is what is shown
        in the control panel and is generally a descriptive title for the image
        in question.
      example: Nifty New Snapshot
    distribution:
      type: string
      description: >-
        The name of a custom image's distribution. Currently, the valid values
        are  `Arch Linux`, `CentOS`, `CoreOS`, `Debian`, `Fedora`, `Fedora
        Atomic`,  `FreeBSD`, `Gentoo`, `openSUSE`, `RancherOS`, `Rocky Linux`,
        `Ubuntu`, and `Unknown`.  Any other value will be accepted but ignored,
        and `Unknown` will be used in its place.
      enum:
        - Arch Linux
        - CentOS
        - CoreOS
        - Debian
        - Fedora
        - Fedora Atomic
        - FreeBSD
        - Gentoo
        - openSUSE
        - RancherOS
        - Rocky Linux
        - Ubuntu
        - Unknown
      example: Ubuntu
    image_description:
      type: string
      description: An optional free-form text field to describe an image.
      example: ' '
    load_balancer_base:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: 4de7ac8b-495b-4884-9a69-1050c6793cd6
          description: >-
            A unique ID that can be used to identify and reference a load
            balancer.
        name:
          type: string
          example: example-lb-01
          description: A human-readable name for a load balancer instance.
        project_id:
          type: string
          example: 4de7ac8b-495b-4884-9a69-1050c6793cd6
          description: >-
            The ID of the project that the load balancer is associated with. If
            no ID is provided at creation, the load balancer associates with the
            user's default project. If an invalid project ID is provided, the
            load balancer will not be created.
        ip:
          type: string
          pattern: >-
            ^$|^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
          readOnly: true
          example: 104.131.186.241
          description: >-
            An attribute containing the public-facing IP address of the load
            balancer.
        ipv6:
          type: string
          readOnly: true
          example: 2604:a880:800:14::85f5:c000
          description: >-
            An attribute containing the public-facing IPv6 address of the load
            balancer.
        size_unit:
          type: integer
          default: 1
          minimum: 1
          maximum: 100
          example: 3
          description: >-
            How many nodes the load balancer contains. Each additional node
            increases the load balancer's ability to manage more connections.
            Load balancers can be scaled up or down, and you can change the
            number of nodes after creation up to once per hour. This field is
            currently not available in the AMS2, NYC2, or SFO1 regions. Use the
            `size` field to scale load balancers that reside in these regions.
        size:
          type: string
          enum:
            - lb-small
            - lb-medium
            - lb-large
          deprecated: true
          default: lb-small
          example: lb-small
          description: >-
            This field has been replaced by the `size_unit` field for all
            regions except in AMS2, NYC2, and SFO1. Each available load balancer
            size now equates to the load balancer having a set number of nodes.

            * `lb-small` = 1 node

            * `lb-medium` = 3 nodes

            * `lb-large` = 6 nodes


            You can resize load balancers after creation up to once per hour.
            You cannot resize a load balancer within the first hour of its
            creation.
        algorithm:
          type: string
          example: round_robin
          enum:
            - round_robin
            - least_connections
          deprecated: true
          default: round_robin
          description: >-
            This field has been deprecated. You can no longer specify an
            algorithm for load balancers.
        status:
          type: string
          example: new
          enum:
            - new
            - active
            - errored
          readOnly: true
          description: >-
            A status string indicating the current state of the load balancer.
            This can be `new`, `active`, or `errored`.
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2017-02-01T22:22:58Z'
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the load balancer was created.
        forwarding_rules:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/forwarding_rule'
          description: >-
            An array of objects specifying the forwarding rules for a load
            balancer.
        health_check:
          $ref: '#/components/schemas/health_check'
        sticky_sessions:
          $ref: '#/components/schemas/sticky_sessions'
        redirect_http_to_https:
          type: boolean
          example: true
          default: false
          description: >-
            A boolean value indicating whether HTTP requests to the load
            balancer on port 80 will be redirected to HTTPS on port 443.
        enable_proxy_protocol:
          type: boolean
          example: true
          default: false
          description: A boolean value indicating whether PROXY Protocol is in use.
        enable_backend_keepalive:
          type: boolean
          example: true
          default: false
          description: >-
            A boolean value indicating whether HTTP keepalive connections are
            maintained to target Droplets.
        http_idle_timeout_seconds:
          type: integer
          example: 90
          default: 60
          minimum: 30
          maximum: 600
          description: >-
            An integer value which configures the idle timeout for HTTP requests
            to the target droplets.
        vpc_uuid:
          type: string
          format: uuid
          example: c33931f2-a26a-4e61-b85c-4e95a2ec431b
          description: >-
            A string specifying the UUID of the VPC to which the load balancer
            is assigned.
        disable_lets_encrypt_dns_records:
          type: boolean
          example: true
          default: false
          description: >-
            A boolean value indicating whether to disable automatic DNS record
            creation for Let's Encrypt certificates that are added to the load
            balancer.
        firewall:
          $ref: '#/components/schemas/lb_firewall'
        network:
          type: string
          example: EXTERNAL
          enum:
            - EXTERNAL
            - INTERNAL
          default: EXTERNAL
          description: >-
            A string indicating whether the load balancer should be external or
            internal. Internal load balancers have no public IPs and are only
            accessible to resources on the same VPC network. This property
            cannot be updated after creating the load balancer.
        network_stack:
          type: string
          example: IPV4
          enum:
            - IPV4
            - DUALSTACK
          default: IPV4
          description: >-
            A string indicating whether the load balancer will support IPv4 or
            both IPv4 and IPv6 networking. This property cannot be updated after
            creating the load balancer.
        type:
          type: string
          example: REGIONAL
          enum:
            - REGIONAL
            - REGIONAL_NETWORK
            - GLOBAL
          default: REGIONAL
          description: >-
            A string indicating whether the load balancer should be a standard
            regional HTTP load balancer, a regional network load balancer that
            routes traffic at the TCP/UDP transport layer, or a global load
            balancer.
        domains:
          type: array
          items:
            $ref: '#/components/schemas/domains'
          description: >-
            An array of objects specifying the domain configurations for a
            Global load balancer.
        glb_settings:
          $ref: '#/components/schemas/glb_settings'
        target_load_balancer_ids:
          type: array
          items:
            type: string
          example:
            - 7dbf91fe-cbdb-48dc-8290-c3a181554905
            - 996fa239-fac3-42a2-b9a1-9fa822268b7a
          description: >-
            An array containing the UUIDs of the Regional load balancers to be
            used as target backends for a Global load balancer.
        tls_cipher_policy:
          type: string
          example: STRONG
          enum:
            - DEFAULT
            - STRONG
          default: DEFAULT
          description: >-
            A string indicating the policy for the TLS cipher suites used by the
            load balancer. The possible values are `DEFAULT` or `STRONG`. The
            default value is `DEFAULT`.
      required:
        - forwarding_rules
    load_balancer:
      allOf:
        - $ref: '#/components/schemas/load_balancer_base'
        - type: object
          properties:
            region:
              type: object
              allOf:
                - description: >-
                    The region where the load balancer instance is located. When
                    setting a region, the value should be the slug identifier
                    for the region. When you query a load balancer, an entire
                    region object will be returned.
                - $ref: '#/components/schemas/region'
        - type: object
          properties:
            droplet_ids:
              type: array
              items:
                type: integer
              example:
                - 3164444
                - 3164445
              description: >-
                An array containing the IDs of the Droplets assigned to the load
                balancer.
        - type: object
          properties:
            tag:
              type: string
              example: prod:web
              description: >-
                The name of a Droplet tag corresponding to Droplets assigned to
                the load balancer.
    region:
      type: object
      properties:
        name:
          type: string
          description: >-
            The display name of the region.  This will be a full name that is
            used in the control panel and other interfaces.
          example: New York 3
        slug:
          type: string
          description: >-
            A human-readable string that is used as a unique identifier for each
            region.
          example: nyc3
        features:
          type: array
          items:
            type: string
          description: >-
            This attribute is set to an array which contains features available
            in this region
          example:
            - private_networking
            - backups
            - ipv6
            - metadata
            - install_agent
            - storage
            - image_transfer
        available:
          type: boolean
          description: >-
            This is a boolean value that represents whether new Droplets can be
            created in this region.
          example: true
        sizes:
          type: array
          items:
            type: string
          description: >-
            This attribute is set to an array which contains the identifying
            slugs for the sizes available in this region. sizes:read is required
            to view.
          example:
            - s-1vcpu-1gb
            - s-1vcpu-2gb
            - s-1vcpu-3gb
            - s-2vcpu-2gb
            - s-3vcpu-1gb
            - s-2vcpu-4gb
            - s-4vcpu-8gb
            - s-6vcpu-16gb
            - s-8vcpu-32gb
            - s-12vcpu-48gb
            - s-16vcpu-64gb
            - s-20vcpu-96gb
            - s-24vcpu-128gb
            - s-32vcpu-192g
      required:
        - available
        - features
        - name
        - sizes
        - slug
    neighbor_ids:
      type: object
      properties:
        neighbor_ids:
          type: array
          items:
            type: array
            items:
              type: integer
          description: >-
            An array of arrays. Each array will contain a set of Droplet IDs for
            Droplets that share a physical server.
          example:
            - - 168671828
              - 168663509
              - 168671815
            - - 168671883
              - 168671750
    reserved_ip:
      type: object
      properties:
        ip:
          type: string
          format: ipv4
          example: 45.55.96.47
          description: >-
            The public IP address of the reserved IP. It also serves as its
            identifier.
        region:
          allOf:
            - $ref: '#/components/schemas/region'
            - type: object
              description: >-
                The region that the reserved IP is reserved to. When you query a
                reserved IP, the entire region object will be returned.
        droplet:
          description: >-
            The Droplet that the reserved IP has been assigned to. When you
            query a reserved IP, if it is assigned to a Droplet, the entire
            Droplet object will be returned. If it is not assigned, the value
            will be null.<br><br>Requires `droplet:read` scope.
          anyOf:
            - title: 'null'
              type: object
              nullable: true
              description: >-
                If the reserved IP is not assigned to a Droplet, the value will
                be null.
            - $ref: '#/components/schemas/droplet'
          example: null
        locked:
          type: boolean
          example: true
          description: >-
            A boolean value indicating whether or not the reserved IP has
            pending actions preventing new ones from being submitted.
        project_id:
          type: string
          format: uuid
          example: 746c6152-2fa2-11ed-92d3-27aaa54e4988
          description: >-
            The UUID of the project to which the reserved IP currently
            belongs.<br><br>Requires `project:read` scope.
    reserved_ip_action_type:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - assign
            - unassign
          description: The type of action to initiate for the reserved IP.
      discriminator:
        propertyName: type
        mapping:
          assign: '#/components/schemas/reserved_ip_action_assign'
          unassign: '#/components/schemas/reserved_ip_action_unassign'
    reserved_ipv6_list:
      type: object
      properties:
        reserved_ipv6s:
          type: array
          items:
            properties:
              ip:
                type: string
                format: ipv6
                example: 2409:40d0:f7:1017:74b4:3a96:105e:4c6e
                description: >-
                  The public IP address of the reserved IPv6. It also serves as
                  its identifier.
              region_slug:
                type: string
                description: >-
                  The region that the reserved IPv6 is reserved to. When you
                  query a reserved IPv6,the region_slug will be returned.
                example: nyc3
              reserved_at:
                type: string
                format: date-time
                example: '2020-01-01T00:00:00Z'
              droplet:
                description: Requires `droplet:read` scope.
                anyOf:
                  - title: 'null'
                    type: object
                    nullable: true
                    description: >-
                      If the reserved IP is not assigned to a Droplet, the value
                      will be null.<br><br>Requires `droplet:read` scope.
                  - $ref: '#/components/schemas/droplet'
                example: null
            type: object
    reserved_ipv6:
      type: object
      properties:
        ip:
          type: string
          format: ipv6
          example: 2409:40d0:f7:1017:74b4:3a96:105e:4c6e
          description: >-
            The public IP address of the reserved IPv6. It also serves as its
            identifier.
        reserved_at:
          type: string
          format: date-time
          example: '2024-11-20T11:08:30Z'
          description: The date and time when the reserved IPv6 was reserved.
        region_slug:
          type: string
          description: >-
            The region that the reserved IPv6 is reserved to. When you query a
            reserved IPv6,the region_slug will be returned.
          example: nyc3
        droplet:
          anyOf:
            - title: 'null'
              type: object
              nullable: true
              description: >-
                If the reserved IP is not assigned to a Droplet, the value will
                be null.<br><br>Requires `droplet:read` scope.
            - $ref: '#/components/schemas/droplet'
          example: null
    reserved_ipv6_action_type:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - assign
            - unassign
          description: The type of action to initiate for the reserved IPv6.
      discriminator:
        propertyName: type
        mapping:
          assign: '#/components/schemas/reserved_ipv6_action_assign'
          unassign: '#/components/schemas/reserved_ipv6_action_unassign'
    size:
      type: object
      properties:
        slug:
          type: string
          example: s-1vcpu-1gb
          description: A human-readable string that is used to uniquely identify each size.
        memory:
          type: integer
          multipleOf: 8
          minimum: 8
          example: 1024
          description: >-
            The amount of RAM allocated to Droplets created of this size. The
            value is represented in megabytes.
        vcpus:
          type: integer
          example: 1
          description: The number of CPUs allocated to Droplets of this size.
        disk:
          type: integer
          example: 25
          description: >-
            The amount of disk space set aside for Droplets of this size. The
            value is represented in gigabytes.
        transfer:
          type: number
          format: float
          example: 1
          description: >-
            The amount of transfer bandwidth that is available for Droplets
            created in this size. This only counts traffic on the public
            interface. The value is given in terabytes.
        price_monthly:
          type: number
          format: float
          example: 5
          description: >-
            This attribute describes the monthly cost of this Droplet size if
            the Droplet is kept for an entire month. The value is measured in US
            dollars.
        price_hourly:
          type: number
          format: float
          example: 0.00743999984115362
          description: >-
            This describes the price of the Droplet size as measured hourly. The
            value is measured in US dollars.
        regions:
          type: array
          items:
            type: string
          example:
            - ams2
            - ams3
            - blr1
            - fra1
            - lon1
            - nyc1
            - nyc2
            - nyc3
            - sfo1
            - sfo2
            - sfo3
            - sgp1
            - tor1
          description: >-
            An array containing the region slugs where this size is available
            for Droplet creates.
        available:
          type: boolean
          default: true
          example: true
          description: >-
            This is a boolean value that represents whether new Droplets can be
            created with this size.
        description:
          type: string
          example: Basic
          description: >-
            A string describing the class of Droplets created from this size.
            For example: Basic, General Purpose, CPU-Optimized,
            Memory-Optimized, or Storage-Optimized.
        disk_info:
          type: array
          description: >-
            An array of objects containing information about the disks available
            to Droplets created with this size.
          items:
            $ref: '#/components/schemas/disk_info'
        gpu_info:
          $ref: '#/components/schemas/gpu_info'
      required:
        - available
        - disk
        - memory
        - price_hourly
        - price_monthly
        - regions
        - slug
        - transfer
        - vcpus
        - description
    snapshots:
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: '6372321'
              description: The unique identifier for the snapshot.
          required:
            - id
        - $ref: '#/components/schemas/snapshots_base'
        - type: object
          properties:
            resource_id:
              type: string
              example: '200776916'
              description: >-
                The unique identifier for the resource that the snapshot
                originated from.
            resource_type:
              type: string
              enum:
                - droplet
                - volume
              example: droplet
              description: The type of resource that the snapshot originated from.
            tags:
              description: >-
                An array of Tags the snapshot has been tagged
                with.<br><br>Requires `tag:read` scope.
              type: array
              items:
                type: string
              nullable: true
              example:
                - web
                - env:prod
          required:
            - resource_id
            - resource_type
            - tags
    tags_metadata:
      type: object
      description: >-
        Tagged Resource Statistics include metadata regarding the resource type
        that has been tagged.
      properties:
        count:
          type: integer
          description: The number of tagged objects for this type of resource.
          example: 5
          minimum: 0
        last_tagged_uri:
          type: string
          description: The URI for the last tagged object for this type of resource.
          example: https://api.digitalocean.com/v2/images/7555620
    error_with_root_causes:
      type: object
      properties:
        error:
          description: A message providing information about the error.
          type: string
          example: not_found
        messages:
          description: A list of error messages.
          type: array
          items:
            type: string
          nullable: true
          example: null
        root_causes:
          description: >-
            A list of underlying causes for the error, including details to
            help  resolve it when possible.
          type: array
          items:
            type: string
          example: []
      required:
        - error
        - root_causes
    volume_full:
      type: object
      allOf:
        - $ref: '#/components/schemas/volume_base_read'
        - properties:
            region:
              allOf:
                - description: >-
                    The region that the block storage volume is located in. When
                    setting a region, the value should be the slug identifier
                    for the region. When you query a block storage volume, the
                    entire region object will be returned.
                - $ref: '#/components/schemas/region'
              example:
                name: New York 1
                slug: nyc1
                sizes:
                  - s-1vcpu-1gb
                  - s-1vcpu-2gb
                  - s-1vcpu-3gb
                  - s-2vcpu-2gb
                  - s-3vcpu-1gb
                  - s-2vcpu-4gb
                  - s-4vcpu-8gb
                  - s-6vcpu-16gb
                  - s-8vcpu-32gb
                  - s-12vcpu-48gb
                  - s-16vcpu-64gb
                  - s-20vcpu-96gb
                  - s-24vcpu-128gb
                  - s-32vcpu-192gb
                features:
                  - private_networking
                  - backups
                  - ipv6
                  - metadata
                available: true
              readOnly: true
            filesystem_type:
              type: string
              description: The type of filesystem currently in-use on the volume.
              example: ext4
            filesystem_label:
              type: string
              description: The label currently applied to the filesystem.
              example: example
          type: object
    volume_base:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the block storage volume.
          example: 506f78a4-e098-11e5-ad9f-000f53306ae1
          readOnly: true
        droplet_ids:
          type: array
          items:
            type: integer
          nullable: true
          description: >-
            An array containing the IDs of the Droplets the volume is attached
            to. Note that at this time, a volume can only be attached to a
            single Droplet.
          example: []
          readOnly: true
        name:
          type: string
          description: >-
            A human-readable name for the block storage volume. Must be
            lowercase and be composed only of numbers, letters and "-", up to a
            limit of 64 characters. The name must begin with a letter.
          example: example
        description:
          type: string
          description: An optional free-form text field to describe a block storage volume.
          example: Block store for examples
        size_gigabytes:
          type: integer
          description: >-
            The size of the block storage volume in GiB (1024^3). This field
            does not apply  when creating a volume from a snapshot.
          example: 10
        created_at:
          type: string
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the block storage volume was created.
          example: '2020-03-02T17:00:49Z'
          readOnly: true
        tags:
          $ref: '#/components/schemas/tags_array'
    volume_snapshot_id:
      properties:
        snapshot_id:
          type: string
          description: >-
            The unique identifier for the volume snapshot from which to create
            the volume.
          example: b0798135-fb76-11eb-946a-0a58ac146f33
      type: object
    volume_write_file_system_type:
      type: object
      properties:
        filesystem_type:
          type: string
          description: >-
            The name of the filesystem type to be used on the volume. When
            provided, the volume will automatically be formatted to the
            specified filesystem type. Currently, the available options are
            `ext4` and `xfs`. Pre-formatted volumes are automatically mounted
            when attached to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOS
            Droplets created on or after April 26, 2018. Attaching pre-formatted
            volumes to other Droplets is not recommended.
          example: ext4
    volume_write_file_system_label:
      type: string
      description: >-
        The label applied to the filesystem. Labels for ext4 type filesystems
        may contain 16 characters while labels for xfs type filesystems are
        limited to 12 characters. May only be used in conjunction with
        filesystem_type.
      example: example
    volume_action_post_base:
      type: object
      properties:
        type:
          type: string
          description: The volume action to initiate.
          enum:
            - attach
            - detach
            - resize
          example: attach
        region:
          $ref: '#/components/schemas/region_slug'
      required:
        - type
    volume_action_droplet_id:
      type: integer
      description: >-
        The unique identifier for the Droplet the volume will be attached or
        detached from.
      example: 11612190
    volumeAction:
      type: object
      allOf:
        - properties:
            type:
              type: string
              description: >-
                This is the type of action that the object represents. For
                example, this could be "attach_volume" to represent the state of
                a volume attach action.
              example: attach_volume
            resource_id:
              type: integer
              nullable: true
              example: null
          type: object
        - $ref: '#/components/schemas/action'
    vpc_nat_gateway_get:
      type: object
      properties:
        id:
          type: string
          example: 70e1b58d-cdec-4e95-b3ee-2d4d95feff51
          description: >-
            The unique identifier for the VPC NAT gateway. This is automatically
            generated upon creation.
        name:
          type: string
          example: my-vpc-nat-gateway
          description: The human-readable name of the VPC NAT gateway.
        type:
          type: string
          enum:
            - PUBLIC
          example: PUBLIC
          description: The type of the VPC NAT gateway.
        state:
          type: string
          enum:
            - NEW
            - PROVISIONING
            - ACTIVE
            - DELETING
            - ERROR
            - INVALID
          description: The current state of the VPC NAT gateway.
          example: ACTIVE
        region:
          type: string
          enum:
            - nyc1
            - nyc2
            - nyc3
            - ams2
            - ams3
            - sfo1
            - sfo2
            - sfo3
            - sgp1
            - lon1
            - fra1
            - tor1
            - blr1
            - syd1
            - atl1
          example: tor1
          description: The region in which the VPC NAT gateway is created.
        size:
          type: integer
          example: 1
          description: The size of the VPC NAT gateway.
        vpcs:
          type: array
          items:
            type: object
            properties:
              vpc_uuid:
                type: string
                example: 0d3db13e-a604-4944-9827-7ec2642d32ac
                description: >-
                  The unique identifier of the VPC to which the NAT gateway is
                  attached.
              gateway_ip:
                type: string
                example: 10.118.0.35
                description: The gateway IP address of the VPC NAT gateway.
          description: An array of VPCs associated with the VPC NAT gateway.
        egresses:
          type: object
          properties:
            public_gateways:
              type: array
              description: An array of public gateway IP addresses for the VPC NAT gateway.
              items:
                type: object
                properties:
                  ipv4:
                    type: string
                    example: 174.138.113.197
                    description: IPv4 address of the public gateway.
          description: An object containing egress information for the VPC NAT gateway.
        udp_timeout_seconds:
          type: integer
          example: 30
          description: The UDP timeout in seconds for the VPC NAT gateway.
        icmp_timeout_seconds:
          type: integer
          example: 30
          description: The ICMP timeout in seconds for the VPC NAT gateway.
        tcp_timeout_seconds:
          type: integer
          example: 30
          description: The TCP timeout in seconds for the VPC NAT gateway.
        created_at:
          format: date-time
          title: The creation time of the VPC NAT gateway.
          type: string
          example: '2020-07-28T18:00:00Z'
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the VPC NAT gateway was created.
        updated_at:
          format: date-time
          title: The last update time of the VPC NAT gateway.
          type: string
          example: '2020-07-28T18:00:00Z'
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the VPC NAT gateway was last updated.
    page_links:
      type: object
      properties:
        pages:
          anyOf:
            - $ref: '#/components/schemas/forward_links'
            - $ref: '#/components/schemas/backward_links'
            - {}
          example:
            pages:
              first: https://api.digitalocean.com/v2/account/keys?page=1
              prev: https://api.digitalocean.com/v2/account/keys?page=2
    meta_properties:
      type: object
      description: Information about the response itself.
      properties:
        total:
          description: Number of objects returned by the request.
          type: integer
          example: 1
    disk_info:
      type: object
      properties:
        type:
          type: string
          enum:
            - local
            - scratch
          description: >-
            The type of disk. All Droplets contain a `local` disk. Additionally,
            GPU Droplets can also have a `scratch` disk for non-persistent data.
          example: local
        size:
          type: object
          properties:
            amount:
              type: integer
              description: The amount of space allocated to the disk.
              example: 25
            unit:
              type: string
              description: The unit of measure for the disk size.
              example: gib
    droplet_next_backup_window:
      type: object
      nullable: true
      properties:
        start:
          type: string
          format: date-time
          example: '2019-12-04T00:00:00Z'
          description: >-
            A time value given in ISO8601 combined date and time format
            specifying the start of the Droplet's backup window.
        end:
          type: string
          format: date-time
          example: '2019-12-04T23:00:00Z'
          description: >-
            A time value given in ISO8601 combined date and time format
            specifying the end of the Droplet's backup window.
    network_v4:
      type: object
      properties:
        ip_address:
          type: string
          format: ipv4
          example: 104.236.32.182
          description: The IP address of the IPv4 network interface.
        netmask:
          type: string
          format: ipv4
          example: 255.255.192.0
          description: The netmask of the IPv4 network interface.
        gateway:
          type: string
          example: 104.236.0.1
          description: >
            The gateway of the specified IPv4 network interface.


            For private interfaces, a gateway is not provided. This is denoted
            by

            returning `nil` as its value.
        type:
          type: string
          enum:
            - public
            - private
          example: public
          description: The type of the IPv4 network interface.
    network_v6:
      type: object
      properties:
        ip_address:
          type: string
          format: ipv6
          example: 2604:a880:0:1010::18a:a001
          description: The IP address of the IPv6 network interface.
        netmask:
          type: integer
          example: 64
          description: The netmask of the IPv6 network interface.
        gateway:
          type: string
          format: ipv6
          example: 2604:a880:0:1010::1
          description: The gateway of the specified IPv6 network interface.
        type:
          type: string
          enum:
            - public
          example: public
          description: |
            The type of the IPv6 network interface.

            **Note**: IPv6 private  networking is not currently supported.
    gpu_info:
      type: object
      description: >-
        An object containing information about the GPU capabilities of Droplets
        created with this size.
      properties:
        count:
          type: integer
          description: The number of GPUs allocated to the Droplet.
          example: 1
        model:
          type: string
          description: The model of the GPU.
          example: nvidia_h100
        vram:
          type: object
          properties:
            amount:
              type: integer
              description: The amount of VRAM allocated to the GPU.
              example: 25
            unit:
              type: string
              description: The unit of measure for the VRAM.
              example: gib
    snapshots_base:
      type: object
      properties:
        name:
          type: string
          example: web-01-1595954862243
          description: A human-readable name for the snapshot.
        created_at:
          type: string
          format: date-time
          example: '2020-07-28T16:47:44Z'
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the snapshot was created.
        regions:
          type: array
          items:
            type: string
          example:
            - nyc3
            - sfo3
          description: >-
            An array of the regions that the snapshot is available in. The
            regions are represented by their identifying slug values.
        min_disk_size:
          type: integer
          example: 25
          description: >-
            The minimum size in GB required for a volume or Droplet to use this
            snapshot.
        size_gigabytes:
          type: number
          format: float
          example: 2.34
          description: The billable size of the snapshot in gigabytes.
      required:
        - name
        - created_at
        - regions
        - min_disk_size
        - size_gigabytes
    destroyed_associated_resource:
      type: object
      description: >-
        An object containing information about a resource scheduled for
        deletion.
      properties:
        id:
          type: string
          example: '61486916'
          description: The unique identifier for the resource scheduled for deletion.
        name:
          type: string
          example: ubuntu-s-1vcpu-1gb-nyc1-01-1585758823330
          description: The name of the resource scheduled for deletion.
        destroyed_at:
          type: string
          format: date-time
          example: '2020-04-01T18:11:49Z'
          description: >-
            A time value given in ISO8601 combined date and time format
            indicating when the resource was destroyed if the request was
            successful.
        error_message:
          type: string
          example: ' '
          description: >-
            A string indicating that the resource was not successfully destroyed
            and providing additional information.
    current_utilization:
      type: object
      properties:
        memory:
          type: number
          format: float
          example: 0.3588531587713522
          description: The average memory utilization of the autoscale pool.
          minimum: 0
          maximum: 1
        cpu:
          type: number
          format: float
          example: 0.0007338008770232183
          description: The average CPU utilization of the autoscale pool.
          minimum: 0
          maximum: 1
    member_current_utilization:
      type: object
      properties:
        memory:
          type: number
          format: float
          example: 0.3588531587713522
          description: The memory utilization average of the individual Droplet.
        cpu:
          type: number
          format: float
          example: 0.0007338008770232183
          description: The CPU utilization average of the individual Droplet.
    regions_array:
      type: array
      items:
        $ref: '#/components/schemas/region_slug'
      description: >-
        This attribute is an array of the regions that the image is available
        in. The regions are represented by their identifying slug values.
      example:
        - nyc1
        - nyc2
    health_check:
      type: object
      description: An object specifying health check settings for the load balancer.
      properties:
        protocol:
          type: string
          enum:
            - http
            - https
            - tcp
          default: http
          example: http
          description: >-
            The protocol used for health checks sent to the backend Droplets.
            The possible values are `http`, `https`, or `tcp`.
        port:
          type: integer
          default: 80
          example: 80
          description: >-
            An integer representing the port on the backend Droplets on which
            the health check will attempt a connection.
        path:
          type: string
          default: /
          example: /
          description: >-
            The path on the backend Droplets to which the load balancer instance
            will send a request.
        check_interval_seconds:
          type: integer
          default: 10
          example: 10
          description: The number of seconds between between two consecutive health checks.
        response_timeout_seconds:
          type: integer
          default: 5
          example: 5
          description: >-
            The number of seconds the load balancer instance will wait for a
            response until marking a health check as failed.
        unhealthy_threshold:
          type: integer
          default: 5
          example: 5
          description: >-
            The number of times a health check must fail for a backend Droplet
            to be marked "unhealthy" and be removed from the pool.
        healthy_threshold:
          type: integer
          default: 3
          example: 3
          description: >-
            The number of times a health check must pass for a backend Droplet
            to be marked "healthy" and be re-added to the pool.
    sticky_sessions:
      type: object
      description: An object specifying sticky sessions settings for the load balancer.
      properties:
        type:
          type: string
          enum:
            - cookies
            - none
          example: cookies
          default: none
          description: >-
            An attribute indicating how and if requests from a client will be
            persistently served by the same backend Droplet. The possible values
            are `cookies` or `none`.
        cookie_name:
          type: string
          example: DO-LB
          description: >-
            The name of the cookie sent to the client. This attribute is only
            returned when using `cookies` for the sticky sessions type.
        cookie_ttl_seconds:
          type: integer
          example: 300
          description: >-
            The number of seconds until the cookie set by the load balancer
            expires. This attribute is only returned when using `cookies` for
            the sticky sessions type.
    lb_firewall:
      type: object
      description: >-
        An object specifying allow and deny rules to control traffic to the load
        balancer.
      properties:
        deny:
          type: array
          items:
            type: string
          example:
            - ip:1.2.3.4
            - cidr:2.3.0.0/16
          default: []
          description: >-
            the rules for denying traffic to the load balancer (in the form
            'ip:1.2.3.4' or 'cidr:1.2.0.0/16')
        allow:
          type: array
          items:
            type: string
          example:
            - ip:1.2.3.4
            - cidr:2.3.0.0/16
          default: []
          description: >-
            the rules for allowing traffic to the load balancer (in the form
            'ip:1.2.3.4' or 'cidr:1.2.0.0/16')
    domains:
      type: object
      description: An object specifying domain configurations for a Global load balancer.
      properties:
        name:
          type: string
          example: example.com
          description: FQDN to associate with a Global load balancer.
        is_managed:
          type: boolean
          example: true
          description: >-
            A boolean value indicating if the domain is already managed by
            DigitalOcean. If true, all A and AAAA records required to enable
            Global load balancers will be automatically added.
        certificate_id:
          type: string
          example: 892071a0-bb95-49bc-8021-3afd67a210bf
          description: The ID of the TLS certificate used for SSL termination.
    glb_settings:
      type: object
      description: >-
        An object specifying forwarding configurations for a Global load
        balancer.
      properties:
        target_protocol:
          type: string
          enum:
            - http
            - https
            - http2
          example: http
          description: >-
            The protocol used for forwarding traffic from the load balancer to
            the target backends. The possible values are `http`, `https` and
            `http2`.
        target_port:
          type: integer
          example: 80
          description: >-
            An integer representing the port on the target backends which the
            load balancer will forward traffic to.
        cdn:
          type: object
          properties:
            is_enabled:
              type: boolean
              example: true
              description: A boolean flag to enable CDN caching.
          description: An object specifying CDN configurations for a Global load balancer.
        region_priorities:
          type: object
          additionalProperties:
            type: integer
          example:
            nyc1: 1
            fra1: 2
            sgp1: 3
          description: >-
            A map of region string to an integer priority value indicating
            preference for which regional target a Global load balancer will
            forward traffic to. A lower value indicates a higher priority.
        failover_threshold:
          type: integer
          example: 50
          description: >-
            An integer value as a percentage to indicate failure threshold to
            decide how the regional priorities will take effect. A value of `50`
            would indicate that the Global load balancer will choose a lower
            priority region to forward traffic to once this failure threshold
            has been reached for the higher priority region.
    volume_base_read:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the block storage volume.
          example: 506f78a4-e098-11e5-ad9f-000f53306ae1
          readOnly: true
        droplet_ids:
          type: array
          items:
            type: integer
          nullable: true
          description: >-
            An array containing the IDs of the Droplets the volume is attached
            to. Note that at this time, a volume can only be attached to a
            single Droplet.
          example: []
          readOnly: true
        name:
          type: string
          description: >-
            A human-readable name for the block storage volume. Must be
            lowercase and be composed only of numbers, letters and "-", up to a
            limit of 64 characters. The name must begin with a letter.
          example: example
        description:
          type: string
          description: An optional free-form text field to describe a block storage volume.
          example: Block store for examples
        size_gigabytes:
          type: integer
          description: >-
            The size of the block storage volume in GiB (1024^3). This field
            does not apply  when creating a volume from a snapshot.
          example: 10
        created_at:
          type: string
          description: >-
            A time value given in ISO8601 combined date and time format that
            represents when the block storage volume was created.
          example: '2020-03-02T17:00:49Z'
          readOnly: true
        tags:
          $ref: '#/components/schemas/tags_array_read'
    forward_links:
      allOf:
        - $ref: '#/components/schemas/link_to_last_page'
        - $ref: '#/components/schemas/link_to_next_page'
    backward_links:
      allOf:
        - $ref: '#/components/schemas/link_to_first_page'
        - $ref: '#/components/schemas/link_to_prev_page'
    tags_array_read:
      type: array
      items:
        type: string
      nullable: true
      description: >-
        A flat array of tag names as strings applied to the resource.
        <br><br>Requires `tag:read` scope.
      example:
        - base-image
        - prod
    link_to_last_page:
      type: object
      properties:
        last:
          description: URI of the last page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=2
    link_to_next_page:
      type: object
      properties:
        next:
          description: URI of the next page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=2
    link_to_first_page:
      type: object
      properties:
        first:
          description: URI of the first page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=1
    link_to_prev_page:
      type: object
      properties:
        prev:
          description: URI of the previous page of the results.
          type: string
          example: https://api.digitalocean.com/v2/images?page=1
  responses:
    sshKeys_all:
      description: >-
        A JSON object with the key set to `ssh_keys`. The value is an array of
        `ssh_key` objects, each of which contains the standard `ssh_key`
        attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - properties:
                  ssh_keys:
                    type: array
                    items:
                      $ref: '#/components/schemas/sshKeys'
                type: object
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              ssh_keys:
                - id: 289794
                  fingerprint: 3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45
                  public_key: >-
                    ssh-rsa
                    ANOTHEREXAMPLEaC1yc2EAAAADAQABAAAAQQDDHr/jh2Jy4yALcK4JyWbVkPRaWmhck3IgCoeOO3z1e2dBowLh64QAM+Qb72pxekALga2oi4GvT+TlWNhzPH4V
                    anotherexample
                  name: Other Public Key
              links: {}
              meta:
                total: 1
    unauthorized:
      description: Authentication failed due to invalid credentials.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: unauthorized
            message: Unable to authenticate you.
    too_many_requests:
      description: The API rate limit has been exceeded.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: too_many_requests
            message: API rate limit exceeded.
    server_error:
      description: There was a server error.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: server_error
            message: Unexpected server-side error
    unexpected_error:
      description: There was an unexpected error.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: example_error
            message: some error message
    sshKeys_new:
      description: The response body will be a JSON object with a key set to `ssh_key`.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              ssh_key:
                $ref: '#/components/schemas/sshKeys'
            type: object
      links:
        sshKeys_get_by_id:
          $ref: '#/components/links/sshKeys_get_by_id'
        sshKeys_get_by_fingerprint:
          $ref: '#/components/links/sshKeys_get_by_fingerprint'
        sshKeys_delete_by_id:
          $ref: '#/components/links/sshKeys_delete_by_id'
        sshKeys_delete_by_fingerprint:
          $ref: '#/components/links/sshKeys_delete_by_fingerprint'
    sshKeys_existing:
      description: >-
        A JSON object with the key set to `ssh_key`. The value is an `ssh_key`
        object containing the standard `ssh_key` attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              ssh_key:
                $ref: '#/components/schemas/sshKeys'
            type: object
      links:
        sshKeys_get_by_id:
          $ref: '#/components/links/sshKeys_get_by_id'
        sshKeys_get_by_fingerprint:
          $ref: '#/components/links/sshKeys_get_by_fingerprint'
        sshKeys_delete_by_id:
          $ref: '#/components/links/sshKeys_delete_by_id'
        sshKeys_delete_by_fingerprint:
          $ref: '#/components/links/sshKeys_delete_by_fingerprint'
    not_found:
      description: The resource was not found.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: not_found
            message: The resource you requested could not be found.
    no_content:
      description: The action was successful and the response body is empty.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
    all_cdn_endpoints:
      description: >-
        The result will be a JSON object with an `endpoints` key. This will be
        set to an array of endpoint objects, each of which will contain the
        standard CDN endpoint attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  endpoints:
                    type: array
                    items:
                      $ref: '#/components/schemas/cdn_endpoint'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              endpoints:
                - id: 19f06b6a-3ace-4315-b086-499a0e521b76
                  origin: static-images.nyc3.digitaloceanspaces.com
                  endpoint: static-images.nyc3.cdn.digitaloceanspaces.com
                  created_at: '2018-07-19T15:04:16Z'
                  certificate_id: 892071a0-bb95-49bc-8021-3afd67a210bf
                  custom_domain: static.example.com
                  ttl: 3600
              links: {}
              meta:
                total: 1
    existing_endpoint:
      description: >-
        The response will be a JSON object with an `endpoint` key. This will be
        set to an object containing the standard CDN endpoint attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              endpoint:
                $ref: '#/components/schemas/cdn_endpoint'
            type: object
          examples:
            CDN Endpoint:
              value:
                endpoint:
                  id: 19f06b6a-3ace-4315-b086-499a0e521b76
                  origin: static-images.nyc3.digitaloceanspaces.com
                  endpoint: static-images.nyc3.cdn.digitaloceanspaces.com
                  created_at: '2018-07-19T15:04:16Z'
                  ttl: 3600
            CDN Endpoint With Custom Domain:
              value:
                endpoint:
                  id: 19f06b6a-3ace-4315-b086-499a0e521b76
                  origin: static-images.nyc3.digitaloceanspaces.com
                  endpoint: static-images.nyc3.cdn.digitaloceanspaces.com
                  created_at: '2018-07-19T15:04:16Z'
                  certificate_id: 892071a0-bb95-49bc-8021-3afd67a210bf
                  custom_domain: static.example.com
                  ttl: 3600
    all_certificates:
      description: >-
        The result will be a JSON object with a `certificates` key. This will be
        set to an array of certificate objects, each of which will contain the
        standard certificate attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  certificates:
                    type: array
                    items:
                      $ref: '#/components/schemas/certificate'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          examples:
            AllCertificates:
              $ref: '#/components/examples/certificates_all'
    new_certificate:
      description: >-
        The response will be a JSON object with a key called `certificate`. The
        value of this will be an object that contains the standard attributes
        associated with a certificate.

        When using Let's Encrypt, the initial value of the certificate's `state`
        attribute will be `pending`. When the certificate has been successfully
        issued by Let's Encrypt, this will transition to `verified` and be ready
        for use.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              certificate:
                $ref: '#/components/schemas/certificate'
          examples:
            Custom Certificate:
              $ref: '#/components/examples/certificates_custom'
            Let's Encrypt Certificate:
              $ref: '#/components/examples/certificates_lets_encrypt_pending'
    existing_certificate:
      description: >-
        The response will be a JSON object with a `certificate` key. This will
        be set to an object containing the standard certificate attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              certificate:
                $ref: '#/components/schemas/certificate'
          examples:
            Custom Certificate:
              $ref: '#/components/examples/certificates_custom'
            Let's Encrypt Certificate:
              $ref: '#/components/examples/certificates_lets_encrypt'
    all_domains_response:
      description: >-
        The response will be a JSON object with a key called `domains`. The
        value of this will be an array of Domain objects, each of which contain
        the standard domain attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  domains:
                    type: array
                    items:
                      $ref: '#/components/schemas/domain'
                    description: Array of volumes.
                required:
                  - domains
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              domains:
                - name: example.com
                  ttl: 1800
                  zone_file: >
                    $ORIGIN example.com.

                    $TTL 1800

                    example.com. IN SOA ns1.digitalocean.com.
                    hostmaster.example.com. 1415982609 10800 3600 604800 1800

                    example.com. 1800 IN NS ns1.digitalocean.com.

                    example.com. 1800 IN NS ns2.digitalocean.com.

                    example.com. 1800 IN NS ns3.digitalocean.com.

                    example.com. 1800 IN A 1.2.3.4
              links: {}
              meta:
                total: 1
    create_domain_response:
      description: >-
        The response will be a JSON object with a key called `domain`. The value
        of this will be an object that contains the standard attributes
        associated with a domain.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              domain:
                $ref: '#/components/schemas/domain'
            example:
              domain:
                name: example.com
                ttl: 1800
                zone_file: null
            type: object
    existing_domain:
      description: >-
        The response will be a JSON object with a key called `domain`. The value
        of this will be an object that contains the standard attributes defined
        for a domain.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              domain:
                $ref: '#/components/schemas/domain'
            example:
              domain:
                name: example.com
                ttl: 1800
                zone_file: >
                  $ORIGIN example.com.

                  $TTL 1800

                  example.com. IN SOA ns1.digitalocean.com.
                  hostmaster.example.com. 1415982611 10800 3600 604800 1800

                  example.com. 1800 IN NS ns1.digitalocean.com.

                  example.com. 1800 IN NS ns2.digitalocean.com.

                  example.com. 1800 IN NS ns3.digitalocean.com.

                  example.com. 1800 IN A 1.2.3.4
            type: object
    all_domain_records_response:
      description: >-
        The response will be a JSON object with a key called `domain_records`.
        The value of this will be an array of domain record objects, each of
        which contains the standard domain record attributes. For attributes
        that are not used by a specific record type, a value of `null` will be
        returned. For instance, all records other than SRV will have `null` for
        the `weight` and `port` attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  domain_records:
                    type: array
                    items:
                      $ref: '#/components/schemas/domain_record'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          examples:
            All Domain Records:
              $ref: '#/components/examples/domain_records_all'
    created_domain_record:
      description: >-
        The response body will be a JSON object with a key called
        `domain_record`. The value of this will be an object representing the
        new record. Attributes that are not applicable for the record type will
        be set to `null`. An `id` attribute is generated for each record as part
        of the object.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              domain_record:
                $ref: '#/components/schemas/domain_record'
            example:
              domain_record:
                id: 28448433
                type: A
                name: www
                data: 162.10.66.0
                priority: null
                port: null
                ttl: 1800
                weight: null
                flags: null
                tag: null
            type: object
    domain_record:
      description: >-
        The response will be a JSON object with a key called `domain_record`.
        The value of this will be a domain record object which contains the
        standard domain record attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              domain_record:
                $ref: '#/components/schemas/domain_record'
            example:
              domain_record:
                id: 3352896
                type: A
                name: blog
                data: 162.10.66.0
                priority: null
                port: null
                ttl: 1800
                weight: null
                flags: null
                tag: null
            type: object
    all_droplets:
      description: A JSON object with a key of `droplets`.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  droplets:
                    type: array
                    items:
                      $ref: '#/components/schemas/droplet'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          examples:
            All Droplets:
              $ref: '#/components/examples/droplets_all'
            Droplets Filtered By Tag:
              $ref: '#/components/examples/droplets_tagged'
            GPU Droplets:
              $ref: '#/components/examples/gpu_droplets'
    droplet_create:
      description: Accepted
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            oneOf:
              - title: Single Droplet Response
                properties:
                  droplet:
                    $ref: '#/components/schemas/droplet'
                  links:
                    type: object
                    properties:
                      actions:
                        type: array
                        items:
                          $ref: '#/components/schemas/action_link'
                required:
                  - droplet
                  - links
                type: object
              - title: Multiple Droplet Response
                properties:
                  droplets:
                    type: array
                    items:
                      $ref: '#/components/schemas/droplet'
                  links:
                    type: object
                    properties:
                      actions:
                        type: array
                        items:
                          $ref: '#/components/schemas/action_link'
                required:
                  - droplets
                  - links
                type: object
          examples:
            Single Droplet Create Response:
              $ref: '#/components/examples/droplet_create_response'
            Multiple Droplet Create Response:
              $ref: '#/components/examples/droplet_multi_create_response'
    no_content_with_content_type:
      description: >-
        The action was successful and the response body is empty. This response
        has content-type set.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
        content-type:
          $ref: '#/components/headers/content-type'
    existing_droplet:
      description: >
        The response will be a JSON object with a key called `droplet`. This
        will be

        set to a JSON object that contains the standard Droplet attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              droplet:
                $ref: '#/components/schemas/droplet'
            type: object
          examples:
            Single Droplet:
              $ref: '#/components/examples/droplet_single'
    all_droplet_backups:
      description: A JSON object with an `backups` key.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  backups:
                    type: array
                    items:
                      $ref: '#/components/schemas/droplet_snapshot'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          example:
            backups:
              - id: 67539192
                name: web-01- 2020-07-29
                distribution: Ubuntu
                slug: null
                public: false
                regions:
                  - nyc3
                created_at: '2020-07-29T01:44:35Z'
                min_disk_size: 50
                size_gigabytes: 2.34
                type: backup
            links: {}
            meta:
              total: 1
    droplet_backup_policy:
      description: >
        The response will be a JSON object with a key called `policy`. This will
        be

        set to a JSON object that contains the standard Droplet backup policy
        attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              policy:
                $ref: '#/components/schemas/droplet_backup_policy_record'
            type: object
          example:
            policy:
              droplet_id: 444909706
              backup_enabled: true
              backup_policy:
                plan: weekly
                weekday: SUN
                hour: 20
                window_length_hours: 4
                retention_period_days: 28
              next_backup_window:
                start: '2024-09-15T20:00:00Z'
                end: '2024-09-16T00:00:00Z'
    all_droplet_backup_policies:
      description: >-
        A JSON object with a `policies` key set to a map. The keys are Droplet
        IDs and the values are objects containing the backup policy information
        for each Droplet.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  policies:
                    type: object
                    description: >
                      A map where the keys are the Droplet IDs and the values
                      are

                      objects containing the backup policy information for each
                      Droplet.
                    additionalProperties:
                      $ref: '#/components/schemas/droplet_backup_policy_record'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          example:
            policies:
              '436444618':
                droplet_id: 436444618
                backup_enabled: false
              '444909314':
                droplet_id: 444909314
                backup_enabled: true
                backup_policy:
                  plan: daily
                  hour: 20
                  window_length_hours: 4
                  retention_period_days: 7
                next_backup_window:
                  start: '2024-09-13T20:00:00Z'
                  end: '2024-09-14T00:00:00Z'
              '444909706':
                droplet_id: 444909706
                backup_enabled: true
                backup_policy:
                  plan: weekly
                  weekday: SUN
                  hour: 20
                  window_length_hours: 4
                  retention_period_days: 28
                next_backup_window:
                  start: '2024-09-15T20:00:00Z'
                  end: '2024-09-16T00:00:00Z'
            links: {}
            meta:
              total: 3
    droplets_supported_backup_policies:
      description: >-
        A JSON object with an `supported_policies` key set to an array of
        objects describing each supported backup policy.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              supported_policies:
                type: array
                items:
                  $ref: '#/components/schemas/supported_droplet_backup_policy'
          example:
            supported_policies:
              - name: weekly
                possible_window_starts:
                  - 0
                  - 4
                  - 8
                  - 12
                  - 16
                  - 20
                window_length_hours: 4
                retention_period_days: 28
                possible_days:
                  - SUN
                  - MON
                  - TUE
                  - WED
                  - THU
                  - FRI
                  - SAT
              - name: daily
                possible_window_starts:
                  - 0
                  - 4
                  - 8
                  - 12
                  - 16
                  - 20
                window_length_hours: 4
                retention_period_days: 7
                possible_days: []
    all_droplet_snapshots:
      description: A JSON object with an `snapshots` key.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  snapshots:
                    type: array
                    items:
                      $ref: '#/components/schemas/droplet_snapshot'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          example:
            snapshots:
              - id: 6372321
                name: web-01-1595954862243
                created_at: '2020-07-28T16:47:44Z'
                regions:
                  - nyc3
                  - sfo3
                min_disk_size: 25
                size_gigabytes: 2.34
                type: snapshot
            links: {}
            meta:
              total: 1
    all_droplet_actions:
      description: A JSON object with an `actions` key.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  actions:
                    type: array
                    items:
                      $ref: '#/components/schemas/action'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          example:
            actions:
              - id: 982864273
                status: completed
                type: create
                started_at: '2020-07-20T19:37:30Z'
                completed_at: '2020-07-20T19:37:45Z'
                resource_id: 3164444
                resource_type: droplet
                region:
                  name: New York 3
                  slug: nyc3
                  features:
                    - private_networking
                    - backups
                    - ipv6
                    - metadata
                    - install_agent
                    - image_transfer
                  available: true
                  sizes:
                    - s-1vcpu-1gb
                    - s-1vcpu-2gb
                    - s-3vcpu-1gb
                    - s-2vcpu-2gb
                    - s-1vcpu-3gb
                    - s-2vcpu-4gb
                    - s-4vcpu-8gb
                    - m-1vcpu-8gb
                    - s-6vcpu-16gb
                    - s-8vcpu-32gb
                    - s-12vcpu-48gb
                region_slug: nyc3
            links: {}
            meta:
              total: 1
    droplet_action:
      description: The response will be a JSON object with a key called `action`.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              action:
                $ref: '#/components/schemas/action'
            type: object
    droplet_actions_response:
      description: The response will be a JSON object with a key called `actions`.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              actions:
                type: array
                items:
                  $ref: '#/components/schemas/action'
            type: object
    action:
      description: >-
        The result will be a JSON object with an action key.  This will be set
        to an action object containing the standard action attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              action:
                $ref: '#/components/schemas/action'
            type: object
    all_kernels:
      description: A JSON object that has a key called `kernels`.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  kernels:
                    type: array
                    items:
                      $ref: '#/components/schemas/kernel'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          example:
            kernels:
              - id: 7515
                name: DigitalOcean GrubLoader v0.2 (20160714)
                version: 2016.07.13-DigitalOcean_loader_Ubuntu
            links:
              pages:
                next: >-
                  https://api.digitalocean.com/v2/droplets/3164444/kernels?page=2&per_page=1
                last: >-
                  https://api.digitalocean.com/v2/droplets/3164444/kernels?page=171&per_page=1
            meta:
              total: 171
    all_firewalls:
      description: A JSON object that has a key called `firewalls`.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  firewalls:
                    type: array
                    items:
                      $ref: '#/components/schemas/firewall'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          example:
            firewalls:
              - id: bb4b2611-3d72-467b-8602-280330ecd65c
                status: succeeded
                created_at: '2020-05-23T21:24:00Z'
                pending_changes:
                  - droplet_id: 8043964
                    removing: true
                    status: waiting
                name: firewall
                droplet_ids:
                  - 89989
                  - 33322
                tags:
                  - base-image
                  - prod
                inbound_rules:
                  - protocol: udp
                    ports: 8000-9000
                    sources:
                      addresses:
                        - 1.2.3.4
                        - 18.0.0.0/8
                      droplet_ids:
                        - 8282823
                        - 3930392
                      load_balancer_uids:
                        - 4de7ac8b-495b-4884-9a69-1050c6793cd6
                      tags:
                        - base-image
                        - dev
                outbound_rules:
                  - protocol: tcp
                    ports: 7000-9000
                    destinations:
                      addresses:
                        - 1.2.3.4
                        - 18.0.0.0/8
                      droplet_ids:
                        - 3827493
                        - 213213
                      load_balancer_uids:
                        - 4de7ac8b-495b-4884-9a69-1050c6793cd6
                      tags:
                        - base-image
                        - prod
            links:
              pages: {}
            meta:
              total: 1
    neighbor_droplets:
      description: A JSON object with an `droplets` key.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  droplets:
                    type: array
                    items:
                      $ref: '#/components/schemas/droplet'
    associated_resources_list:
      description: >-
        A JSON object containing `snapshots`, `volumes`, and `volume_snapshots`
        keys.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  reserved_ips:
                    type: array
                    description: >-
                      Reserved IPs that are associated with this
                      Droplet.<br>Requires `reserved_ip:read` scope.
                    items:
                      $ref: '#/components/schemas/associated_resource'
                  floating_ips:
                    type: array
                    description: >-
                      Floating IPs that are associated with this
                      Droplet.<br>Requires `reserved_ip:read` scope.
                    items:
                      $ref: '#/components/schemas/associated_resource'
                  snapshots:
                    type: array
                    description: >-
                      Snapshots that are associated with this
                      Droplet.<br>Requires `image:read` scope.
                    items:
                      $ref: '#/components/schemas/associated_resource'
                  volumes:
                    type: array
                    description: >-
                      Volumes that are associated with this Droplet.<br>Requires
                      `block_storage:read` scope.
                    items:
                      $ref: '#/components/schemas/associated_resource'
                  volume_snapshots:
                    type: array
                    description: >-
                      Volume Snapshots that are associated with this
                      Droplet.<br>Requires `block_storage_snapshot:read` scope.
                    items:
                      $ref: '#/components/schemas/associated_resource'
          example:
            reserved_ips:
              - id: '6186916'
                name: 45.55.96.47
                cost: '4.00'
            floating_ips:
              - id: '6186916'
                name: 45.55.96.47
                cost: '4.00'
            snapshots:
              - id: '61486916'
                name: ubuntu-s-1vcpu-1gb-nyc1-01-1585758823330
                cost: '0.05'
            volumes:
              - id: ba49449a-7435-11ea-b89e-0a58ac14480f
                name: volume-nyc1-01
                cost: '10.00'
            volume_snapshots:
              - id: edb0478d-7436-11ea-86e6-0a58ac144b91
                name: volume-nyc1-01-1585758983629
                cost: '0.04'
    accepted:
      description: >-
        This does not indicate the success or failure of any operation, just
        that the request has been accepted for processing.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
    associated_resources_status:
      description: >-
        A JSON object containing containing the status of a request to destroy a
        Droplet and its associated resources.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/associated_resource_status'
          example:
            droplet:
              id: '187000742'
              name: ubuntu-s-1vcpu-1gb-nyc1-01
              destroyed_at: '2020-04-01T18:11:49Z'
            resources:
              reserved_ips:
                - id: '6186916'
                  name: 45.55.96.47
                  destroyed_at: '2020-04-01T18:11:44Z'
              floating_ips:
                - id: '6186916'
                  name: 45.55.96.47
                  destroyed_at: '2020-04-01T18:11:44Z'
              snapshots:
                - id: '61486916'
                  name: ubuntu-s-1vcpu-1gb-nyc1-01-1585758823330
                  destroyed_at: '2020-04-01T18:11:44Z'
              volumes: []
              volume_snapshots:
                - id: edb0478d-7436-11ea-86e6-0a58ac144b91
                  name: volume-nyc1-01-1585758983629
                  destroyed_at: '2020-04-01T18:11:44Z'
            completed_at: '2020-04-01T18:11:49Z'
            failures: 0
    conflict:
      description: The request could not be completed due to a conflict.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: conflict
            message: The request could not be completed due to a conflict.
    all_autoscale_pools:
      description: A JSON object with a key of `autoscale_pools`.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  autoscale_pools:
                    type: array
                    items:
                      $ref: '#/components/schemas/autoscale_pool'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          examples:
            All Autoscale Pools:
              $ref: '#/components/examples/autoscale_pools_all'
    autoscale_pool_create:
      description: Accepted
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              autoscale_pool:
                $ref: '#/components/schemas/autoscale_pool'
            type: object
          examples:
            Autoscale Create Response Dynamic Config:
              $ref: '#/components/examples/autoscale_create_response_dynamic'
            Autoscale Create Response Static Config:
              $ref: '#/components/examples/autoscale_create_response_static'
    existing_autoscale_pool:
      description: >
        The response will be a JSON object with a key called `autoscale_pool`.
        This will be

        set to a JSON object that contains the standard autoscale pool
        attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              autoscale_pool:
                $ref: '#/components/schemas/autoscale_pool'
            type: object
          examples:
            Single Autoscale Pool:
              $ref: '#/components/examples/autoscale_pool_single'
    all_members:
      description: A JSON object with a key of `droplets`.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  droplets:
                    type: array
                    items:
                      $ref: '#/components/schemas/member'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          examples:
            All members:
              $ref: '#/components/examples/members_all'
    history_events:
      description: A JSON object with a key of `history`.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  history:
                    type: array
                    items:
                      $ref: '#/components/schemas/history'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          examples:
            All History Events:
              $ref: '#/components/examples/history_all'
    list_firewalls_response:
      description: >-
        To list all of the firewalls available on your account, send a GET
        request to `/v2/firewalls`.<br><br>Firewalls responses will include only
        the resources that you are granted to see. Ensure that your API token
        includes all necessary `<resource>:read` permissions for requested
        firewall.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  firewalls:
                    type: array
                    items:
                      $ref: '#/components/schemas/firewall'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          example:
            firewalls:
              - id: fb6045f1-cf1d-4ca3-bfac-18832663025b
                name: firewall
                status: succeeded
                inbound_rules:
                  - protocol: tcp
                    ports: '80'
                    sources:
                      load_balancer_uids:
                        - 4de7ac8b-495b-4884-9a69-1050c6793cd6
                  - protocol: tcp
                    ports: '22'
                    sources:
                      tags:
                        - gateway
                      addresses:
                        - 18.0.0.0/8
                outbound_rules:
                  - protocol: tcp
                    ports: '80'
                    destinations:
                      addresses:
                        - 0.0.0.0/0
                        - '::/0'
                created_at: '2017-05-23T21:23:59Z'
                droplet_ids:
                  - 8043964
                tags: []
                pending_changes: []
            links: {}
            meta:
              total: 1
    create_firewall_response:
      description: >-
        The response will be a JSON object with a firewall key. This will be set
        to an object containing the standard firewall attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              firewall:
                $ref: '#/components/schemas/firewall'
            type: object
          example:
            firewall:
              id: bb4b2611-3d72-467b-8602-280330ecd65c
              name: firewall
              status: waiting
              inbound_rules:
                - protocol: tcp
                  ports: '80'
                  sources:
                    load_balancer_uids:
                      - 4de7ac8b-495b-4884-9a69-1050c6793cd6
                - protocol: tcp
                  ports: '22'
                  sources:
                    tags:
                      - gateway
                    addresses:
                      - 18.0.0.0/8
              outbound_rules:
                - protocol: tcp
                  ports: '80'
                  destinations:
                    addresses:
                      - 0.0.0.0/0
                      - '::/0'
              created_at: '2017-05-23T21:24:00Z'
              droplet_ids:
                - 8043964
              tags: []
              pending_changes:
                - droplet_id: 8043964
                  removing: false
                  status: waiting
    bad_request:
      description: There was an error parsing the request body.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: bad_request
            message: error parsing request body
            request_id: 4851a473-1621-42ea-b2f9-5071c0ea8414
    get_firewall_response:
      description: >-
        The response will be a JSON object with a firewall key. This will be set
        to an object containing the standard firewall
        attributes.<br><br>Firewalls responses will include only the resources
        that you are granted to see. Ensure that your API token includes all
        necessary `<resource>:read` permissions for requested firewall.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              firewall:
                $ref: '#/components/schemas/firewall'
            type: object
          example:
            firewall:
              id: bb4b2611-3d72-467b-8602-280330ecd65c
              name: firewall
              status: succeeded
              inbound_rules:
                - protocol: tcp
                  ports: '80'
                  sources:
                    load_balancer_uids:
                      - 4de7ac8b-495b-4884-9a69-1050c6793cd6
                - protocol: tcp
                  ports: '22'
                  sources:
                    tags:
                      - gateway
                    addresses:
                      - 18.0.0.0/8
              outbound_rules:
                - protocol: tcp
                  ports: '80'
                  destinations:
                    addresses:
                      - 0.0.0.0/0
                      - '::/0'
              created_at: '2017-05-23T21:24:00Z'
              droplet_ids:
                - 8043964
              tags: []
              pending_changes: []
    put_firewall_response:
      description: >-
        The response will be a JSON object with a `firewall` key. This will be
        set to an object containing the standard firewall attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              firewall:
                $ref: '#/components/schemas/firewall'
            type: object
          example:
            firewall:
              id: bb4b2611-3d72-467b-8602-280330ecd65c
              name: frontend-firewall
              inbound_rules:
                - protocol: tcp
                  ports: '80'
                  sources:
                    load_balancer_uids:
                      - 4de7ac8b-495b-4884-9a69-1050c6793cd6
                - protocol: tcp
                  ports: '22'
                  sources:
                    tags:
                      - gateway
                    addresses:
                      - 18.0.0.0/8
              outbound_rules:
                - protocol: tcp
                  ports: '80'
                  destinations:
                    addresses:
                      - 0.0.0.0/0
                      - '::/0'
              created_at: '2020-05-23T21:24:00Z'
              droplet_ids:
                - 8043964
              tags:
                - frontend
              status: waiting
              pending_changes:
                - droplet_id: 8043964
                  removing: false
                  status: waiting
    all_images:
      description: >-
        The response will be a JSON object with a key called `images`.  This
        will be set to an array of image objects, each of which will contain the
        standard image attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  images:
                    type: array
                    items:
                      $ref: '#/components/schemas/image'
                required:
                  - images
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          examples:
            All:
              $ref: '#/components/examples/images_all'
            Snapshots:
              $ref: '#/components/examples/images_snapshots'
            Distribution:
              $ref: '#/components/examples/images_distribution'
            Custom:
              $ref: '#/components/examples/images_custom'
            Application:
              $ref: '#/components/examples/images_application'
            Tagged:
              $ref: '#/components/examples/images_tagged'
    new_custom_image:
      description: >-
        The response will be a JSON object with a key set to `image`.  The value
        of this will be an image object containing a subset of the standard 
        image attributes as listed below, including the image's `id` and
        `status`.  After initial creation, the `status` will be `NEW`. Using the
        image's id, you  may query the image's status by sending a `GET` request
        to the  `/v2/images/$IMAGE_ID` endpoint.  When the `status` changes to
        `available`, the image will be ready for use.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              image:
                $ref: '#/components/schemas/image'
            type: object
          example:
            image:
              created_at: '2018-09-20T19:28:00Z'
              description: Cloud-optimized image w/ small footprint
              distribution: Ubuntu
              error_message: ''
              id: 38413969
              name: ubuntu-18.04-minimal
              regions: []
              type: custom
              tags:
                - base-image
                - prod
              status: NEW
    existing_image:
      description: >-
        The response will be a JSON object with a key called `image`.  The value
        of this will be an image object containing the standard image
        attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              image:
                $ref: '#/components/schemas/image'
            required:
              - image
          example:
            image:
              id: 6918990
              name: 14.04 x64
              distribution: Ubuntu
              slug: ubuntu-16-04-x64
              public: true
              regions:
                - nyc1
                - ams1
                - sfo1
                - nyc2
                - ams2
                - sgp1
                - lon1
                - nyc3
                - ams3
                - nyc3
              created_at: '2014-10-17T20:24:33Z'
              min_disk_size: 20
              size_gigabytes: 2.34
              description: ''
              tags: []
              status: available
              error_message: ''
    updated_image:
      description: >-
        The response will be a JSON object with a key set to `image`.  The value
        of this will be an image object containing the standard image
        attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              image:
                $ref: '#/components/schemas/image'
            required:
              - image
          example:
            image:
              id: 7938391
              name: new-image-name
              distribution: Ubuntu
              slug: null
              public: false
              regions:
                - nyc3
                - nyc3
              created_at: '2014-11-14T16:44:03Z'
              min_disk_size: 20
              size_gigabytes: 2.34
              description: ''
              tags: []
              status: available
              error_message: ''
    get_image_actions_response:
      description: >-
        The results will be returned as a JSON object with an `actions` key.
        This will be set to an array filled with action objects containing the
        standard action attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  actions:
                    type: array
                    items:
                      $ref: '#/components/schemas/action'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          example:
            actions:
              - id: 29410565
                status: completed
                type: transfer
                started_at: '2014-07-25T15:04:21Z'
                completed_at: '2014-07-25T15:10:20Z'
                resource_id: 7555620
                resource_type: image
                region:
                  name: New York 2
                  slug: nyc2
                  sizes:
                    - s-1vcpu-3gb
                    - m-1vcpu-8gb
                    - s-3vcpu-1gb
                    - s-1vcpu-2gb
                    - s-2vcpu-2gb
                    - s-2vcpu-4gb
                    - s-4vcpu-8gb
                    - s-6vcpu-16gb
                    - s-8vcpu-32gb
                    - s-12vcpu-48gb
                    - s-16vcpu-64gb
                    - s-20vcpu-96gb
                    - s-1vcpu-1gb
                    - c-1vcpu-2gb
                    - s-24vcpu-128gb
                  features:
                    - private_networking
                    - backups
                    - ipv6
                    - metadata
                    - server_id
                    - install_agent
                    - storage
                    - image_transfer
                  available: true
                region_slug: nyc2
            links:
              pages:
                last: >-
                  https://api.digitalocean.com/v2/images/7555620/actions?page=5&per_page=1
                next: >-
                  https://api.digitalocean.com/v2/images/7555620/actions?page=2&per_page=1
            meta:
              total: 5
    post_image_action_response:
      description: >-
        The response will be a JSON object with a key called `action`. The value
        of this will be an object containing the standard image action
        attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/action'
          example:
            action:
              id: 36805527
              status: in-progress
              type: transfer
              started_at: '2014-11-14T16:42:45Z'
              completed_at: null
              resource_id: 7938269
              resource_type: image
              region:
                name: New York 3
                slug: nyc3
                sizes:
                  - s-1vcpu-3gb
                  - m-1vcpu-8gb
                  - s-3vcpu-1gb
                  - s-1vcpu-2gb
                  - s-2vcpu-2gb
                  - s-2vcpu-4gb
                  - s-4vcpu-8gb
                  - s-6vcpu-16gb
                  - s-8vcpu-32gb
                  - s-12vcpu-48gb
                  - s-16vcpu-64gb
                  - s-20vcpu-96gb
                  - s-1vcpu-1gb
                  - c-1vcpu-2gb
                  - s-24vcpu-128gb
                features:
                  - private_networking
                  - backups
                  - ipv6
                  - metadata
                  - server_id
                  - install_agent
                  - storage
                  - image_transfer
                available: true
              region_slug: nyc3
    get_image_action_response:
      description: >-
        The response will be an object with a key called `action`. The value of
        this will be an object that contains the standard image action
        attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/action'
          example:
            action:
              id: 36805527
              status: in-progress
              type: transfer
              started_at: '2014-11-14T16:42:45Z'
              completed_at: null
              resource_id: 7938269
              resource_type: image
              region:
                name: New York 3
                slug: nyc3
                sizes:
                  - s-1vcpu-3gb
                  - m-1vcpu-8gb
                  - s-3vcpu-1gb
                  - s-1vcpu-2gb
                  - s-2vcpu-2gb
                  - s-2vcpu-4gb
                  - s-4vcpu-8gb
                  - s-6vcpu-16gb
                  - s-8vcpu-32gb
                  - s-12vcpu-48gb
                  - s-16vcpu-64gb
                  - s-20vcpu-96gb
                  - s-1vcpu-1gb
                  - c-1vcpu-2gb
                  - s-24vcpu-128gb
                features:
                  - private_networking
                  - backups
                  - ipv6
                  - metadata
                  - server_id
                  - install_agent
                  - storage
                  - image_transfer
                available: true
              region_slug: nyc3
    load_balancer_create:
      description: Accepted
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              load_balancer:
                $ref: '#/components/schemas/load_balancer'
            type: object
          examples:
            Basic Create Response:
              $ref: '#/components/examples/load_balancer_basic_response'
            SSL Termination Create Response:
              $ref: '#/components/examples/load_balancer_ssl_termination_response'
            Create Response Using Droplet Tag:
              $ref: '#/components/examples/load_balancer_using_tag_response'
            Sticky Sessions and Custom Health Check:
              $ref: >-
                #/components/examples/load_balancer_sticky_sessions_and_health_check_response
    all_load_balancers:
      description: >-
        A JSON object with a key of `load_balancers`. This will be set to an
        array of objects, each of which will contain the standard load balancer
        attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  load_balancers:
                    type: array
                    items:
                      $ref: '#/components/schemas/load_balancer'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          examples:
            All Load Balancers:
              $ref: '#/components/examples/load_balancers_all'
    existing_load_balancer:
      description: >
        The response will be a JSON object with a key called `load_balancer`.
        The

        value of this will be an object that contains the standard attributes

        associated with a load balancer
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              load_balancer:
                $ref: '#/components/schemas/load_balancer'
            type: object
          examples:
            load_balancer_basic_response:
              $ref: '#/components/examples/load_balancer_basic_response'
    updated_load_balancer:
      description: >
        The response will be a JSON object with a key called `load_balancer`.
        The

        value of this will be an object containing the standard attributes of a

        load balancer.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              load_balancer:
                $ref: '#/components/schemas/load_balancer'
            type: object
          examples:
            load_balancer_update_response:
              $ref: '#/components/examples/load_balancer_update_response'
    all_regions:
      description: >-
        A JSON object with a key set to `regions`. The value is an array of
        `region` objects, each of which contain the standard `region`
        attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  regions:
                    type: array
                    items:
                      $ref: '#/components/schemas/region'
                required:
                  - regions
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              regions:
                - name: New York 3
                  slug: nyc3
                  features:
                    - private_networking
                    - backups
                    - ipv6
                    - metadata
                    - install_agent
                    - storage
                    - image_transfer
                  available: true
                  sizes:
                    - s-1vcpu-1gb
                    - s-1vcpu-2gb
                    - s-1vcpu-3gb
                    - s-2vcpu-2gb
                    - s-3vcpu-1gb
                    - s-2vcpu-4gb
                    - s-4vcpu-8gb
                    - s-6vcpu-16gb
                    - s-8vcpu-32gb
                    - s-12vcpu-48gb
                    - s-16vcpu-64gb
                    - s-20vcpu-96gb
                    - s-24vcpu-128gb
                    - s-32vcpu-192g
              links:
                pages:
                  last: https://api.digitalocean.com/v2/regions?page=13&per_page=1
                  next: https://api.digitalocean.com/v2/regions?page=2&per_page=1
              meta:
                total: 13
    droplet_neighbors_ids:
      description: A JSON object with an `neighbor_ids` key.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/neighbor_ids'
    reserved_ip_list:
      description: >-
        The response will be a JSON object with a key called `reserved_ips`.
        This will be set to an array of reserved IP objects, each of which will
        contain the standard reserved IP attributes
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  reserved_ips:
                    type: array
                    items:
                      $ref: '#/components/schemas/reserved_ip'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              reserved_ips:
                - ip: 45.55.96.47
                  droplet: null
                  region:
                    name: New York 3
                    slug: nyc3
                    features:
                      - private_networking
                      - backups
                      - ipv6
                      - metadata
                      - install_agent
                      - storage
                      - image_transfer
                    available: true
                    sizes:
                      - s-1vcpu-1gb
                      - s-1vcpu-2gb
                      - s-1vcpu-3gb
                      - s-2vcpu-2gb
                      - s-3vcpu-1gb
                      - s-2vcpu-4gb
                      - s-4vcpu-8gb
                      - s-6vcpu-16gb
                      - s-8vcpu-32gb
                      - s-12vcpu-48gb
                      - s-16vcpu-64gb
                      - s-20vcpu-96gb
                      - s-24vcpu-128gb
                      - s-32vcpu-192g
                  locked: false
                  project_id: 746c6152-2fa2-11ed-92d3-27aaa54e4988
              links: {}
              meta:
                total: 1
    reserved_ip_created:
      description: >-
        The response will be a JSON object with a key called `reserved_ip`. The
        value of this will be an object that contains the standard attributes
        associated with a reserved IP.

        When assigning a reserved IP to a Droplet at same time as it created,
        the response's `links` object will contain links to both the Droplet and
        the assignment action. The latter can be used to check the status of the
        action.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              reserved_ip:
                $ref: '#/components/schemas/reserved_ip'
              links:
                type: object
                properties:
                  droplets:
                    type: array
                    items:
                      $ref: '#/components/schemas/action_link'
                  actions:
                    type: array
                    items:
                      $ref: '#/components/schemas/action_link'
          examples:
            reserved_ip_assigning:
              $ref: '#/components/examples/reserved_ip_assigning'
            reserved_ip_reserving:
              $ref: '#/components/examples/reserved_ip_reserving'
    reserved_ip:
      description: >-
        The response will be a JSON object with a key called `reserved_ip`. The
        value of this will be an object that contains the standard attributes
        associated with a reserved IP.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              reserved_ip:
                $ref: '#/components/schemas/reserved_ip'
          examples:
            reserved_ip_assigned:
              $ref: '#/components/examples/reserved_ip_assigned'
            reserved_ip_reserved:
              $ref: '#/components/examples/reserved_ip_reserved'
    reserved_ip_actions:
      description: >-
        The results will be returned as a JSON object with an `actions` key.
        This will be set to an array filled with action objects containing the
        standard reserved IP action attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  actions:
                    type: array
                    items:
                      $ref: '#/components/schemas/action'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              actions:
                - id: 72531856
                  status: completed
                  type: reserve_ip
                  started_at: '2015-11-21T21:51:09Z'
                  completed_at: '2015-11-21T21:51:09Z'
                  resource_id: 758604197
                  resource_type: reserved_ip
                  region:
                    name: New York 3
                    slug: nyc3
                    sizes:
                      - s-1vcpu-1gb
                      - s-1vcpu-2gb
                      - s-1vcpu-3gb
                      - s-2vcpu-2gb
                      - s-3vcpu-1gb
                      - s-2vcpu-4gb
                      - s-4vcpu-8gb
                      - s-6vcpu-16gb
                      - s-8vcpu-32gb
                      - s-12vcpu-48gb
                      - s-16vcpu-64gb
                      - s-20vcpu-96gb
                      - s-24vcpu-128gb
                      - s-32vcpu-192gb
                    features:
                      - private_networking
                      - backups
                      - ipv6
                      - metadata
                    available: true
                  region_slug: nyc3
              links: {}
              meta:
                total: 1
    reserved_ip_action:
      description: >-
        The response will be an object with a key called `action`. The value of
        this will be an object that contains the standard reserved IP action
        attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              action:
                allOf:
                  - $ref: '#/components/schemas/action'
                  - type: object
                    properties:
                      project_id:
                        type: string
                        format: uuid
                        example: 746c6152-2fa2-11ed-92d3-27aaa54e4988
                        description: >-
                          The UUID of the project to which the reserved IP
                          currently belongs.
            example:
              action:
                id: 72531856
                status: completed
                type: assign_ip
                started_at: '2015-11-12T17:51:03Z'
                completed_at: '2015-11-12T17:51:14Z'
                resource_id: 758604968
                resource_type: reserved_ip
                region:
                  name: New York 3
                  slug: nyc3
                  sizes:
                    - s-1vcpu-1gb
                    - s-1vcpu-2gb
                    - s-1vcpu-3gb
                    - s-2vcpu-2gb
                    - s-3vcpu-1gb
                    - s-2vcpu-4gb
                    - s-4vcpu-8gb
                    - s-6vcpu-16gb
                    - s-8vcpu-32gb
                    - s-12vcpu-48gb
                    - s-16vcpu-64gb
                    - s-20vcpu-96gb
                    - s-24vcpu-128gb
                    - s-32vcpu-192gb
                  features:
                    - private_networking
                    - backups
                    - ipv6
                    - metadata
                  available: true
                region_slug: nyc3
                project_id: 746c6152-2fa2-11ed-92d3-27aaa54e4988
            type: object
    reserved_ipv6_list:
      description: >-
        The response will be a JSON object with a key called `reserved_ipv6s`.
        This will be set to an array of reserved IP objects, each of which will
        contain the standard reserved IP attributes
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/reserved_ipv6_list'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              links: {}
              meta:
                total: 1
              reserved_ipv6s:
                - ip: fd53:616d:6d60::dc9:c001
                  region_slug: nyc3
                  reserved_at: '2020-01-01T00:00:00Z'
                - ip: fd53:616d:6d60::dc9:c002
                  region_slug: nyc1
                  reserved_at: '2020-01-01T00:00:00Z'
    reserved_ipv6_create:
      description: >-
        The response will be a JSON object with key `reserved_ipv6`. The value
        of this will be an object that contains the standard attributes
        associated with a reserved IPv6.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              reserved_ipv6:
                type: object
                properties:
                  ip:
                    type: string
                    format: ipv6
                    example: 2409:40d0:f7:1017:74b4:3a96:105e:4c6e
                    description: >-
                      The public IP address of the reserved IPv6. It also serves
                      as its identifier.
                  region_slug:
                    type: string
                    description: >-
                      The region that the reserved IPv6 is reserved to. When you
                      query a reserved IPv6,the region_slug will be returned.
                    example: nyc3
                  reserved_at:
                    type: string
                    format: date-time
                    example: '2024-11-20T11:08:30Z'
            type: object
          examples:
            reserved_ipv6_reserved:
              $ref: '#/components/examples/reserved_ipv6_reserved'
    reserved_ipv6:
      description: >-
        The response will be a JSON object with key `reserved_ipv6`. The value
        of this will be an object that contains the standard attributes
        associated with a reserved IPv6.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              reserved_ipv6:
                $ref: '#/components/schemas/reserved_ipv6'
          examples:
            reserved_ipv6_assigned:
              $ref: '#/components/examples/reserved_ipv6_assigned'
            reserved_ipv6_reserved:
              $ref: '#/components/examples/reserved_ipv6_reserved'
    unprocessable_entity:
      description: Unprocessable Entity
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: unprocessable_entity
            message: request payload validation failed
            request_id: 4851a473-1621-42ea-b2f9-5071c0ea8414
    reserved_ipv6_action:
      description: >-
        The response will be an object with a key called `action`. The value of
        this will be an object that contains the standard reserved IP action
        attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              action:
                allOf:
                  - $ref: '#/components/schemas/action'
                  - type: object
                    properties:
                      resource_id:
                        type: integer
                        example: 758604968
                        description: >-
                          The ID of the resource that the action is being taken
                          on.
                      resource_type:
                        type: string
                        example: reserved_ipv6
                        description: >-
                          The type of resource that the action is being taken
                          on.
                      region_slug:
                        type: string
                        example: nyc3
                        description: >-
                          The slug identifier for the region the resource is
                          located in.
            example:
              action:
                id: 72531856
                status: completed
                type: assign_ip
                started_at: '2015-11-12T17:51:03Z'
                completed_at: '2015-11-12T17:51:14Z'
                resource_id: 758604968
                resource_type: reserved_ipv6
                region:
                  name: New York 3
                  slug: nyc3
                  sizes:
                    - s-1vcpu-1gb
                    - s-1vcpu-2gb
                    - s-1vcpu-3gb
                    - s-2vcpu-2gb
                    - s-3vcpu-1gb
                    - s-2vcpu-4gb
                    - s-4vcpu-8gb
                    - s-6vcpu-16gb
                    - s-8vcpu-32gb
                    - s-12vcpu-48gb
                    - s-16vcpu-64gb
                    - s-20vcpu-96gb
                    - s-24vcpu-128gb
                    - s-32vcpu-192gb
                  features:
                    - private_networking
                    - backups
                    - ipv6
                    - metadata
                  available: true
                region_slug: nyc3
            type: object
    all_sizes:
      description: >-
        A JSON object with a key called `sizes`. The value of this will be an
        array of `size` objects each of which contain the standard size
        attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  sizes:
                    type: array
                    items:
                      $ref: '#/components/schemas/size'
                required:
                  - sizes
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              sizes:
                - slug: s-1vcpu-1gb
                  memory: 1024
                  vcpus: 1
                  disk: 25
                  transfer: 1
                  price_monthly: 5
                  price_hourly: 0.00743999984115362
                  regions:
                    - ams2
                    - ams3
                    - blr1
                    - fra1
                    - lon1
                    - nyc1
                    - nyc2
                    - nyc3
                    - sfo1
                    - sfo2
                    - sfo3
                    - sgp1
                    - tor1
                  available: true
                  description: Basic
                  disk_info:
                    - type: local
                      size:
                        amount: 25
                        unit: gib
              links:
                pages:
                  last: https://api.digitalocean.com/v2/sizes?page=64&per_page=1
                  next: https://api.digitalocean.com/v2/sizes?page=2&per_page=1
              meta:
                total: 64
    snapshots:
      description: A JSON object with a key of `snapshots`.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  snapshots:
                    type: array
                    items:
                      $ref: '#/components/schemas/snapshots'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          examples:
            All Snapshots:
              $ref: '#/components/examples/snapshots_all'
            Droplets Snapshots:
              $ref: '#/components/examples/snapshots_droplets_only'
            Volume Snapshots:
              $ref: '#/components/examples/snapshots_volumes_only'
    snapshots_existing:
      description: |
        A JSON object with a key called `snapshot`.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              snapshot:
                $ref: '#/components/schemas/snapshots'
            type: object
    not_a_snapshot:
      description: Bad Request
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            id: bad_request
            message: the resource is not a snapshot
            request_id: bbd8d7d4-2beb-4be1-a374-338e6165e32d
    tags_all:
      description: To list all of your tags, you can send a `GET` request to `/v2/tags`.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  tags:
                    type: array
                    items:
                      $ref: '#/components/schemas/tags'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              tags:
                - name: extra-awesome
                  resources:
                    count: 5
                    last_tagged_uri: https://api.digitalocean.com/v2/images/7555620
                    droplets:
                      count: 1
                      last_tagged_uri: https://api.digitalocean.com/v2/droplets/3164444
                    images:
                      count: 1
                      last_tagged_uri: https://api.digitalocean.com/v2/images/7555620
                    volumes:
                      count: 1
                      last_tagged_uri: >-
                        https://api.digitalocean.com/v2/volumes/3d80cb72-342b-4aaa-b92e-4e4abb24a933
                    volume_snapshots:
                      count: 1
                      last_tagged_uri: >-
                        https://api.digitalocean.com/v2/snapshots/1f6f46e8-6b60-11e9-be4e-0a58ac144519
                    databases:
                      count: 1
                      last_tagged_uri: >-
                        https://api.digitalocean.com/v2/databases/b92438f6-ba03-416c-b642-e9236db91976
              links: {}
              meta:
                total: 1
    tags_new:
      description: >-
        The response will be a JSON object with a key called tag.  The value of
        this will be a tag object containing the standard tag attributes
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              tag:
                $ref: '#/components/schemas/tags'
            example:
              tag:
                name: extra-awesome
                resources:
                  count: 0
                  droplets:
                    count: 0
                  images:
                    count: 0
                  volumes:
                    count: 0
                  volume_snapshots:
                    count: 0
                  databases:
                    count: 0
            type: object
    tags_bad_request:
      description: Bad Request
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
        x-request-id:
          $ref: '#/components/headers/x-request-id'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_with_root_causes'
          examples:
            InvalidCharacters:
              value:
                error: >-
                  Error validating resource tag: \"tag-name \\\"здорово\\\"
                  contains invalid characters\"
                messages: null
                root_causes:
                  - >-
                    rpc error: code = InvalidArgument desc = Error validating
                    resource tag: \"tag-name \\\"здорово\\\" contains invalid
                    characters\"
    tags_existing:
      description: >
        The response will be a JSON object with a key called `tag`. 

        The value of this will be a tag object containing the standard tag
        attributes.


        Tagged resources will only include resources that you are authorized to
        see.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            type: object
            properties:
              tag:
                $ref: '#/components/schemas/tags'
            example:
              tag:
                tag:
                  name: extra-awesome
                  resources:
                    count: 5
                    last_tagged_uri: https://api.digitalocean.com/v2/images/7555620
                    droplets:
                      count: 1
                      last_tagged_uri: https://api.digitalocean.com/v2/droplets/3164444
                    images:
                      count: 1
                      last_tagged_uri: https://api.digitalocean.com/v2/images/7555620
                    volumes:
                      count: 1
                      last_tagged_uri: >-
                        https://api.digitalocean.com/v2/volumes/3d80cb72-342b-4aaa-b92e-4e4abb24a933
                    volume_snapshots:
                      count: 1
                      last_tagged_uri: >-
                        https://api.digitalocean.com/v2/snapshots/1f6f46e8-6b60-11e9-be4e-0a58ac144519
                    databases:
                      count: 1
                      last_tagged_uri: >-
                        https://api.digitalocean.com/v2/databases/b92438f6-ba03-416c-b642-e9236db91976
    volumes:
      description: >-
        The response will be a JSON object with a key called `volumes`. This
        will be set to an array of volume objects, each of which will contain
        the standard volume attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  volumes:
                    type: array
                    items:
                      $ref: '#/components/schemas/volume_full'
                    description: Array of volumes.
                required:
                  - volumes
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          examples:
            All Volumes:
              $ref: '#/components/examples/volumes_all'
            Filtered by Name:
              $ref: '#/components/examples/volumes_filtered_by_name'
            Filtered by Region:
              $ref: '#/components/examples/volumes_filtered_by_region'
    volume:
      description: >-
        The response will be a JSON object with a key called `volume`. The value
        will be an object containing the standard attributes associated with a
        volume.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              volume:
                $ref: '#/components/schemas/volume_full'
            example:
              volume:
                id: 506f78a4-e098-11e5-ad9f-000f53306ae1
                region:
                  name: New York 1
                  slug: nyc1
                  sizes:
                    - s-1vcpu-1gb
                    - s-1vcpu-2gb
                    - s-1vcpu-3gb
                    - s-2vcpu-2gb
                    - s-3vcpu-1gb
                    - s-2vcpu-4gb
                    - s-4vcpu-8gb
                    - s-6vcpu-16gb
                    - s-8vcpu-32gb
                    - s-12vcpu-48gb
                    - s-16vcpu-64gb
                    - s-20vcpu-96gb
                    - s-24vcpu-128gb
                    - s-32vcpu-192gb
                  features:
                    - private_networking
                    - backups
                    - ipv6
                    - metadata
                  available: true
                droplet_ids: []
                name: example
                description: Block store for examples
                size_gigabytes: 10
                filesystem_type: ext4
                filesystem_label: example
                created_at: '2020-03-02T17:00:49Z'
            type: object
    volumeAction:
      description: >-
        The response will be an object with a key called `action`. The value of
        this will be an object that contains the standard volume action
        attributes
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              action:
                $ref: '#/components/schemas/volumeAction'
            type: object
          examples:
            volume_action_attach_response:
              $ref: '#/components/examples/volume_action_attach_response'
            VolumeActionDetachResponse:
              $ref: '#/components/examples/volume_action_detach_response'
    volumeSnapshot:
      description: >-
        You will get back a JSON object that has a `snapshot` key. This will
        contain the standard snapshot attributes
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              snapshot:
                $ref: '#/components/schemas/snapshots'
            example:
              snapshot:
                id: 8fa70202-873f-11e6-8b68-000f533176b1
                name: big-data-snapshot1475261774
                regions:
                  - nyc1
                created_at: '2020-09-30T18:56:14Z'
                resource_id: 82a48a18-873f-11e6-96bf-000f53315a41
                resource_type: volume
                min_disk_size: 10
                size_gigabytes: 10
                tags:
                  - aninterestingtag
            type: object
    volumeActions:
      description: >-
        The response will be an object with a key called `action`. The value of
        this will be an object that contains the standard volume action
        attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  actions:
                    type: array
                    items:
                      $ref: '#/components/schemas/volumeAction'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              actions:
                - id: 72531856
                  status: completed
                  type: attach_volume
                  started_at: '2020-11-21T21:51:09Z'
                  completed_at: '2020-11-21T21:51:09Z'
                  resource_type: volume
                  region:
                    name: New York 1
                    slug: nyc1
                    sizes:
                      - s-1vcpu-1gb
                      - s-1vcpu-2gb
                      - s-1vcpu-3gb
                      - s-2vcpu-2gb
                      - s-3vcpu-1gb
                      - s-2vcpu-4gb
                      - s-4vcpu-8gb
                      - s-6vcpu-16gb
                      - s-8vcpu-32gb
                      - s-12vcpu-48gb
                      - s-16vcpu-64gb
                      - s-20vcpu-96gb
                      - s-24vcpu-128gb
                      - s-32vcpu-192gb
                    features:
                      - private_networking
                      - backups
                      - ipv6
                      - metadata
                    available: true
                  region_slug: nyc1
              links: {}
              meta:
                total: 1
    volumeSnapshots:
      description: >-
        You will get back a JSON object that has a `snapshots` key. This will be
        set to an array of snapshot objects, each of which contain the standard
        snapshot attributes
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  snapshots:
                    type: array
                    items:
                      $ref: '#/components/schemas/snapshots'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
            example:
              snapshots:
                - id: 8eb4d51a-873f-11e6-96bf-000f53315a41
                  name: big-data-snapshot1475261752
                  regions:
                    - nyc1
                  created_at: '2020-09-30T18:56:12Z'
                  resource_id: 82a48a18-873f-11e6-96bf-000f53315a41
                  resource_type: volume
                  min_disk_size: 10
                  size_gigabytes: 0
                  tags: null
              links: {}
              meta:
                total: 1
    vpc_nat_gateways:
      description: A JSON object with a key of `vpc_nat_gateways`.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  vpc_nat_gateways:
                    type: array
                    items:
                      $ref: '#/components/schemas/vpc_nat_gateway_get'
              - $ref: '#/components/schemas/pagination'
              - $ref: '#/components/schemas/meta'
          examples:
            VPC NAT Gateways List Response:
              $ref: '#/components/examples/vpc_nat_gateways'
    vpc_nat_gateway:
      description: >
        The response will be a JSON object with a key called `vpc_nat_gateway`.
        This will be

        set to a JSON object that contains the standard VPC NAT gateway
        attributes.
      headers:
        ratelimit-limit:
          $ref: '#/components/headers/ratelimit-limit'
        ratelimit-remaining:
          $ref: '#/components/headers/ratelimit-remaining'
        ratelimit-reset:
          $ref: '#/components/headers/ratelimit-reset'
      content:
        application/json:
          schema:
            properties:
              vpc_nat_gateway:
                $ref: '#/components/schemas/vpc_nat_gateway_get'
            type: object
          examples:
            VPC NAT Gateway Response:
              $ref: '#/components/examples/vpc_nat_gateway'
  parameters:
    per_page:
      in: query
      name: per_page
      required: false
      description: Number of items returned per page
      schema:
        type: integer
        minimum: 1
        default: 20
        maximum: 200
      example: 2
    page:
      in: query
      name: page
      required: false
      description: Which 'page' of paginated results to return.
      schema:
        type: integer
        minimum: 1
        default: 1
      example: 1
    ssh_key_identifier:
      in: path
      name: ssh_key_identifier
      required: true
      description: Either the ID or the fingerprint of an existing SSH key.
      schema:
        anyOf:
          - $ref: '#/components/schemas/ssh_key_id'
          - $ref: '#/components/schemas/ssh_key_fingerprint'
      example: 512189
    cdn_endpoint_id:
      in: path
      name: cdn_id
      description: A unique identifier for a CDN endpoint.
      required: true
      schema:
        type: string
        format: uuid
        minimum: 1
      example: 19f06b6a-3ace-4315-b086-499a0e521b76
    certificate_name:
      name: name
      in: query
      description: Name of expected certificate
      required: false
      schema:
        type: string
        default: ''
      example: certificate-name
    certificate_id:
      in: path
      name: certificate_id
      description: A unique identifier for a certificate.
      required: true
      schema:
        type: string
        format: uuid
        minimum: 1
      example: 4de7ac8b-495b-4884-9a69-1050c6793cd6
    domain_name:
      name: domain_name
      description: The name of the domain itself.
      in: path
      schema:
        type: string
      example: example.com
      required: true
    domain_name_query:
      name: name
      description: >-
        A fully qualified record name. For example, to only include records
        matching sub.example.com, send a GET request to
        `/v2/domains/$DOMAIN_NAME/records?name=sub.example.com`.
      in: query
      schema:
        type: string
      example: sub.example.com
    domain_type_query:
      name: type
      description: 'The type of the DNS record. For example: A, CNAME, TXT, ...'
      in: query
      schema:
        type: string
        enum:
          - A
          - AAAA
          - CAA
          - CNAME
          - MX
          - NS
          - SOA
          - SRV
          - TXT
      example: A
    domain_record_id:
      name: domain_record_id
      description: The unique identifier of the domain record.
      in: path
      schema:
        type: integer
      example: 3352896
      required: true
    droplet_tag_name:
      in: query
      name: tag_name
      description: >-
        Used to filter Droplets by a specific tag. Can not be combined with
        `name` or `type`.<br>Requires `tag:read` scope.
      required: false
      schema:
        type: string
      example: env:prod
    droplet_name:
      in: query
      name: name
      description: >-
        Used to filter list response by Droplet name returning only exact
        matches. It is case-insensitive and can not be combined with `tag_name`.
      required: false
      schema:
        type: string
      example: web-01
    droplet_type:
      in: query
      name: type
      description: >-
        When `type` is set to `gpus`, only GPU Droplets will be returned. By
        default, only non-GPU Droplets are returned. Can not be combined with
        `tag_name`.
      required: false
      schema:
        type: string
        enum:
          - droplets
          - gpus
      example: droplets
    droplet_delete_tag_name:
      in: query
      name: tag_name
      description: Specifies Droplets to be deleted by tag.
      required: true
      schema:
        type: string
      example: env:test
    droplet_id:
      in: path
      name: droplet_id
      description: A unique identifier for a Droplet instance.
      required: true
      schema:
        type: integer
        minimum: 1
      example: 3164444
    action_id:
      in: path
      name: action_id
      description: >-
        A unique numeric ID that can be used to identify and reference an
        action.
      required: true
      schema:
        type: integer
        minimum: 1
      example: 36804636
    x_dangerous:
      in: header
      name: X-Dangerous
      description: >-
        Acknowledge this action will destroy the Droplet and all associated
        resources and _can not_ be reversed.
      schema:
        type: boolean
      example: true
      required: true
    autoscale_pool_name:
      name: name
      in: query
      description: The name of the autoscale pool
      schema:
        type: string
      example: my-autoscale-pool
    autoscale_pool_id:
      in: path
      name: autoscale_pool_id
      description: A unique identifier for an autoscale pool.
      required: true
      schema:
        type: string
      example: 0d3db13e-a604-4944-9827-7ec2642d32ac
    parameters_x_dangerous:
      in: header
      name: X-Dangerous
      description: >-
        Acknowledge this action will destroy the autoscale pool and its
        associated resources and _can not_ be reversed.
      schema:
        type: boolean
      example: true
      required: true
    firewall_id:
      name: firewall_id
      description: A unique ID that can be used to identify and reference a firewall.
      in: path
      schema:
        type: string
        format: uuid
      example: bb4b2611-3d72-467b-8602-280330ecd65c
      required: true
    type:
      in: query
      name: type
      description: >-
        Filters results based on image type which can be either `application` or
        `distribution`.
      required: false
      schema:
        type: string
        enum:
          - application
          - distribution
      example: distribution
    private:
      in: query
      name: private
      description: Used to filter only user images.
      required: false
      schema:
        type: boolean
      example: true
    tag:
      in: query
      name: tag_name
      description: Used to filter images by a specific tag.
      required: false
      schema:
        type: string
      example: base-image
    image_id:
      in: path
      name: image_id
      description: >-
        A unique number that can be used to identify and reference a specific
        image.
      required: true
      schema:
        type: integer
      example: 62137902
    load_balancer_id:
      in: path
      name: lb_id
      description: A unique identifier for a load balancer.
      required: true
      schema:
        type: string
        minimum: 1
      example: 4de7ac8b-495b-4884-9a69-1050c6793cd6
    reserved_ip:
      in: path
      name: reserved_ip
      description: A reserved IP address.
      required: true
      schema:
        type: string
        format: ipv4
        minimum: 1
      example: 45.55.96.47
    reserved_ipv6:
      in: path
      name: reserved_ipv6
      description: A reserved IPv6 address.
      required: true
      schema:
        type: string
        format: ipv6
        minimum: 1
      example: 2409:40d0:f7:1017:74b4:3a96:105e:4c6e
    snapshot_resource_type:
      in: query
      name: resource_type
      description: Used to filter snapshots by a resource type.
      required: false
      schema:
        type: string
        enum:
          - droplet
          - volume
      example: droplet
    snapshot_id:
      in: path
      name: snapshot_id
      required: true
      description: >-
        Either the ID of an existing snapshot. This will be an integer for a
        Droplet snapshot or a string for a volume snapshot.
      schema:
        anyOf:
          - type: integer
            description: The ID of a Droplet snapshot.
            example: 6372321
          - type: string
            description: The ID of a volume snapshot.
            example: fbe805e8-866b-11e6-96bf-000f53315a41
      example: 6372321
    tag_id:
      in: path
      name: tag_id
      description: >-
        The name of the tag. Tags may contain letters, numbers, colons, dashes,
        and underscores. There is a limit of 255 characters per tag.
      required: true
      schema:
        type: string
        maxLength: 255
        pattern: ^[a-zA-Z0-9_\-\:]+$
      example: awesome
    volume_name:
      name: name
      in: query
      description: The block storage volume's name.
      schema:
        type: string
      example: example
    region:
      name: region
      in: query
      description: The slug identifier for the region where the resource is available.
      schema:
        $ref: '#/components/schemas/region_slug'
      example: nyc3
    volume_snapshot_id:
      name: snapshot_id
      in: path
      description: The unique identifier for the snapshot.
      schema:
        type: string
      required: true
      example: fbe805e8-866b-11e6-96bf-000f53315a41
    volume_id:
      name: volume_id
      in: path
      required: true
      description: The ID of the block storage volume.
      schema:
        type: string
        format: uuid
      example: 7724db7c-e098-11e5-b522-000f53304e51
    vpc_nat_gateway_state:
      in: query
      name: state
      description: The current state of the VPC NAT gateway.
      schema:
        type: string
        enum:
          - new
          - provisioning
          - active
          - deleting
          - error
          - invalid
      example: active
    vpc_nat_gateway_region:
      in: query
      name: region
      description: The region where the VPC NAT gateway is located.
      schema:
        type: string
        enum:
          - nyc1
          - nyc2
          - nyc3
          - ams2
          - ams3
          - sfo1
          - sfo2
          - sfo3
          - sgp1
          - lon1
          - fra1
          - tor1
          - blr1
          - syd1
          - atl1
      example: tor1
    vpc_nat_gateway_type:
      in: query
      name: type
      description: The type of the VPC NAT gateway.
      schema:
        type: string
        enum:
          - public
      example: public
    vpc_nat_gateway_name:
      in: query
      name: name
      description: The name of the VPC NAT gateway.
      schema:
        type: string
      example: my-vpc-nat-gateway
    vpc_nat_gateway_id:
      in: path
      name: id
      description: The unique identifier of the VPC NAT gateway.
      required: true
      schema:
        type: string
      example: 70e1b58d-cdec-4e95-b3ee-2d4d95feff51
  examples:
    droplet_create_request:
      value:
        name: example.com
        region: nyc3
        size: s-1vcpu-1gb
        image: ubuntu-20-04-x64
        ssh_keys:
          - 289794
          - 3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45
        backups: true
        ipv6: true
        monitoring: true
        tags:
          - env:prod
          - web
        user_data: |
          #cloud-config
          runcmd:
            - touch /test.txt
        vpc_uuid: 760e09ef-dc84-11e8-981e-3cfdfeaae000
    droplet_multi_create_request:
      value:
        names:
          - sub-01.example.com
          - sub-02.example.com
        region: nyc3
        size: s-1vcpu-1gb
        image: ubuntu-20-04-x64
        ssh_keys:
          - 289794
          - 3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45
        backups: true
        ipv6: true
        monitoring: true
        tags:
          - env:prod
          - web
        user_data: |
          #cloud-config
          runcmd:
            - touch /test.txt
        vpc_uuid: 760e09ef-dc84-11e8-981e-3cfdfeaae000
    autoscale_create_request_dynamic:
      value:
        name: my-autoscale-pool
        config:
          min_instances: 1
          max_instances: 5
          target_cpu_utilization: 0.5
          cooldown_minutes: 10
        droplet_template:
          name: example.com
          region: nyc3
          size: c-2
          image: ubuntu-20-04-x64
          ssh_keys:
            - 3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45
          backups: true
          ipv6: true
          monitoring: true
          tags:
            - env:prod
            - web
          user_data: |
            #cloud-config
            runcmd:
              - touch /test.txt
          vpc_uuid: 760e09ef-dc84-11e8-981e-3cfdfeaae000
    autoscale_create_request_static:
      value:
        name: my-autoscale-pool
        config:
          target_number_instances: 2
        droplet_template:
          name: example.com
          region: nyc3
          size: c-2
          image: ubuntu-20-04-x64
          ssh_keys:
            - 3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45
          backups: true
          ipv6: true
          monitoring: true
          tags:
            - env:prod
            - web
          user_data: |
            #cloud-config
            runcmd:
              - touch /test.txt
          vpc_uuid: 760e09ef-dc84-11e8-981e-3cfdfeaae000
    autoscale_update_request:
      value:
        name: my-autoscale-pool
        config:
          target_number_instances: 2
        droplet_template:
          name: example.com
          region: nyc3
          size: c-2
          image: ubuntu-20-04-x64
          ssh_keys:
            - 3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45
          backups: true
          ipv6: true
          monitoring: true
          tags:
            - env:prod
            - web
          user_data: |
            #cloud-config
            runcmd:
              - touch /test.txt
          vpc_uuid: 760e09ef-dc84-11e8-981e-3cfdfeaae000
    load_balancer_basic_create_request:
      description: Passing requests directly through to 80 and 443.
      value:
        name: example-lb-01
        region: nyc3
        forwarding_rules:
          - entry_protocol: http
            entry_port: 80
            target_protocol: http
            target_port: 80
          - entry_protocol: https
            entry_port: 443
            target_protocol: https
            target_port: 443
            tls_passthrough: true
        droplet_ids:
          - 3164444
          - 3164445
        project_id: 9cc10173-e9ea-4176-9dbc-a4cee4c4ff30
        http_idle_timeout_seconds: 60
        firewall:
          deny:
            - cidr:1.2.0.0/16
            - ip:2.3.4.5
          allow:
            - ip:1.2.3.4
            - cidr:2.3.4.0/24
    load_balancer_ssl_termination_create_request:
      description: >-
        Terminating SSL at the load balancer using a managed SSL certificate
        specifying Droplets using `droplet_ids`.
      value:
        name: example-lb-01
        region: nyc3
        forwarding_rules:
          - entry_protocol: https
            entry_port: 443
            target_protocol: http
            target_port: 8080
            certificate_id: 892071a0-bb95-49bc-8021-3afd67a210bf
        droplet_ids:
          - 3164444
          - 3164445
    load_balancer_using_tag_create_request:
      description: >-
        Terminating SSL at the load balancer using a managed SSL certificate
        specifying Droplets using `tag`.
      value:
        name: example-lb-01
        region: nyc3
        forwarding_rules:
          - entry_protocol: https
            entry_port: 443
            target_protocol: http
            target_port: 8080
            certificate_id: 892071a0-bb95-49bc-8021-3afd67a210bf
        tag: prod:web
    load_balancer_sticky_sessions_and_health_check_create_request:
      description: >-
        Terminating SSL at the load balancer using a managed SSL certificate
        specifying Droplets using `tag`.
      value:
        name: example-lb-01
        region: nyc3
        forwarding_rules:
          - entry_protocol: https
            entry_port: 443
            target_protocol: http
            target_port: 8080
            certificate_id: 892071a0-bb95-49bc-8021-3afd67a210bf
        health_check:
          protocol: http
          port: 8080
          path: /health
          check_interval_seconds: 10
          response_timeout_seconds: 5
          healthy_threshold: 5
          unhealthy_threshold: 3
        sticky_sessions:
          type: cookies
          cookie_name: LB_COOKIE
          cookie_ttl_seconds: 300
        tag: prod:web
    load_balancer_update_request:
      value:
        name: updated-example-lb-01
        region: nyc3
        droplet_ids:
          - 3164444
          - 3164445
        algorithm: round_robin
        forwarding_rules:
          - entry_protocol: http
            entry_port: 80
            target_protocol: http
            target_port: 80
            certificate_id: ''
            tls_passthrough: false
          - entry_protocol: https
            entry_port: 443
            target_protocol: https
            target_port: 443
            certificate_id: ''
            tls_passthrough: true
        health_check:
          protocol: http
          port: 80
          path: /
          check_interval_seconds: 10
          response_timeout_seconds: 5
          healthy_threshold: 5
          unhealthy_threshold: 3
        sticky_sessions:
          type: none
        redirect_http_to_https: false
        enable_proxy_protocol: true
        enable_backend_keepalive: true
        vpc_uuid: c33931f2-a26a-4e61-b85c-4e95a2ec431b
        project_id: 9cc10173-e9ea-4176-9dbc-a4cee4c4ff30
        http_idle_timeout_seconds: 60
        firewall:
          deny:
            - cidr:1.2.0.0/16
            - ip:2.3.4.5
          allow:
            - ip:1.2.3.4
            - cidr:2.3.4.0/24
    vpc_nat_gateway_create_request:
      value:
        name: test-vpc-nat-gateways
        type: PUBLIC
        region: tor1
        size: 1
        vpcs:
          - vpc_uuid: 0eb1752f-807b-4562-a077-8018e13ab1fb
        udp_timeout_seconds: 30
        icmp_timeout_seconds: 30
        tcp_timeout_seconds: 30
    vpc_nat_gateway_update_request:
      value:
        name: test-vpc-nat-gateways-updated
        type: PUBLIC
        region: tor1
        size: 2
        udp_timeout_seconds: 60
        icmp_timeout_seconds: 60
        tcp_timeout_seconds: 60
    certificates_all:
      value:
        certificates:
          - id: 892071a0-bb95-49bc-8021-3afd67a210bf
            name: web-cert-01
            not_after: '2017-02-22T00:23:00Z'
            sha1_fingerprint: dfcc9f57d86bf58e321c2c6c31c7a971be244ac7
            created_at: '2017-02-08T16:02:37Z'
            dns_names:
              - ''
            state: verified
            type: custom
          - id: ba9b9c18-6c59-46c2-99df-70da170a42ba
            name: web-cert-02
            not_after: '2018-06-07T17:44:12Z'
            sha1_fingerprint: 479c82b5c63cb6d3e6fac4624d58a33b267e166c
            created_at: '2018-03-09T18:44:11Z'
            dns_names:
              - www.example.com
              - example.com
            state: verified
            type: lets_encrypt
        links: {}
        meta:
          total: 2
    certificates_custom:
      value:
        certificate:
          id: 892071a0-bb95-49bc-8021-3afd67a210bf
          name: web-cert-01
          not_after: '2017-02-22T00:23:00Z'
          sha1_fingerprint: dfcc9f57d86bf58e321c2c6c31c7a971be244ac7
          created_at: '2017-02-08T16:02:37Z'
          dns_names:
            - ''
          state: verified
          type: custom
    certificates_lets_encrypt_pending:
      value:
        certificate:
          id: ba9b9c18-6c59-46c2-99df-70da170a42ba
          name: web-cert-02
          not_after: '2018-06-07T17:44:12Z'
          sha1_fingerprint: 479c82b5c63cb6d3e6fac4624d58a33b267e166c
          created_at: '2018-03-09T18:44:11Z'
          dns_names:
            - www.example.com
            - example.com
          state: pending
          type: lets_encrypt
    certificates_lets_encrypt:
      value:
        certificate:
          id: ba9b9c18-6c59-46c2-99df-70da170a42ba
          name: web-cert-02
          not_after: '2018-06-07T17:44:12Z'
          sha1_fingerprint: 479c82b5c63cb6d3e6fac4624d58a33b267e166c
          created_at: '2018-03-09T18:44:11Z'
          dns_names:
            - www.example.com
            - example.com
          state: verified
          type: lets_encrypt
    domain_records_all:
      value:
        domain_records:
          - id: 28448429
            type: NS
            name: '@'
            data: ns1.digitalocean.com
            priority: null
            port: null
            ttl: 1800
            weight: null
            flags: null
            tag: null
          - id: 28448430
            type: NS
            name: '@'
            data: ns2.digitalocean.com
            priority: null
            port: null
            ttl: 1800
            weight: null
            flags: null
            tag: null
          - id: 28448431
            type: NS
            name: '@'
            data: ns3.digitalocean.com
            priority: null
            port: null
            ttl: 1800
            weight: null
            flags: null
            tag: null
          - id: 28448432
            type: A
            name: '@'
            data: 1.2.3.4
            priority: null
            port: null
            ttl: 1800
            weight: null
            flags: null
            tag: null
        links: {}
        meta:
          total: 4
    droplets_all:
      value:
        droplets:
          - id: 3164444
            name: example.com
            memory: 1024
            vcpus: 1
            disk: 25
            disk_info:
              - type: local
                size:
                  amount: 25
                  unit: gib
            locked: false
            status: active
            kernel: null
            created_at: '2020-07-21T18:37:44Z'
            features:
              - backups
              - private_networking
              - ipv6
            backup_ids:
              - 53893572
            next_backup_window:
              start: '2020-07-30T00:00:00Z'
              end: '2020-07-30T23:00:00Z'
            snapshot_ids:
              - 67512819
            image:
              id: 63663980
              name: 20.04 (LTS) x64
              distribution: Ubuntu
              slug: ubuntu-20-04-x64
              public: true
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              created_at: '2020-05-15T05:47:50Z'
              type: snapshot
              min_disk_size: 20
              size_gigabytes: 2.36
              description: ''
              tags: []
              status: available
              error_message: ''
            volume_ids: []
            size:
              slug: s-1vcpu-1gb
              memory: 1024
              vcpus: 1
              disk: 25
              transfer: 1
              price_monthly: 5
              price_hourly: 0.00743999984115362
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              available: true
              description: Basic
            size_slug: s-1vcpu-1gb
            networks:
              v4:
                - ip_address: 10.128.192.124
                  netmask: 255.255.0.0
                  gateway: nil
                  type: private
                - ip_address: 192.241.165.154
                  netmask: 255.255.255.0
                  gateway: 192.241.165.1
                  type: public
              v6:
                - ip_address: 2604:a880:0:1010::18a:a001
                  netmask: 64
                  gateway: 2604:a880:0:1010::1
                  type: public
            region:
              name: New York 3
              slug: nyc3
              features:
                - private_networking
                - backups
                - ipv6
                - metadata
                - install_agent
                - storage
                - image_transfer
              available: true
              sizes:
                - s-1vcpu-1gb
                - s-1vcpu-2gb
                - s-1vcpu-3gb
                - s-2vcpu-2gb
                - s-3vcpu-1gb
                - s-2vcpu-4gb
                - s-4vcpu-8gb
                - s-6vcpu-16gb
                - s-8vcpu-32gb
                - s-12vcpu-48gb
                - s-16vcpu-64gb
                - s-20vcpu-96gb
                - s-24vcpu-128gb
                - s-32vcpu-192g
            tags:
              - web
              - env:prod
            vpc_uuid: 760e09ef-dc84-11e8-981e-3cfdfeaae000
          - id: 3164459
            name: assets.example.com
            memory: 1024
            vcpus: 1
            disk: 25
            disk_info:
              - type: local
                size:
                  amount: 25
                  unit: gib
            locked: false
            status: active
            kernel: null
            created_at: '2020-07-21T18:42:27Z'
            features:
              - private_networking
            backup_ids: []
            next_backup_window:
              start: '2020-07-30T00:00:00Z'
              end: '2020-07-30T23:00:00Z'
            snapshot_ids: []
            image:
              id: 63663980
              name: 20.04 (LTS) x64
              distribution: Ubuntu
              slug: ubuntu-20-04-x64
              public: true
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              created_at: '2020-05-15T05:47:50Z'
              type: snapshot
              min_disk_size: 20
              size_gigabytes: 2.36
              description: ''
              tags: []
              status: available
              error_message: ''
            volume_ids:
              - 506f78a4-e098-11e5-ad9f-000f53306ae1
            size:
              slug: s-1vcpu-1gb
              memory: 1024
              vcpus: 1
              disk: 25
              transfer: 1
              price_monthly: 5
              price_hourly: 0.00743999984115362
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              available: true
              description: Basic
            size_slug: s-1vcpu-1gb
            networks:
              v4:
                - ip_address: 10.128.192.138
                  netmask: 255.255.0.0
                  gateway: nil
                  type: private
                - ip_address: 162.243.0.4
                  netmask: 255.255.255.0
                  gateway: 162.243.0.1
                  type: public
              v6: []
            region:
              name: New York 3
              slug: nyc3
              features:
                - private_networking
                - backups
                - ipv6
                - metadata
                - install_agent
                - storage
                - image_transfer
              available: true
              sizes:
                - s-1vcpu-1gb
                - s-1vcpu-2gb
                - s-1vcpu-3gb
                - s-2vcpu-2gb
                - s-3vcpu-1gb
                - s-2vcpu-4gb
                - s-4vcpu-8gb
                - s-6vcpu-16gb
                - s-8vcpu-32gb
                - s-12vcpu-48gb
                - s-16vcpu-64gb
                - s-20vcpu-96gb
                - s-24vcpu-128gb
                - s-32vcpu-192g
            tags:
              - storage
              - env:prod
            vpc_uuid: 760e09ef-dc84-11e8-981e-3cfdfeaae000
          - id: 3164412
            name: stage.example.com
            memory: 1024
            vcpus: 1
            disk: 25
            disk_info:
              - type: local
                size:
                  amount: 25
                  unit: gib
            locked: false
            status: active
            kernel: null
            created_at: '2020-07-21T18:32:55Z'
            features:
              - private_networking
            backup_ids: []
            next_backup_window:
              start: '2020-07-30T00:00:00Z'
              end: '2020-07-30T23:00:00Z'
            snapshot_ids: []
            image:
              id: 63663980
              name: 20.04 (LTS) x64
              distribution: Ubuntu
              slug: ubuntu-20-04-x64
              public: true
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              created_at: '2020-05-15T05:47:50Z'
              type: snapshot
              min_disk_size: 20
              size_gigabytes: 2.36
              description: ''
              tags: []
              status: available
              error_message: ''
            volume_ids:
              - 7724db7c-e098-11e5-b522-000f53304e51
            size:
              slug: s-1vcpu-1gb
              memory: 1024
              vcpus: 1
              disk: 25
              transfer: 1
              price_monthly: 5
              price_hourly: 0.00743999984115362
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              available: true
              description: Basic
            size_slug: s-1vcpu-1gb
            networks:
              v4:
                - ip_address: 10.128.192.125
                  netmask: 255.255.0.0
                  gateway: nil
                  type: private
                - ip_address: 192.241.247.248
                  netmask: 255.255.255.0
                  gateway: 192.241.247.1
                  type: public
              v6: []
            region:
              name: New York 3
              slug: nyc3
              features:
                - private_networking
                - backups
                - ipv6
                - metadata
                - install_agent
                - storage
                - image_transfer
              available: true
              sizes:
                - s-1vcpu-1gb
                - s-1vcpu-2gb
                - s-1vcpu-3gb
                - s-2vcpu-2gb
                - s-3vcpu-1gb
                - s-2vcpu-4gb
                - s-4vcpu-8gb
                - s-6vcpu-16gb
                - s-8vcpu-32gb
                - s-12vcpu-48gb
                - s-16vcpu-64gb
                - s-20vcpu-96gb
                - s-24vcpu-128gb
                - s-32vcpu-192g
            tags:
              - env:stage
            vpc_uuid: 5a4981aa-9653-4bd1-bef5-d6bff52042e4
        links:
          pages: {}
        meta:
          total: 3
    droplets_tagged:
      value:
        droplets:
          - id: 3164444
            name: example.com
            memory: 1024
            vcpus: 1
            disk: 25
            disk_info:
              - type: local
                size:
                  amount: 25
                  unit: gib
            locked: false
            status: active
            kernel: null
            created_at: '2020-07-21T18:37:44Z'
            features:
              - backups
              - private_networking
              - ipv6
            backup_ids:
              - 53893572
            next_backup_window:
              start: '2020-07-30T00:00:00Z'
              end: '2020-07-30T23:00:00Z'
            snapshot_ids:
              - 67512819
            image:
              id: 63663980
              name: 20.04 (LTS) x64
              distribution: Ubuntu
              slug: ubuntu-20-04-x64
              public: true
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              created_at: '2020-05-15T05:47:50Z'
              type: snapshot
              min_disk_size: 20
              size_gigabytes: 2.36
              description: ''
              tags: []
              status: available
              error_message: ''
            volume_ids: []
            size:
              slug: s-1vcpu-1gb
              memory: 1024
              vcpus: 1
              disk: 25
              transfer: 1
              price_monthly: 5
              price_hourly: 0.00743999984115362
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              available: true
              description: Basic
            size_slug: s-1vcpu-1gb
            networks:
              v4:
                - ip_address: 10.128.192.124
                  netmask: 255.255.0.0
                  gateway: nil
                  type: private
                - ip_address: 192.241.165.154
                  netmask: 255.255.255.0
                  gateway: 192.241.165.1
                  type: public
              v6:
                - ip_address: 2604:a880:0:1010::18a:a001
                  netmask: 64
                  gateway: 2604:a880:0:1010::1
                  type: public
            region:
              name: New York 3
              slug: nyc3
              features:
                - private_networking
                - backups
                - ipv6
                - metadata
                - install_agent
                - storage
                - image_transfer
              available: true
              sizes:
                - s-1vcpu-1gb
                - s-1vcpu-2gb
                - s-1vcpu-3gb
                - s-2vcpu-2gb
                - s-3vcpu-1gb
                - s-2vcpu-4gb
                - s-4vcpu-8gb
                - s-6vcpu-16gb
                - s-8vcpu-32gb
                - s-12vcpu-48gb
                - s-16vcpu-64gb
                - s-20vcpu-96gb
                - s-24vcpu-128gb
                - s-32vcpu-192g
            tags:
              - web
              - env:prod
            vpc_uuid: 760e09ef-dc84-11e8-981e-3cfdfeaae000
          - id: 3164459
            name: assets.example.com
            memory: 1024
            vcpus: 1
            disk: 25
            disk_info:
              - type: local
                size:
                  amount: 25
                  unit: gib
            locked: false
            status: active
            kernel: null
            created_at: '2020-07-21T18:42:27Z'
            features:
              - private_networking
            backup_ids: []
            next_backup_window:
              start: '2020-07-30T00:00:00Z'
              end: '2020-07-30T23:00:00Z'
            snapshot_ids: []
            image:
              id: 63663980
              name: 20.04 (LTS) x64
              distribution: Ubuntu
              slug: ubuntu-20-04-x64
              public: true
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              created_at: '2020-05-15T05:47:50Z'
              type: snapshot
              min_disk_size: 20
              size_gigabytes: 2.36
              description: ''
              tags: []
              status: available
              error_message: ''
            volume_ids:
              - 506f78a4-e098-11e5-ad9f-000f53306ae1
            size:
              slug: s-1vcpu-1gb
              memory: 1024
              vcpus: 1
              disk: 25
              transfer: 1
              price_monthly: 5
              price_hourly: 0.00743999984115362
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              available: true
              description: Basic
            size_slug: s-1vcpu-1gb
            networks:
              v4:
                - ip_address: 10.128.192.138
                  netmask: 255.255.0.0
                  gateway: nil
                  type: private
                - ip_address: 162.243.0.4
                  netmask: 255.255.255.0
                  gateway: 162.243.0.1
                  type: public
              v6: []
            region:
              name: New York 3
              slug: nyc3
              features:
                - private_networking
                - backups
                - ipv6
                - metadata
                - install_agent
                - storage
                - image_transfer
              available: true
              sizes:
                - s-1vcpu-1gb
                - s-1vcpu-2gb
                - s-1vcpu-3gb
                - s-2vcpu-2gb
                - s-3vcpu-1gb
                - s-2vcpu-4gb
                - s-4vcpu-8gb
                - s-6vcpu-16gb
                - s-8vcpu-32gb
                - s-12vcpu-48gb
                - s-16vcpu-64gb
                - s-20vcpu-96gb
                - s-24vcpu-128gb
                - s-32vcpu-192g
            tags:
              - storage
              - env:prod
            vpc_uuid: 760e09ef-dc84-11e8-981e-3cfdfeaae000
        links:
          pages: {}
        meta:
          total: 2
    gpu_droplets:
      value:
        droplets:
          - id: 448543583
            name: ml-ai-ubuntu-gpu-h100x1-80gb-tor1
            memory: 245760
            vcpus: 20
            disk: 720
            disk_info:
              - type: local
                size:
                  amount: 720
                  unit: gib
              - type: scratch
                size:
                  amount: 5120
                  unit: gib
            locked: false
            status: active
            kernel: null
            created_at: '2024-09-30T15:23:36Z'
            features:
              - droplet_agent
              - private_networking
            backup_ids: []
            next_backup_window: null
            snapshot_ids: []
            image:
              id: 166407044
              name: AI/ML Ready H100x1
              distribution: Ubuntu
              slug: gpu-h100x1-base
              public: true
              regions:
                - nyc3
                - nyc1
                - sfo1
                - nyc2
                - ams2
                - sgp1
                - lon1
                - ams3
                - fra1
                - tor1
                - sfo2
                - blr1
                - sfo3
                - syd1
              created_at: '2024-09-27T15:35:19Z'
              min_disk_size: 25
              type: base
              size_gigabytes: 18.47
              description: GPU H100 1x Base Image
              tags: []
              status: available
            volume_ids: []
            size:
              slug: gpu-h100x1-80gb
              memory: 245760
              vcpus: 20
              disk: 720
              transfer: 15
              price_monthly: 4529.3
              price_hourly: 6.74
              regions:
                - tor1
              available: true
              description: H100 GPU - 1X
              gpu_info:
                count: 1
                vram:
                  amount: 80
                  unit: gib
                model: nvidia_h100
              disk_info:
                - type: local
                  size:
                    amount: 720
                    unit: gib
                - type: scratch
                  size:
                    amount: 5120
                    unit: gib
            size_slug: gpu-h100x1-80gb
            networks:
              v4:
                - ip_address: 10.128.192.124
                  netmask: 255.255.0.0
                  gateway: nil
                  type: private
                - ip_address: 192.241.165.154
                  netmask: 255.255.255.0
                  gateway: 192.241.165.1
                  type: public
              v6: []
            region:
              name: Toronto 1
              slug: tor1
              features:
                - backups
                - ipv6
                - metadata
                - install_agent
                - storage
                - image_transfer
                - server_id
                - management_networking
              available: true
              sizes:
                - s-1vcpu-1gb
                - s-1vcpu-2gb
                - s-1vcpu-3gb
                - s-2vcpu-2gb
                - s-3vcpu-1gb
                - s-2vcpu-4gb
                - s-4vcpu-8gb
                - s-6vcpu-16gb
                - s-8vcpu-32gb
                - s-12vcpu-48gb
                - s-16vcpu-64gb
                - s-20vcpu-96gb
                - s-24vcpu-128gb
                - s-32vcpu-192g
                - gpu-h100x1-80gb
                - gpu-h100x8-640gb
            tags: []
            vpc_uuid: e2fdd15c-6ae6-4c11-8c5d-72dae2ba1ad1
            gpu_info:
              count: 1
              vram:
                amount: 80
                unit: gib
              model: nvidia_h100
        links: {}
        meta:
          total: 1
    droplet_create_response:
      value:
        droplet:
          id: 3164444
          name: example.com
          memory: 1024
          vcpus: 1
          disk: 25
          disk_info:
            - type: local
              size:
                amount: 25
                unit: gib
          locked: false
          status: new
          kernel: null
          created_at: '2020-07-21T18:37:44Z'
          features:
            - backups
            - private_networking
            - ipv6
            - monitoring
          backup_ids: []
          next_backup_window: null
          snapshot_ids: []
          image:
            id: 63663980
            name: 20.04 (LTS) x64
            distribution: Ubuntu
            slug: ubuntu-20-04-x64
            public: true
            regions:
              - ams2
              - ams3
              - blr1
              - fra1
              - lon1
              - nyc1
              - nyc2
              - nyc3
              - sfo1
              - sfo2
              - sfo3
              - sgp1
              - tor1
            created_at: '2020-05-15T05:47:50Z'
            type: snapshot
            min_disk_size: 20
            size_gigabytes: 2.36
            description: ''
            tags: []
            status: available
            error_message: ''
          volume_ids: []
          size:
            slug: s-1vcpu-1gb
            memory: 1024
            vcpus: 1
            disk: 25
            transfer: 1
            price_monthly: 5
            price_hourly: 0.00743999984115362
            regions:
              - ams2
              - ams3
              - blr1
              - fra1
              - lon1
              - nyc1
              - nyc2
              - nyc3
              - sfo1
              - sfo2
              - sfo3
              - sgp1
              - tor1
            available: true
            description: Basic
          size_slug: s-1vcpu-1gb
          networks:
            v4: []
            v6: []
          region:
            name: New York 3
            slug: nyc3
            features:
              - private_networking
              - backups
              - ipv6
              - metadata
              - install_agent
              - storage
              - image_transfer
            available: true
            sizes:
              - s-1vcpu-1gb
              - s-1vcpu-2gb
              - s-1vcpu-3gb
              - s-2vcpu-2gb
              - s-3vcpu-1gb
              - s-2vcpu-4gb
              - s-4vcpu-8gb
              - s-6vcpu-16gb
              - s-8vcpu-32gb
              - s-12vcpu-48gb
              - s-16vcpu-64gb
              - s-20vcpu-96gb
              - s-24vcpu-128gb
              - s-32vcpu-192g
          tags:
            - web
            - env:prod
        links:
          actions:
            - id: 7515
              rel: create
              href: https://api.digitalocean.com/v2/actions/7515
    droplet_multi_create_response:
      value:
        droplets:
          - id: 3164444
            name: sub-01.example.com
            memory: 1024
            vcpus: 1
            disk: 25
            disk_info:
              - type: local
                size:
                  amount: 25
                  unit: gib
            locked: false
            status: new
            kernel: null
            created_at: '2020-07-21T18:37:44Z'
            features:
              - backups
              - private_networking
              - ipv6
              - monitoring
            backup_ids: []
            next_backup_window: null
            snapshot_ids: []
            image:
              id: 63663980
              name: 20.04 (LTS) x64
              distribution: Ubuntu
              slug: ubuntu-20-04-x64
              public: true
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              created_at: '2020-05-15T05:47:50Z'
              type: snapshot
              min_disk_size: 20
              size_gigabytes: 2.36
              description: ''
              tags: []
              status: available
              error_message: ''
            volume_ids: []
            size:
              slug: s-1vcpu-1gb
              memory: 1024
              vcpus: 1
              disk: 25
              transfer: 1
              price_monthly: 5
              price_hourly: 0.00743999984115362
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              available: true
              description: Basic
            size_slug: s-1vcpu-1gb
            networks:
              v4: []
              v6: []
            region:
              name: New York 3
              slug: nyc3
              features:
                - private_networking
                - backups
                - ipv6
                - metadata
                - install_agent
                - storage
                - image_transfer
              available: true
              sizes:
                - s-1vcpu-1gb
                - s-1vcpu-2gb
                - s-1vcpu-3gb
                - s-2vcpu-2gb
                - s-3vcpu-1gb
                - s-2vcpu-4gb
                - s-4vcpu-8gb
                - s-6vcpu-16gb
                - s-8vcpu-32gb
                - s-12vcpu-48gb
                - s-16vcpu-64gb
                - s-20vcpu-96gb
                - s-24vcpu-128gb
                - s-32vcpu-192g
            tags:
              - web
              - env:prod
          - id: 3164445
            name: sub-02.example.com
            memory: 1024
            vcpus: 1
            disk: 25
            disk_info:
              - type: local
                size:
                  amount: 25
                  unit: gib
            locked: false
            status: new
            kernel: null
            created_at: '2020-07-21T18:37:44Z'
            features:
              - backups
              - private_networking
              - ipv6
              - monitoring
            backup_ids: []
            next_backup_window: null
            snapshot_ids: []
            image:
              id: 63663980
              name: 20.04 (LTS) x64
              distribution: Ubuntu
              slug: ubuntu-20-04-x64
              public: true
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              created_at: '2020-05-15T05:47:50Z'
              type: snapshot
              min_disk_size: 20
              size_gigabytes: 2.36
              description: ''
              tags: []
              status: available
              error_message: ''
            volume_ids: []
            size:
              slug: s-1vcpu-1gb
              memory: 1024
              vcpus: 1
              disk: 25
              transfer: 1
              price_monthly: 5
              price_hourly: 0.00743999984115362
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              available: true
              description: Basic
            size_slug: s-1vcpu-1gb
            networks:
              v4: []
              v6: []
            region:
              name: New York 3
              slug: nyc3
              features:
                - private_networking
                - backups
                - ipv6
                - metadata
                - install_agent
                - storage
                - image_transfer
              available: true
              sizes:
                - s-1vcpu-1gb
                - s-1vcpu-2gb
                - s-1vcpu-3gb
                - s-2vcpu-2gb
                - s-3vcpu-1gb
                - s-2vcpu-4gb
                - s-4vcpu-8gb
                - s-6vcpu-16gb
                - s-8vcpu-32gb
                - s-12vcpu-48gb
                - s-16vcpu-64gb
                - s-20vcpu-96gb
                - s-24vcpu-128gb
                - s-32vcpu-192g
            tags:
              - web
              - env:prod
        links:
          actions:
            - id: 7515
              rel: create
              href: https://api.digitalocean.com/v2/actions/7515
            - id: 7516
              rel: create
              href: https://api.digitalocean.com/v2/actions/7516
    droplet_single:
      value:
        droplet:
          id: 3164444
          name: example.com
          memory: 1024
          vcpus: 1
          disk: 25
          disk_info:
            - type: local
              size:
                amount: 25
                unit: gib
          locked: false
          status: active
          kernel: null
          created_at: '2020-07-21T18:37:44Z'
          features:
            - backups
            - private_networking
            - ipv6
          backup_ids:
            - 53893572
          next_backup_window:
            start: '2020-07-30T00:00:00Z'
            end: '2020-07-30T23:00:00Z'
          snapshot_ids:
            - 67512819
          image:
            id: 63663980
            name: 20.04 (LTS) x64
            distribution: Ubuntu
            slug: ubuntu-20-04-x64
            public: true
            regions:
              - ams2
              - ams3
              - blr1
              - fra1
              - lon1
              - nyc1
              - nyc2
              - nyc3
              - sfo1
              - sfo2
              - sfo3
              - sgp1
              - tor1
            created_at: '2020-05-15T05:47:50Z'
            type: snapshot
            min_disk_size: 20
            size_gigabytes: 2.36
            description: ''
            tags: []
            status: available
            error_message: ''
          volume_ids: []
          size:
            slug: s-1vcpu-1gb
            memory: 1024
            vcpus: 1
            disk: 25
            transfer: 1
            price_monthly: 5
            price_hourly: 0.00743999984115362
            regions:
              - ams2
              - ams3
              - blr1
              - fra1
              - lon1
              - nyc1
              - nyc2
              - nyc3
              - sfo1
              - sfo2
              - sfo3
              - sgp1
              - tor1
            available: true
            description: Basic
          size_slug: s-1vcpu-1gb
          networks:
            v4:
              - ip_address: 10.128.192.124
                netmask: 255.255.0.0
                gateway: nil
                type: private
              - ip_address: 192.241.165.154
                netmask: 255.255.255.0
                gateway: 192.241.165.1
                type: public
            v6:
              - ip_address: 2604:a880:0:1010::18a:a001
                netmask: 64
                gateway: 2604:a880:0:1010::1
                type: public
          region:
            name: New York 3
            slug: nyc3
            features:
              - private_networking
              - backups
              - ipv6
              - metadata
              - install_agent
              - storage
              - image_transfer
            available: true
            sizes:
              - s-1vcpu-1gb
              - s-1vcpu-2gb
              - s-1vcpu-3gb
              - s-2vcpu-2gb
              - s-3vcpu-1gb
              - s-2vcpu-4gb
              - s-4vcpu-8gb
              - s-6vcpu-16gb
              - s-8vcpu-32gb
              - s-12vcpu-48gb
              - s-16vcpu-64gb
              - s-20vcpu-96gb
              - s-24vcpu-128gb
              - s-32vcpu-192g
          tags:
            - web
            - env:prod
          vpc_uuid: 760e09ef-dc84-11e8-981e-3cfdfeaae000
    autoscale_pools_all:
      value:
        autoscale_pools:
          - id: 0d3db13e-a604-4944-9827-7ec2642d32ac
            name: test-autoscaler-group-01
            config:
              min_instances: 1
              max_instances: 5
              target_cpu_utilization: 0.5
              cooldown_minutes: 10
            droplet_template:
              name: droplet-name
              size: c-2
              region: tor1
              image: ubuntu-20-04-x64
              tags:
                - my-tag
              ssh_keys:
                - 3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45
              vpc_uuid: 760e09ef-dc84-11e8-981e-3cfdfeaae000
              with_droplet_agent: true
              project_id: 746c6152-2fa2-11ed-92d3-27aaa54e4988
              ipv6: true
              user_data: |
                #cloud-config
                runcmd:
                  - touch /test.txt
            created_at: '2020-11-19T20:27:18Z'
            updated_at: '2020-12-01T00:42:16Z'
            current_utilization:
              memory: 0.3588531587713522
              cpu: 0.0007338008770232183
            status: active
            active_resources_count: 1
        links:
          pages: null
        meta:
          total: 1
    autoscale_create_response_dynamic:
      value:
        autoscale_pool:
          id: 0d3db13e-a604-4944-9827-7ec2642d32ac
          name: test-autoscaler-group-01
          config:
            min_instances: 1
            max_instances: 5
            target_cpu_utilization: 0.5
            cooldown_minutes: 10
          droplet_template:
            name: droplet-name
            size: c-2
            region: tor1
            image: ubuntu-20-04-x64
            tags:
              - my-tag
            ssh_keys:
              - 3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45
            vpc_uuid: 760e09ef-dc84-11e8-981e-3cfdfeaae000
            with_droplet_agent: true
            project_id: 746c6152-2fa2-11ed-92d3-27aaa54e4988
            ipv6: true
            user_data: |
              #cloud-config
              runcmd:
                - touch /test.txt
          created_at: '2020-11-19T20:27:18Z'
          updated_at: '2020-12-01T00:42:16Z'
          status: active
          active_resources_count: 1
    autoscale_create_response_static:
      value:
        autoscale_pool:
          id: 0d3db13e-a604-4944-9827-7ec2642d32ac
          name: test-autoscaler-group-01
          config:
            target_number_instances: 1
          droplet_template:
            name: droplet-name
            size: c-2
            region: tor1
            image: ubuntu-20-04-x64
            tags:
              - my-tag
            ssh_keys:
              - 3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45
            vpc_uuid: 760e09ef-dc84-11e8-981e-3cfdfeaae000
            with_droplet_agent: true
            project_id: 746c6152-2fa2-11ed-92d3-27aaa54e4988
            ipv6: true
            user_data: |
              #cloud-config
              runcmd:
                - touch /test.txt
          created_at: '2020-11-19T20:27:18Z'
          updated_at: '2020-12-01T00:42:16Z'
          status: active
          active_resources_count: 1
    autoscale_pool_single:
      value:
        autoscale_pool:
          id: 0d3db13e-a604-4944-9827-7ec2642d32ac
          name: test-autoscaler-group-01
          config:
            min_instances: 1
            max_instances: 5
            target_cpu_utilization: 0.5
            cooldown_minutes: 10
          droplet_template:
            name: droplet-name
            size: c-2
            region: tor1
            image: ubuntu-20-04-x64
            tags:
              - my-tag
            ssh_keys:
              - 3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45
            vpc_uuid: 760e09ef-dc84-11e8-981e-3cfdfeaae000
            with_droplet_agent: true
            project_id: 746c6152-2fa2-11ed-92d3-27aaa54e4988
            ipv6: true
            user_data: |
              #cloud-config
              runcmd:
                - touch /test.txt
          created_at: '2020-11-19T20:27:18Z'
          updated_at: '2020-12-01T00:42:16Z'
          current_utilization:
            memory: 0.3588531587713522
            cpu: 0.0007338008770232183
          status: active
          active_resources_count: 1
    members_all:
      value:
        droplets:
          - droplet_id: 123456
            created_at: '2020-11-19T20:27:18Z'
            updated_at: '2020-12-01T00:42:16Z'
            health_status: healthy
            status: active
            current_utilization:
              memory: 0.3588531587713522
              cpu: 0.0007338008770232183
        links:
          pages: null
        meta:
          total: 1
    history_all:
      value:
        history:
          - history_event_id: 01936530-4471-7b86-9634-32d8fcfecbc6
            current_instance_count: 2
            desired_instance_count: 2
            reason: CONFIGURATION_CHANGE
            status: success
            created_at: '2020-11-19T20:27:18Z'
            updated_at: '2020-12-01T00:42:16Z'
        links:
          pages: null
        meta:
          total: 1
    images_all:
      value:
        images:
          - id: 7555620
            name: Nifty New Snapshot
            distribution: Ubuntu
            slug: null
            public: false
            regions:
              - nyc2
              - nyc3
            created_at: '2014-11-04T22:23:02Z'
            type: snapshot
            min_disk_size: 20
            size_gigabytes: 2.34
            description: ''
            tags: []
            status: available
            error_message: ''
          - id: 7555621
            name: Another Snapshot
            distribution: Ubuntu
            slug: null
            public: false
            regions:
              - nyc2
            created_at: '2014-11-04T22:23:02Z'
            type: snapshot
            min_disk_size: 20
            size_gigabytes: 2.34
            description: ''
            tags: []
            status: available
            error_message: ''
          - id: 63663980
            name: 20.04 (LTS) x64
            distribution: Ubuntu
            slug: ubuntu-20-04-x64
            public: true
            regions:
              - nyc2
              - nyc3
            created_at: '2020-05-15T05:47:50Z'
            type: snapshot
            min_disk_size: 20
            size_gigabytes: 2.36
            description: ''
            tags: []
            status: available
            error_message: ''
          - id: 7555621
            name: A custom image
            distribution: Arch Linux
            slug: null
            public: false
            regions:
              - nyc3
            created_at: '2014-11-04T22:23:02Z'
            type: custom
            min_disk_size: 20
            size_gigabytes: 2.34
            description: ''
            tags: []
            status: available
            error_message: ''
          - id: 7555621
            name: An APP image
            distribution: Fedora
            slug: null
            public: false
            regions:
              - nyc2
              - nyc3
            created_at: '2014-11-04T22:23:02Z'
            type: snapshot
            min_disk_size: 20
            size_gigabytes: 2.34
            description: ''
            tags: []
            status: available
            error_message: ''
          - id: 7555621
            name: A simple tagged image
            distribution: CentOS
            slug: null
            public: false
            regions:
              - nyc2
              - nyc3
            created_at: '2014-11-04T22:23:02Z'
            type: snapshot
            min_disk_size: 20
            size_gigabytes: 2.34
            description: ''
            tags:
              - simple-image
            status: available
            error_message: ''
        links:
          pages: {}
        meta:
          total: 6
    images_snapshots:
      value:
        images:
          - id: 7555620
            name: Nifty New Snapshot
            distribution: Ubuntu
            slug: null
            public: false
            regions:
              - nyc2
              - nyc3
            created_at: '2014-11-04T22:23:02Z'
            type: snapshot
            min_disk_size: 20
            size_gigabytes: 2.34
            description: ''
            tags: []
            status: available
            error_message: ''
          - id: 7555621
            name: Another Snapshot
            distribution: Ubuntu
            slug: null
            public: false
            regions:
              - nyc2
            created_at: '2014-11-04T22:23:02Z'
            type: snapshot
            min_disk_size: 20
            size_gigabytes: 2.34
            description: ''
            tags: []
            status: available
            error_message: ''
        links:
          pages: {}
        meta:
          total: 2
    images_distribution:
      description: >
        **Important:**  

        The `type` query parameter is not directly related to the `type`
        attribute.

        The main thing to remember here is that DigitalOcean-produced
        distribution images will have `snapshot` as the type attribute. 
      value:
        images:
          - id: 63663980
            name: 20.04 (LTS) x64
            distribution: Ubuntu
            slug: ubuntu-20-04-x64
            public: true
            regions:
              - nyc2
              - nyc3
            created_at: '2020-05-15T05:47:50Z'
            type: snapshot
            min_disk_size: 20
            size_gigabytes: 2.36
            description: ''
            tags: []
            status: available
            error_message: ''
        links:
          pages: {}
        meta:
          total: 1
    images_custom:
      value:
        images:
          - id: 7555621
            name: A custom image
            distribution: Arch Linux
            slug: null
            public: false
            regions:
              - nyc3
            created_at: '2014-11-04T22:23:02Z'
            type: custom
            min_disk_size: 20
            size_gigabytes: 2.34
            description: ''
            tags: []
            status: available
            error_message: ''
        links:
          pages: {}
        meta:
          total: 1
    images_application:
      description: >
        **Important:**  

        The `type` query parameter is not directly related to the `type`
        attribute.
      value:
        images:
          - id: 7555621
            name: An APP image
            distribution: Fedora
            slug: null
            public: false
            regions:
              - nyc2
              - nyc3
            created_at: '2014-11-04T22:23:02Z'
            type: snapshot
            min_disk_size: 20
            size_gigabytes: 2.34
            description: ''
            tags: []
            status: available
            error_message: ''
        links:
          pages: {}
        meta:
          total: 1
    images_tagged:
      value:
        images:
          - id: 7555621
            name: A simple tagged image
            distribution: CentOS
            slug: null
            public: false
            regions:
              - nyc2
              - nyc3
            created_at: '2014-11-04T22:23:02Z'
            type: snapshot
            min_disk_size: 20
            size_gigabytes: 2.34
            description: ''
            tags:
              - simple-image
            status: available
            error_message: ''
        links:
          pages: {}
        meta:
          total: 1
    load_balancer_basic_response:
      value:
        load_balancer:
          id: 4de7ac8b-495b-4884-9a69-1050c6793cd6
          name: example-lb-01
          ip: 104.131.186.241
          size: lb-small
          algorithm: round_robin
          status: new
          created_at: '2017-02-01T22:22:58Z'
          forwarding_rules:
            - entry_protocol: http
              entry_port: 80
              target_protocol: http
              target_port: 80
              certificate_id: ''
              tls_passthrough: false
            - entry_protocol: https
              entry_port: 443
              target_protocol: https
              target_port: 443
              certificate_id: ''
              tls_passthrough: true
          health_check:
            protocol: http
            port: 80
            path: /
            check_interval_seconds: 10
            response_timeout_seconds: 5
            healthy_threshold: 5
            unhealthy_threshold: 3
          sticky_sessions:
            type: none
          region:
            name: New York 3
            slug: nyc3
            sizes:
              - s-1vcpu-1gb
              - s-1vcpu-2gb
              - s-1vcpu-3gb
              - s-2vcpu-2gb
              - s-3vcpu-1gb
              - s-2vcpu-4gb
              - s-4vcpu-8gb
              - s-6vcpu-16gb
              - s-8vcpu-32gb
              - s-12vcpu-48gb
              - s-16vcpu-64gb
              - s-20vcpu-96gb
              - s-24vcpu-128gb
              - s-32vcpu-192gb
            features:
              - private_networking
              - backups
              - ipv6
              - metadata
              - install_agent
            available: true
          tag: ''
          droplet_ids:
            - 3164444
            - 3164445
          redirect_http_to_https: false
          enable_proxy_protocol: false
          enable_backend_keepalive: false
          vpc_uuid: c33931f2-a26a-4e61-b85c-4e95a2ec431b
          disable_lets_encrypt_dns_records: false
          project_id: 9cc10173-e9ea-4176-9dbc-a4cee4c4ff30
          http_idle_timeout_seconds: 60
          firewall:
            deny:
              - cidr:1.2.0.0/16
              - ip:2.3.4.5
            allow:
              - ip:1.2.3.4
              - cidr:2.3.4.0/24
    load_balancer_ssl_termination_response:
      value:
        load_balancer:
          id: 4de7ac8b-495b-4884-9a69-1050c6793cd6
          name: example-lb-01
          ip: 104.131.186.241
          size: lb-small
          algorithm: round_robin
          status: new
          created_at: '2017-02-01T22:22:58Z'
          forwarding_rules:
            - entry_protocol: https
              entry_port: 443
              target_protocol: http
              target_port: 8080
              certificate_id: 892071a0-bb95-49bc-8021-3afd67a210bf
          health_check:
            protocol: http
            port: 80
            path: /
            check_interval_seconds: 10
            response_timeout_seconds: 5
            healthy_threshold: 5
            unhealthy_threshold: 3
          sticky_sessions:
            type: none
          region:
            name: New York 3
            slug: nyc3
            sizes:
              - s-1vcpu-1gb
              - s-1vcpu-2gb
              - s-1vcpu-3gb
              - s-2vcpu-2gb
              - s-3vcpu-1gb
              - s-2vcpu-4gb
              - s-4vcpu-8gb
              - s-6vcpu-16gb
              - s-8vcpu-32gb
              - s-12vcpu-48gb
              - s-16vcpu-64gb
              - s-20vcpu-96gb
              - s-24vcpu-128gb
              - s-32vcpu-192gb
            features:
              - private_networking
              - backups
              - ipv6
              - metadata
              - install_agent
            available: true
          tag: ''
          droplet_ids:
            - 3164444
            - 3164445
          redirect_http_to_https: false
          enable_proxy_protocol: false
          enable_backend_keepalive: false
          vpc_uuid: c33931f2-a26a-4e61-b85c-4e95a2ec431b
          disable_lets_encrypt_dns_records: false
    load_balancer_using_tag_response:
      value:
        load_balancer:
          id: 4de7ac8b-495b-4884-9a69-1050c6793cd6
          name: example-lb-01
          ip: 104.131.186.241
          size: lb-small
          algorithm: round_robin
          status: new
          created_at: '2017-02-01T22:22:58Z'
          forwarding_rules:
            - entry_protocol: https
              entry_port: 443
              target_protocol: http
              target_port: 8080
              certificate_id: 892071a0-bb95-49bc-8021-3afd67a210bf
          health_check:
            protocol: http
            port: 80
            path: /
            check_interval_seconds: 10
            response_timeout_seconds: 5
            healthy_threshold: 5
            unhealthy_threshold: 3
          sticky_sessions:
            type: none
          region:
            name: New York 3
            slug: nyc3
            sizes:
              - s-1vcpu-1gb
              - s-1vcpu-2gb
              - s-1vcpu-3gb
              - s-2vcpu-2gb
              - s-3vcpu-1gb
              - s-2vcpu-4gb
              - s-4vcpu-8gb
              - s-6vcpu-16gb
              - s-8vcpu-32gb
              - s-12vcpu-48gb
              - s-16vcpu-64gb
              - s-20vcpu-96gb
              - s-24vcpu-128gb
              - s-32vcpu-192gb
            features:
              - private_networking
              - backups
              - ipv6
              - metadata
              - install_agent
            available: true
          tag: prod:web
          droplet_ids:
            - 3164444
            - 3164445
          redirect_http_to_https: false
          enable_proxy_protocol: false
          enable_backend_keepalive: false
          vpc_uuid: c33931f2-a26a-4e61-b85c-4e95a2ec431b
          disable_lets_encrypt_dns_records: false
          project_id: 9cc10173-e9ea-4176-9dbc-a4cee4c4ff30
    load_balancer_sticky_sessions_and_health_check_response:
      value:
        load_balancer:
          id: 4de7ac8b-495b-4884-9a69-1050c6793cd6
          name: example-lb-01
          ip: 104.131.186.241
          size: lb-small
          algorithm: round_robin
          status: new
          created_at: '2017-02-01T22:22:58Z'
          forwarding_rules:
            - entry_protocol: https
              entry_port: 443
              target_protocol: http
              target_port: 8080
              certificate_id: 892071a0-bb95-49bc-8021-3afd67a210bf
          health_check:
            protocol: http
            port: 8080
            path: /health
            check_interval_seconds: 10
            response_timeout_seconds: 5
            healthy_threshold: 5
            unhealthy_threshold: 3
          sticky_sessions:
            type: cookies
            cookie_name: LB_COOKIE
            cookie_ttl_seconds: 300
          region:
            name: New York 3
            slug: nyc3
            sizes:
              - s-1vcpu-1gb
              - s-1vcpu-2gb
              - s-1vcpu-3gb
              - s-2vcpu-2gb
              - s-3vcpu-1gb
              - s-2vcpu-4gb
              - s-4vcpu-8gb
              - s-6vcpu-16gb
              - s-8vcpu-32gb
              - s-12vcpu-48gb
              - s-16vcpu-64gb
              - s-20vcpu-96gb
              - s-24vcpu-128gb
              - s-32vcpu-192gb
            features:
              - private_networking
              - backups
              - ipv6
              - metadata
              - install_agent
            available: true
          tag: prod:web
          droplet_ids:
            - 3164444
            - 3164445
          redirect_http_to_https: false
          enable_proxy_protocol: false
          enable_backend_keepalive: false
          vpc_uuid: c33931f2-a26a-4e61-b85c-4e95a2ec431b
          disable_lets_encrypt_dns_records: false
          project_id: 9cc10173-e9ea-4176-9dbc-a4cee4c4ff30
    load_balancers_all:
      value:
        load_balancers:
          - id: 4de7ac8b-495b-4884-9a69-1050c6793cd6
            name: example-lb-01
            ip: 104.131.186.241
            size: lb-small
            algorithm: round_robin
            status: new
            created_at: '2017-02-01T22:22:58Z'
            forwarding_rules:
              - entry_protocol: http
                entry_port: 80
                target_protocol: http
                target_port: 80
                certificate_id: ''
                tls_passthrough: false
              - entry_protocol: https
                entry_port: 443
                target_protocol: https
                target_port: 443
                certificate_id: ''
                tls_passthrough: true
            health_check:
              protocol: http
              port: 80
              path: /
              check_interval_seconds: 10
              response_timeout_seconds: 5
              healthy_threshold: 5
              unhealthy_threshold: 3
            sticky_sessions:
              type: none
            region:
              name: New York 3
              slug: nyc3
              sizes:
                - s-1vcpu-1gb
                - s-1vcpu-2gb
                - s-1vcpu-3gb
                - s-2vcpu-2gb
                - s-3vcpu-1gb
                - s-2vcpu-4gb
                - s-4vcpu-8gb
                - s-6vcpu-16gb
                - s-8vcpu-32gb
                - s-12vcpu-48gb
                - s-16vcpu-64gb
                - s-20vcpu-96gb
                - s-24vcpu-128gb
                - s-32vcpu-192gb
              features:
                - private_networking
                - backups
                - ipv6
                - metadata
                - install_agent
              available: true
            tag: ''
            droplet_ids:
              - 3164444
              - 3164445
            redirect_http_to_https: false
            enable_proxy_protocol: false
            enable_backend_keepalive: false
            vpc_uuid: c33931f2-a26a-4e61-b85c-4e95a2ec431b
            disable_lets_encrypt_dns_records: false
            firewall:
              deny:
                - cidr:1.2.0.0/16
                - ip:2.3.4.5
              allow:
                - ip:1.2.3.4
                - cidr:2.3.4.0/24
          - id: 56775c3f-04ab-4fb3-a7ed-40ef9bc8eece
            name: prod-web-lb-01
            ip: 45.55.125.24
            size: lb-small
            algorithm: round_robin
            status: active
            created_at: '2020-09-08T18:58:04Z'
            forwarding_rules:
              - entry_protocol: https
                entry_port: 443
                target_protocol: http
                target_port: 8080
                certificate_id: 892071a0-bb95-49bc-8021-3afd67a210bf
                tls_passthrough: false
            health_check:
              protocol: https
              port: 443
              path: /
              check_interval_seconds: 10
              response_timeout_seconds: 5
              healthy_threshold: 5
              unhealthy_threshold: 3
            sticky_sessions:
              type: cookies
              cookie_name: DO-LB
              cookie_ttl_seconds: 300
            region:
              name: New York 3
              slug: nyc3
              sizes:
                - s-1vcpu-1gb
                - s-1vcpu-2gb
                - s-1vcpu-3gb
                - s-2vcpu-2gb
                - s-3vcpu-1gb
                - s-2vcpu-4gb
                - s-4vcpu-8gb
                - s-6vcpu-16gb
                - s-8vcpu-32gb
                - s-12vcpu-48gb
                - s-16vcpu-64gb
                - s-20vcpu-96gb
                - s-24vcpu-128gb
                - s-32vcpu-192gb
              features:
                - private_networking
                - backups
                - ipv6
                - metadata
                - install_agent
              available: true
            tag: prod:web
            droplet_ids:
              - 55806512
              - 55806515
              - 55806524
            redirect_http_to_https: true
            enable_proxy_protocol: false
            enable_backend_keepalive: false
            vpc_uuid: 587d698c-de84-11e8-80bc-3cfdfea9fcd1
            disable_lets_encrypt_dns_records: false
            project_id: 9cc10173-e9ea-4176-9dbc-a4cee4c4ff30
            http_idle_timeout_seconds: 60
            firewall:
              deny:
                - cidr:1.2.0.0/16
                - ip:2.3.4.5
              allow:
                - ip:1.2.3.4
                - cidr:2.3.4.0/24
        links: {}
        meta:
          total: 2
    load_balancer_update_response:
      value:
        load_balancer:
          id: 4de7ac8b-495b-4884-9a69-1050c6793cd6
          name: updated-example-lb-01
          ip: 104.131.186.241
          size: lb-small
          algorithm: round_robin
          status: new
          created_at: '2017-02-01T22:22:58Z'
          forwarding_rules:
            - entry_protocol: http
              entry_port: 80
              target_protocol: http
              target_port: 80
              certificate_id: ''
              tls_passthrough: false
            - entry_protocol: https
              entry_port: 443
              target_protocol: https
              target_port: 443
              certificate_id: ''
              tls_passthrough: true
          health_check:
            protocol: http
            port: 80
            path: /
            check_interval_seconds: 10
            response_timeout_seconds: 5
            healthy_threshold: 5
            unhealthy_threshold: 3
          sticky_sessions:
            type: none
          region:
            name: New York 3
            slug: nyc3
            sizes:
              - s-1vcpu-1gb
              - s-1vcpu-2gb
              - s-1vcpu-3gb
              - s-2vcpu-2gb
              - s-3vcpu-1gb
              - s-2vcpu-4gb
              - s-4vcpu-8gb
              - s-6vcpu-16gb
              - s-8vcpu-32gb
              - s-12vcpu-48gb
              - s-16vcpu-64gb
              - s-20vcpu-96gb
              - s-24vcpu-128gb
              - s-32vcpu-192gb
            features:
              - private_networking
              - backups
              - ipv6
              - metadata
              - install_agent
            available: true
          tag: ''
          droplet_ids:
            - 3164444
            - 3164445
          redirect_http_to_https: false
          enable_proxy_protocol: true
          enable_backend_keepalive: true
          vpc_uuid: c33931f2-a26a-4e61-b85c-4e95a2ec431b
          disable_lets_encrypt_dns_records: false
          project_id: 9cc10173-e9ea-4176-9dbc-a4cee4c4ff30
          http_idle_timeout_seconds: 60
          firewall:
            deny:
              - cidr:1.2.0.0/16
              - ip:2.3.4.5
            allow:
              - ip:1.2.3.4
              - cidr:2.3.4.0/24
    reserved_ip_assigning:
      summary: Assigning to Droplet
      value:
        reserved_ip:
          ip: 45.55.96.47
          droplet: null
          region:
            name: New York 3
            slug: nyc3
            features:
              - private_networking
              - backups
              - ipv6
              - metadata
              - install_agent
              - storage
              - image_transfer
            available: true
            sizes:
              - s-1vcpu-1gb
              - s-1vcpu-2gb
              - s-1vcpu-3gb
              - s-2vcpu-2gb
              - s-3vcpu-1gb
              - s-2vcpu-4gb
              - s-4vcpu-8gb
              - s-6vcpu-16gb
              - s-8vcpu-32gb
              - s-12vcpu-48gb
              - s-16vcpu-64gb
              - s-20vcpu-96gb
              - s-24vcpu-128gb
              - s-32vcpu-192g
          locked: true
          project_id: 746c6152-2fa2-11ed-92d3-27aaa54e4988
        links:
          droplets:
            - id: 213939433
              rel: droplet
              href: https://api.digitalocean.com/v2/droplets/213939433
          actions:
            - id: 1088924622
              rel: assign_ip
              href: https://api.digitalocean.com/v2/actions/1088924622
    reserved_ip_reserving:
      summary: Reserving to Region
      value:
        reserved_ip:
          ip: 45.55.96.47
          droplet: null
          region:
            name: New York 3
            slug: nyc3
            features:
              - private_networking
              - backups
              - ipv6
              - metadata
              - install_agent
              - storage
              - image_transfer
            available: true
            sizes:
              - s-1vcpu-1gb
              - s-1vcpu-2gb
              - s-1vcpu-3gb
              - s-2vcpu-2gb
              - s-3vcpu-1gb
              - s-2vcpu-4gb
              - s-4vcpu-8gb
              - s-6vcpu-16gb
              - s-8vcpu-32gb
              - s-12vcpu-48gb
              - s-16vcpu-64gb
              - s-20vcpu-96gb
              - s-24vcpu-128gb
              - s-32vcpu-192g
          locked: false
          project_id: 746c6152-2fa2-11ed-92d3-27aaa54e4988
        links: {}
    reserved_ip_assigned:
      summary: Assigned to Droplet
      value:
        reserved_ip:
          ip: 45.55.96.47
          droplet:
            id: 3164444
            name: example.com
            memory: 1024
            vcpus: 1
            disk: 25
            locked: false
            status: active
            kernel: null
            created_at: '2020-07-21T18:37:44Z'
            features:
              - backups
              - private_networking
              - ipv6
            backup_ids:
              - 53893572
            next_backup_window:
              start: '2020-07-30T00:00:00Z'
              end: '2020-07-30T23:00:00Z'
            snapshot_ids:
              - 67512819
            image:
              id: 63663980
              name: 20.04 (LTS) x64
              type: base
              distribution: Ubuntu
              slug: ubuntu-20-04-x64
              public: true
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              created_at: '2020-05-15T05:47:50Z'
              min_disk_size: 20
              size_gigabytes: 2.36
              description: ''
              tags: []
              status: available
              error_message: ''
            volume_ids: []
            size:
              slug: s-1vcpu-1gb
              memory: 1024
              vcpus: 1
              disk: 25
              transfer: 1
              price_monthly: 5
              price_hourly: 0.00743999984115362
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              available: true
              description: Basic
            size_slug: s-1vcpu-1gb
            networks:
              v4:
                - ip_address: 10.128.192.124
                  netmask: 255.255.0.0
                  gateway: nil
                  type: private
                - ip_address: 192.241.165.154
                  netmask: 255.255.255.0
                  gateway: 192.241.165.1
                  type: public
              v6:
                - ip_address: 2604:a880:0:1010::18a:a001
                  netmask: 64
                  gateway: 2604:a880:0:1010::1
                  type: public
            region:
              name: New York 3
              slug: nyc3
              features:
                - backups
                - ipv6
                - metadata
                - install_agent
                - storage
                - image_transfer
              available: true
              sizes:
                - s-1vcpu-1gb
                - s-1vcpu-2gb
                - s-1vcpu-3gb
                - s-2vcpu-2gb
                - s-3vcpu-1gb
                - s-2vcpu-4gb
                - s-4vcpu-8gb
                - s-6vcpu-16gb
                - s-8vcpu-32gb
                - s-12vcpu-48gb
                - s-16vcpu-64gb
                - s-20vcpu-96gb
                - s-24vcpu-128gb
                - s-32vcpu-192g
            tags:
              - web
              - env:prod
            vpc_uuid: 760e09ef-dc84-11e8-981e-3cfdfeaae000
          region:
            name: New York 3
            slug: nyc3
            features:
              - backups
              - ipv6
              - metadata
              - install_agent
              - storage
              - image_transfer
            available: true
            sizes:
              - s-1vcpu-1gb
              - s-1vcpu-2gb
              - s-1vcpu-3gb
              - s-2vcpu-2gb
              - s-3vcpu-1gb
              - s-2vcpu-4gb
              - s-4vcpu-8gb
              - s-6vcpu-16gb
              - s-8vcpu-32gb
              - s-12vcpu-48gb
              - s-16vcpu-64gb
              - s-20vcpu-96gb
              - s-24vcpu-128gb
              - s-32vcpu-192g
          locked: false
          project_id: 746c6152-2fa2-11ed-92d3-27aaa54e4988
    reserved_ip_reserved:
      summary: Reserved to Region
      value:
        reserved_ip:
          ip: 45.55.96.47
          droplet: null
          region:
            name: New York 3
            slug: nyc3
            features:
              - private_networking
              - backups
              - ipv6
              - metadata
              - install_agent
              - storage
              - image_transfer
            available: true
            sizes:
              - s-1vcpu-1gb
              - s-1vcpu-2gb
              - s-1vcpu-3gb
              - s-2vcpu-2gb
              - s-3vcpu-1gb
              - s-2vcpu-4gb
              - s-4vcpu-8gb
              - s-6vcpu-16gb
              - s-8vcpu-32gb
              - s-12vcpu-48gb
              - s-16vcpu-64gb
              - s-20vcpu-96gb
              - s-24vcpu-128gb
              - s-32vcpu-192g
          locked: false
          project_id: 746c6152-2fa2-11ed-92d3-27aaa54e4988
    reserved_ipv6_reserved:
      summary: Reserved to Region
      value:
        reserved_ipv6:
          ip: 2409:40d0:f7:1017:74b4:3a96:105e:4c6e
          region_slug: nyc3
          reserved_at: '2024-11-20T11:08:30Z'
          droplet: null
    reserved_ipv6_assigned:
      summary: Assigned to Droplet
      value:
        reserved_ipv6:
          ip: 2409:40d0:f7:1017:74b4:3a96:105e:4c6e
          reserved_at: '2024-11-20T11:08:30Z'
          droplet:
            id: 3164444
            name: example.com
            memory: 1024
            vcpus: 1
            disk: 25
            locked: false
            status: active
            kernel: null
            created_at: '2020-07-21T18:37:44Z'
            features:
              - backups
              - private_networking
              - ipv6
            backup_ids:
              - 53893572
            next_backup_window:
              start: '2020-07-30T00:00:00Z'
              end: '2020-07-30T23:00:00Z'
            snapshot_ids:
              - 67512819
            image:
              id: 63663980
              name: 20.04 (LTS) x64
              type: base
              distribution: Ubuntu
              slug: ubuntu-20-04-x64
              public: true
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              created_at: '2020-05-15T05:47:50Z'
              min_disk_size: 20
              size_gigabytes: 2.36
              description: ''
              tags: []
              status: available
              error_message: ''
            volume_ids: []
            size:
              slug: s-1vcpu-1gb
              memory: 1024
              vcpus: 1
              disk: 25
              transfer: 1
              price_monthly: 5
              price_hourly: 0.00743999984115362
              regions:
                - ams2
                - ams3
                - blr1
                - fra1
                - lon1
                - nyc1
                - nyc2
                - nyc3
                - sfo1
                - sfo2
                - sfo3
                - sgp1
                - tor1
              available: true
              description: Basic
            size_slug: s-1vcpu-1gb
            networks:
              v4:
                - ip_address: 10.128.192.124
                  netmask: 255.255.0.0
                  gateway: nil
                  type: private
                - ip_address: 192.241.165.154
                  netmask: 255.255.255.0
                  gateway: 192.241.165.1
                  type: public
              v6:
                - ip_address: 2604:a880:0:1010::18a:a001
                  netmask: 64
                  gateway: 2604:a880:0:1010::1
                  type: public
            region:
              name: New York 3
              slug: nyc3
              features:
                - backups
                - ipv6
                - metadata
                - install_agent
                - storage
                - image_transfer
              available: true
              sizes:
                - s-1vcpu-1gb
                - s-1vcpu-2gb
                - s-1vcpu-3gb
                - s-2vcpu-2gb
                - s-3vcpu-1gb
                - s-2vcpu-4gb
                - s-4vcpu-8gb
                - s-6vcpu-16gb
                - s-8vcpu-32gb
                - s-12vcpu-48gb
                - s-16vcpu-64gb
                - s-20vcpu-96gb
                - s-24vcpu-128gb
                - s-32vcpu-192g
            tags:
              - web
              - env:prod
            vpc_uuid: 760e09ef-dc84-11e8-981e-3cfdfeaae000
          region_slug: nyc3
    snapshots_all:
      value:
        snapshots:
          - id: '6372321'
            name: web-01-1595954862243
            created_at: '2020-07-28T16:47:44Z'
            regions:
              - nyc3
              - sfo3
            resource_id: '200776916'
            resource_type: droplet
            min_disk_size: 25
            size_gigabytes: 2.34
            tags:
              - web
              - env:prod
          - id: fbe805e8-866b-11e6-96bf-000f53315a41
            name: pvc-01-1595954862243
            created_at: '2019-09-28T23:14:30Z'
            regions:
              - nyc1
            resource_id: 89bcc42f-85cf-11e6-a004-000f53315871
            resource_type: volume
            min_disk_size: 2
            size_gigabytes: 0.1008
            tags:
              - k8s
        links: {}
        meta:
          total: 2
    snapshots_droplets_only:
      value:
        snapshots:
          - id: '6372321'
            name: web-01-1595954862243
            created_at: '2020-07-28T16:47:44Z'
            regions:
              - nyc3
              - sfo3
            resource_id: '200776916'
            resource_type: droplet
            min_disk_size: 25
            size_gigabytes: 2.34
            tags:
              - web
              - env:prod
        links: {}
        meta:
          total: 1
    snapshots_volumes_only:
      value:
        snapshots:
          - id: fbe805e8-866b-11e6-96bf-000f53315a41
            name: pvc-01-1595954862243
            created_at: '2019-09-28T23:14:30Z'
            regions:
              - nyc1
            resource_id: 89bcc42f-85cf-11e6-a004-000f53315871
            resource_type: volume
            min_disk_size: 2
            size_gigabytes: 0.1008
            tags:
              - k8s
        links: {}
        meta:
          total: 1
    volumes_all:
      value:
        volumes:
          - id: 506f78a4-e098-11e5-ad9f-000f53306ae1
            region:
              name: New York 1
              slug: nyc1
              sizes:
                - s-1vcpu-1gb
                - s-1vcpu-2gb
                - s-1vcpu-3gb
                - s-2vcpu-2gb
                - s-3vcpu-1gb
                - s-2vcpu-4gb
                - s-4vcpu-8gb
                - s-6vcpu-16gb
                - s-8vcpu-32gb
                - s-12vcpu-48gb
                - s-16vcpu-64gb
                - s-20vcpu-96gb
                - s-24vcpu-128gb
                - s-32vcpu-192gb
              features:
                - private_networking
                - backups
                - ipv6
                - metadata
              available: true
            droplet_ids: []
            name: example
            description: Block store for examples
            size_gigabytes: 10
            created_at: '2016-03-02T17:00:49Z'
            filesystem_type: ext4
            filesystem_label: example
            tags:
              - aninterestingtag
          - id: 506f78a4-e098-11e5-ad9f-000f53305eb2
            region:
              name: New York 3
              slug: nyc3
              sizes:
                - s-1vcpu-1gb
                - s-1vcpu-2gb
                - s-1vcpu-3gb
                - s-2vcpu-2gb
                - s-3vcpu-1gb
                - s-2vcpu-4gb
                - s-4vcpu-8gb
                - s-6vcpu-16gb
                - s-8vcpu-32gb
                - s-12vcpu-48gb
                - s-16vcpu-64gb
                - s-20vcpu-96gb
                - s-24vcpu-128gb
                - s-32vcpu-192gb
              features:
                - private_networking
                - backups
                - ipv6
                - metadata
              available: true
            droplet_ids: []
            name: example
            description: Block store for examples
            size_gigabytes: 10
            created_at: '2016-03-02T17:01:49Z'
            filesystem_type: ext4
            filesystem_label: example
            tags:
              - aninterestingtag
        links: {}
        meta:
          total: 2
    volumes_filtered_by_name:
      value:
        volumes:
          - id: 506f78a4-e098-11e5-ad9f-000f53306ae1
            region:
              name: New York 1
              slug: nyc1
              sizes:
                - s-1vcpu-1gb
                - s-1vcpu-2gb
                - s-1vcpu-3gb
                - s-2vcpu-2gb
                - s-3vcpu-1gb
                - s-2vcpu-4gb
                - s-4vcpu-8gb
                - s-6vcpu-16gb
                - s-8vcpu-32gb
                - s-12vcpu-48gb
                - s-16vcpu-64gb
                - s-20vcpu-96gb
                - s-24vcpu-128gb
                - s-32vcpu-192gb
              features:
                - private_networking
                - backups
                - ipv6
                - metadata
              available: true
            droplet_ids: []
            name: example
            description: Block store for examples
            size_gigabytes: 10
            created_at: '2016-03-02T17:00:49Z'
            filesystem_type: ext4
            filesystem_label: example
            tags:
              - aninterestingtag
        links: {}
        meta:
          total: 1
    volumes_filtered_by_region:
      value:
        volumes:
          - id: 506f78a4-e098-11e5-ad9f-000f53306ae1
            region:
              name: New York 1
              slug: nyc1
              sizes:
                - s-1vcpu-1gb
                - s-1vcpu-2gb
                - s-1vcpu-3gb
                - s-2vcpu-2gb
                - s-3vcpu-1gb
                - s-2vcpu-4gb
                - s-4vcpu-8gb
                - s-6vcpu-16gb
                - s-8vcpu-32gb
                - s-12vcpu-48gb
                - s-16vcpu-64gb
                - s-20vcpu-96gb
                - s-24vcpu-128gb
                - s-32vcpu-192gb
              features:
                - private_networking
                - backups
                - ipv6
                - metadata
              available: true
            droplet_ids: []
            name: example
            description: Block store for examples
            size_gigabytes: 10
            created_at: '2016-03-02T17:00:49Z'
            filesystem_type: ext4
            filesystem_label: example
            tags:
              - aninterestingtag
        links: {}
        meta:
          total: 1
    volume_action_attach_response:
      value:
        action:
          id: 72531856
          status: completed
          type: attach_volume
          started_at: '2020-11-12T17:51:03Z'
          completed_at: '2020-11-12T17:51:14Z'
          resource_type: volume
          region:
            name: New York 1
            slug: nyc1
            sizes:
              - s-1vcpu-1gb
              - s-1vcpu-2gb
              - s-1vcpu-3gb
              - s-2vcpu-2gb
              - s-3vcpu-1gb
              - s-2vcpu-4gb
              - s-4vcpu-8gb
              - s-6vcpu-16gb
              - s-8vcpu-32gb
              - s-12vcpu-48gb
              - s-16vcpu-64gb
              - s-20vcpu-96gb
              - s-24vcpu-128gb
              - s-32vcpu-192gb
            features:
              - private_networking
              - backups
              - ipv6
              - metadata
            available: true
          region_slug: nyc1
    volume_action_detach_response:
      value:
        action:
          id: 68212773
          status: in-progress
          type: detach_volume
          started_at: '2015-10-15T17:46:15Z'
          completed_at: null
          resource_id: null
          resource_type: backend
          region:
            name: New York 1
            slug: nyc1
            sizes:
              - s-1vcpu-1gb
              - s-1vcpu-2gb
              - s-1vcpu-3gb
              - s-2vcpu-2gb
              - s-3vcpu-1gb
              - s-2vcpu-4gb
              - s-4vcpu-8gb
              - s-6vcpu-16gb
              - s-8vcpu-32gb
              - s-12vcpu-48gb
              - s-16vcpu-64gb
              - s-20vcpu-96gb
              - s-24vcpu-128gb
              - s-32vcpu-192gb
            features:
              - private_networking
              - backups
              - ipv6
              - metadata
            available: true
          region_slug: nyc1
    vpc_nat_gateways:
      value:
        vpc_nat_gateways:
          - id: 70e1b58d-cdec-4e95-b3ee-2d4d95feff51
            name: test-vpc-nat-gateways
            type: PUBLIC
            state: ACTIVE
            region: tor1
            size: 1
            vpcs:
              - vpc_uuid: 0eb1752f-807b-4562-a077-8018e13ab1fb
                gateway_ip: 10.118.0.35
            egresses:
              public_gateways:
                - ipv4: 174.138.113.197
            udp_timeout_seconds: 30
            icmp_timeout_seconds: 30
            tcp_timeout_seconds: 30
            created_at: '2025-08-12T18:43:14Z'
            updated_at: '2025-08-12T19:00:04Z'
        links:
          pages: null
        meta:
          total: 1
    vpc_nat_gateway:
      value:
        vpc_nat_gateway:
          id: 70e1b58d-cdec-4e95-b3ee-2d4d95feff51
          name: test-vpc-nat-gateways
          type: PUBLIC
          state: ACTIVE
          region: tor1
          size: 1
          vpcs:
            - vpc_uuid: 0eb1752f-807b-4562-a077-8018e13ab1fb
              gateway_ip: 10.118.0.35
          egresses:
            public_gateways:
              - ipv4: 174.138.113.197
          udp_timeout_seconds: 30
          icmp_timeout_seconds: 30
          tcp_timeout_seconds: 30
          created_at: '2025-08-12T18:43:14Z'
          updated_at: '2025-08-12T19:00:04Z'
  headers:
    ratelimit-limit:
      schema:
        type: integer
      example: 5000
      description: >-
        The default limit on number of requests that can be made per hour and
        per minute. Current rate limits are 5000 requests per hour and 250
        requests per minute.
    ratelimit-remaining:
      schema:
        type: integer
      example: 4816
      description: >-
        The number of requests in your hourly quota that remain before you hit
        your request limit. See
        https://developers.digitalocean.com/documentation/v2/#rate-limit for
        information about how requests expire.
    ratelimit-reset:
      schema:
        type: integer
      example: 1444931833
      description: >-
        The time when the oldest request will expire. The value is given in Unix
        epoch time. See
        https://developers.digitalocean.com/documentation/v2/#rate-limit for
        information about how requests expire.
    content-type:
      description: 'The type of data that is returned from a request. '
      schema:
        type: string
      example: application/json; charset=utf-8
    x-request-id:
      description: >-
        Optionally, some endpoints may include a request ID that should be
        provided  when reporting bugs or opening support tickets to help
        identify the issue.
      schema:
        type: string
        format: uuid
      example: 515850a0-a812-50bf-aa3c-d0d21d287e40
  links:
    sshKeys_get_by_id:
      operationId: sshKeys_get_by_id
      parameters:
        ssh_key_identifier: $response.body#/ssh_key/id
      description: >-
        The `id` value returned in the response can be used as the
        `ssh_key_identifier` parameter in `GET
        /v2/account/keys/{ssh_key_identifier}`.
    sshKeys_get_by_fingerprint:
      operationId: sshKeys_get_by_fingerprint
      parameters:
        ssh_key_identifier: $response.body#/ssh_key/fingerprint
      description: >-
        The `fingerprint` value returned in the response can be used as the
        `ssh_key_identifier` parameter in `GET
        /v2/account/keys/{ssh_key_identifier}`.
    sshKeys_delete_by_id:
      operationId: sshKeys_delete_by_id
      parameters:
        ssh_key_identifier: $response.body#/ssh_key/id
      description: >-
        The `id` value returned in the response can be used as the 
        `ssh_key_identifier` parameter in `DELETE
        /v2/account/keys/{ssh_key_identifier}`.
    sshKeys_delete_by_fingerprint:
      operationId: ssh_keys_delete_by_fingerprint
      parameters:
        ssh_key_identifier: $response.body#/ssh_key/fingerprint
      description: >-
        The `fingerprint` value returned in the response can be used as the 
        `ssh_key_identifier` parameter in `DELETE
        /v2/account/keys/{ssh_key_identifier}`.
  x-stackQL-resources:
    ssh_keys:
      id: digitalocean.compute.ssh_keys
      name: ssh_keys
      title: Ssh Keys
      methods:
        ssh_keys_list:
          operation:
            $ref: '#/paths/~1v2~1account~1keys/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.ssh_keys
        ssh_keys_create:
          operation:
            $ref: '#/paths/~1v2~1account~1keys/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        ssh_keys_get:
          operation:
            $ref: '#/paths/~1v2~1account~1keys~1{ssh_key_identifier}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.ssh_key
        ssh_keys_update:
          operation:
            $ref: '#/paths/~1v2~1account~1keys~1{ssh_key_identifier}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        ssh_keys_delete:
          operation:
            $ref: '#/paths/~1v2~1account~1keys~1{ssh_key_identifier}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/ssh_keys/methods/ssh_keys_get'
          - $ref: '#/components/x-stackQL-resources/ssh_keys/methods/ssh_keys_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/ssh_keys/methods/ssh_keys_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/ssh_keys/methods/ssh_keys_delete'
        replace:
          - $ref: '#/components/x-stackQL-resources/ssh_keys/methods/ssh_keys_update'
    cdn_endpoints:
      id: digitalocean.compute.cdn_endpoints
      name: cdn_endpoints
      title: Cdn Endpoints
      methods:
        cdn_list_endpoints:
          operation:
            $ref: '#/paths/~1v2~1cdn~1endpoints/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.endpoints
        cdn_create_endpoint:
          operation:
            $ref: '#/paths/~1v2~1cdn~1endpoints/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        cdn_get_endpoint:
          operation:
            $ref: '#/paths/~1v2~1cdn~1endpoints~1{cdn_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.endpoint
        cdn_update_endpoints:
          operation:
            $ref: '#/paths/~1v2~1cdn~1endpoints~1{cdn_id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cdn_delete_endpoint:
          operation:
            $ref: '#/paths/~1v2~1cdn~1endpoints~1{cdn_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        cdn_purge_cache:
          operation:
            $ref: '#/paths/~1v2~1cdn~1endpoints~1{cdn_id}~1cache/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/cdn_endpoints/methods/cdn_get_endpoint
          - $ref: >-
              #/components/x-stackQL-resources/cdn_endpoints/methods/cdn_list_endpoints
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/cdn_endpoints/methods/cdn_create_endpoint
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/cdn_endpoints/methods/cdn_delete_endpoint
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/cdn_endpoints/methods/cdn_update_endpoints
    certificates:
      id: digitalocean.compute.certificates
      name: certificates
      title: Certificates
      methods:
        certificates_list:
          operation:
            $ref: '#/paths/~1v2~1certificates/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.certificates
        certificates_create:
          operation:
            $ref: '#/paths/~1v2~1certificates/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        certificates_get:
          operation:
            $ref: '#/paths/~1v2~1certificates~1{certificate_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.certificate
        certificates_delete:
          operation:
            $ref: '#/paths/~1v2~1certificates~1{certificate_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/certificates/methods/certificates_get
          - $ref: >-
              #/components/x-stackQL-resources/certificates/methods/certificates_list
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/certificates/methods/certificates_create
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/certificates/methods/certificates_delete
        replace: []
    domains:
      id: digitalocean.compute.domains
      name: domains
      title: Domains
      methods:
        domains_list:
          operation:
            $ref: '#/paths/~1v2~1domains/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.domains
        domains_create:
          operation:
            $ref: '#/paths/~1v2~1domains/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        domains_get:
          operation:
            $ref: '#/paths/~1v2~1domains~1{domain_name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.domain
        domains_delete:
          operation:
            $ref: '#/paths/~1v2~1domains~1{domain_name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/domains/methods/domains_get'
          - $ref: '#/components/x-stackQL-resources/domains/methods/domains_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/domains/methods/domains_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/domains/methods/domains_delete'
        replace: []
    domain_records:
      id: digitalocean.compute.domain_records
      name: domain_records
      title: Domain Records
      methods:
        domains_list_records:
          operation:
            $ref: '#/paths/~1v2~1domains~1{domain_name}~1records/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.domain_records
        domains_create_record:
          operation:
            $ref: '#/paths/~1v2~1domains~1{domain_name}~1records/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        domains_get_record:
          operation:
            $ref: >-
              #/paths/~1v2~1domains~1{domain_name}~1records~1{domain_record_id}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.domain_record
        domains_patch_record:
          operation:
            $ref: >-
              #/paths/~1v2~1domains~1{domain_name}~1records~1{domain_record_id}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        domains_update_record:
          operation:
            $ref: >-
              #/paths/~1v2~1domains~1{domain_name}~1records~1{domain_record_id}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        domains_delete_record:
          operation:
            $ref: >-
              #/paths/~1v2~1domains~1{domain_name}~1records~1{domain_record_id}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/domain_records/methods/domains_get_record
          - $ref: >-
              #/components/x-stackQL-resources/domain_records/methods/domains_list_records
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/domain_records/methods/domains_create_record
        update:
          - $ref: >-
              #/components/x-stackQL-resources/domain_records/methods/domains_patch_record
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/domain_records/methods/domains_delete_record
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/domain_records/methods/domains_update_record
    droplets:
      id: digitalocean.compute.droplets
      name: droplets
      title: Droplets
      methods:
        droplets_list:
          operation:
            $ref: '#/paths/~1v2~1droplets/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.droplets
        droplets_create:
          operation:
            $ref: '#/paths/~1v2~1droplets/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        droplets_destroy_by_tag:
          operation:
            $ref: '#/paths/~1v2~1droplets/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        droplets_get:
          operation:
            $ref: '#/paths/~1v2~1droplets~1{droplet_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.droplet
        droplets_destroy:
          operation:
            $ref: '#/paths/~1v2~1droplets~1{droplet_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/droplets/methods/droplets_get'
          - $ref: '#/components/x-stackQL-resources/droplets/methods/droplets_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/droplets/methods/droplets_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/droplets/methods/droplets_destroy'
          - $ref: >-
              #/components/x-stackQL-resources/droplets/methods/droplets_destroy_by_tag
        replace: []
    droplet_backups:
      id: digitalocean.compute.droplet_backups
      name: droplet_backups
      title: Droplet Backups
      methods:
        droplets_list_backups:
          operation:
            $ref: '#/paths/~1v2~1droplets~1{droplet_id}~1backups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.backups
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/droplet_backups/methods/droplets_list_backups
        insert: []
        update: []
        delete: []
        replace: []
    droplet_backup_policies:
      id: digitalocean.compute.droplet_backup_policies
      name: droplet_backup_policies
      title: Droplet Backup Policies
      methods:
        droplets_get_backup_policy:
          operation:
            $ref: '#/paths/~1v2~1droplets~1{droplet_id}~1backups~1policy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.policy
        droplets_list_backup_policies:
          operation:
            $ref: '#/paths/~1v2~1droplets~1backups~1policies/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.policies
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/droplet_backup_policies/methods/droplets_get_backup_policy
          - $ref: >-
              #/components/x-stackQL-resources/droplet_backup_policies/methods/droplets_list_backup_policies
        insert: []
        update: []
        delete: []
        replace: []
    droplet_supported_backup_policies:
      id: digitalocean.compute.droplet_supported_backup_policies
      name: droplet_supported_backup_policies
      title: Droplet Supported Backup Policies
      methods:
        droplets_list_supported_backup_policies:
          operation:
            $ref: '#/paths/~1v2~1droplets~1backups~1supported_policies/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.supported_policies
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/droplet_supported_backup_policies/methods/droplets_list_supported_backup_policies
        insert: []
        update: []
        delete: []
        replace: []
    droplet_snapshots:
      id: digitalocean.compute.droplet_snapshots
      name: droplet_snapshots
      title: Droplet Snapshots
      methods:
        droplets_list_snapshots:
          operation:
            $ref: '#/paths/~1v2~1droplets~1{droplet_id}~1snapshots/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.snapshots
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/droplet_snapshots/methods/droplets_list_snapshots
        insert: []
        update: []
        delete: []
        replace: []
    droplet_actions:
      id: digitalocean.compute.droplet_actions
      name: droplet_actions
      title: Droplet Actions
      methods:
        droplet_actions_list:
          operation:
            $ref: '#/paths/~1v2~1droplets~1{droplet_id}~1actions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.actions
        droplet_actions_post:
          operation:
            $ref: '#/paths/~1v2~1droplets~1{droplet_id}~1actions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        droplet_actions_post_by_tag:
          operation:
            $ref: '#/paths/~1v2~1droplets~1actions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        droplet_actions_get:
          operation:
            $ref: '#/paths/~1v2~1droplets~1{droplet_id}~1actions~1{action_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.action
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/droplet_actions/methods/droplet_actions_get
          - $ref: >-
              #/components/x-stackQL-resources/droplet_actions/methods/droplet_actions_list
        insert: []
        update: []
        delete: []
        replace: []
    droplet_kernels:
      id: digitalocean.compute.droplet_kernels
      name: droplet_kernels
      title: Droplet Kernels
      methods:
        droplets_list_kernels:
          operation:
            $ref: '#/paths/~1v2~1droplets~1{droplet_id}~1kernels/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.kernels
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/droplet_kernels/methods/droplets_list_kernels
        insert: []
        update: []
        delete: []
        replace: []
    droplets_firewalls:
      id: digitalocean.compute.droplets_firewalls
      name: droplets_firewalls
      title: Droplets Firewalls
      methods:
        droplets_list_firewalls:
          operation:
            $ref: '#/paths/~1v2~1droplets~1{droplet_id}~1firewalls/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.firewalls
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/droplets_firewalls/methods/droplets_list_firewalls
        insert: []
        update: []
        delete: []
        replace: []
    droplets_neighbors:
      id: digitalocean.compute.droplets_neighbors
      name: droplets_neighbors
      title: Droplets Neighbors
      methods:
        droplets_list_neighbors:
          operation:
            $ref: '#/paths/~1v2~1droplets~1{droplet_id}~1neighbors/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.droplets
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/droplets_neighbors/methods/droplets_list_neighbors
        insert: []
        update: []
        delete: []
        replace: []
    droplets_associated_resources:
      id: digitalocean.compute.droplets_associated_resources
      name: droplets_associated_resources
      title: Droplets Associated Resources
      methods:
        droplets_list_associated_resources:
          operation:
            $ref: >-
              #/paths/~1v2~1droplets~1{droplet_id}~1destroy_with_associated_resources/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        droplets_destroy_with_associated_resources_selective:
          operation:
            $ref: >-
              #/paths/~1v2~1droplets~1{droplet_id}~1destroy_with_associated_resources~1selective/delete
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        droplets_destroy_with_associated_resources_dangerous:
          operation:
            $ref: >-
              #/paths/~1v2~1droplets~1{droplet_id}~1destroy_with_associated_resources~1dangerous/delete
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        droplets_get_destroy_associated_resources_status:
          operation:
            $ref: >-
              #/paths/~1v2~1droplets~1{droplet_id}~1destroy_with_associated_resources~1status/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        droplets_destroy_retry_with_associated_resources:
          operation:
            $ref: >-
              #/paths/~1v2~1droplets~1{droplet_id}~1destroy_with_associated_resources~1retry/post
          response:
            mediaType: application/json
            openAPIDocKey: '202'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/droplets_associated_resources/methods/droplets_list_associated_resources
        insert: []
        update: []
        delete: []
        replace: []
    droplet_autoscale_pools:
      id: digitalocean.compute.droplet_autoscale_pools
      name: droplet_autoscale_pools
      title: Droplet Autoscale Pools
      methods:
        autoscalepools_list:
          operation:
            $ref: '#/paths/~1v2~1droplets~1autoscale/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.autoscale_pools
        autoscalepools_create:
          operation:
            $ref: '#/paths/~1v2~1droplets~1autoscale/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        autoscalepools_get:
          operation:
            $ref: '#/paths/~1v2~1droplets~1autoscale~1{autoscale_pool_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.autoscale_pool
        autoscalepools_update:
          operation:
            $ref: '#/paths/~1v2~1droplets~1autoscale~1{autoscale_pool_id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        autoscalepools_delete:
          operation:
            $ref: '#/paths/~1v2~1droplets~1autoscale~1{autoscale_pool_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        autoscalepools_delete_dangerous:
          operation:
            $ref: >-
              #/paths/~1v2~1droplets~1autoscale~1{autoscale_pool_id}~1dangerous/delete
          response:
            mediaType: application/json
            openAPIDocKey: '202'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/droplet_autoscale_pools/methods/autoscalepools_get
          - $ref: >-
              #/components/x-stackQL-resources/droplet_autoscale_pools/methods/autoscalepools_list
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/droplet_autoscale_pools/methods/autoscalepools_create
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/droplet_autoscale_pools/methods/autoscalepools_delete
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/droplet_autoscale_pools/methods/autoscalepools_update
    droplet_autoscale_pool_members:
      id: digitalocean.compute.droplet_autoscale_pool_members
      name: droplet_autoscale_pool_members
      title: Droplet Autoscale Pool Members
      methods:
        autoscalepools_list_members:
          operation:
            $ref: >-
              #/paths/~1v2~1droplets~1autoscale~1{autoscale_pool_id}~1members/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.droplets
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/droplet_autoscale_pool_members/methods/autoscalepools_list_members
        insert: []
        update: []
        delete: []
        replace: []
    droplet_autoscale_pool_history:
      id: digitalocean.compute.droplet_autoscale_pool_history
      name: droplet_autoscale_pool_history
      title: Droplet Autoscale Pool History
      methods:
        autoscalepools_list_history:
          operation:
            $ref: >-
              #/paths/~1v2~1droplets~1autoscale~1{autoscale_pool_id}~1history/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.history
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/droplet_autoscale_pool_history/methods/autoscalepools_list_history
        insert: []
        update: []
        delete: []
        replace: []
    firewalls:
      id: digitalocean.compute.firewalls
      name: firewalls
      title: Firewalls
      methods:
        firewalls_list:
          operation:
            $ref: '#/paths/~1v2~1firewalls/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.firewalls
        firewalls_create:
          operation:
            $ref: '#/paths/~1v2~1firewalls/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        firewalls_get:
          operation:
            $ref: '#/paths/~1v2~1firewalls~1{firewall_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.firewall
        firewalls_update:
          operation:
            $ref: '#/paths/~1v2~1firewalls~1{firewall_id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        firewalls_delete:
          operation:
            $ref: '#/paths/~1v2~1firewalls~1{firewall_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        firewalls_assign_droplets:
          operation:
            $ref: '#/paths/~1v2~1firewalls~1{firewall_id}~1droplets/post'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        firewalls_delete_droplets:
          operation:
            $ref: '#/paths/~1v2~1firewalls~1{firewall_id}~1droplets/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/firewalls/methods/firewalls_get'
          - $ref: '#/components/x-stackQL-resources/firewalls/methods/firewalls_list'
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/firewalls/methods/firewalls_create
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/firewalls/methods/firewalls_delete
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/firewalls/methods/firewalls_update
    firewall_tags:
      id: digitalocean.compute.firewall_tags
      name: firewall_tags
      title: Firewall Tags
      methods:
        firewalls_add_tags:
          operation:
            $ref: '#/paths/~1v2~1firewalls~1{firewall_id}~1tags/post'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        firewalls_delete_tags:
          operation:
            $ref: '#/paths/~1v2~1firewalls~1{firewall_id}~1tags/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select: []
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/firewall_tags/methods/firewalls_add_tags
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/firewall_tags/methods/firewalls_delete_tags
        replace: []
    firewall_rules:
      id: digitalocean.compute.firewall_rules
      name: firewall_rules
      title: Firewall Rules
      methods:
        firewalls_add_rules:
          operation:
            $ref: '#/paths/~1v2~1firewalls~1{firewall_id}~1rules/post'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        firewalls_delete_rules:
          operation:
            $ref: '#/paths/~1v2~1firewalls~1{firewall_id}~1rules/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select: []
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/firewall_rules/methods/firewalls_add_rules
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/firewall_rules/methods/firewalls_delete_rules
        replace: []
    images:
      id: digitalocean.compute.images
      name: images
      title: Images
      methods:
        images_list:
          operation:
            $ref: '#/paths/~1v2~1images/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.images
        images_create_custom:
          operation:
            $ref: '#/paths/~1v2~1images/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        images_get:
          operation:
            $ref: '#/paths/~1v2~1images~1{image_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.image
        images_update:
          operation:
            $ref: '#/paths/~1v2~1images~1{image_id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        images_delete:
          operation:
            $ref: '#/paths/~1v2~1images~1{image_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/images/methods/images_get'
          - $ref: '#/components/x-stackQL-resources/images/methods/images_list'
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/images/methods/images_create_custom
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/images/methods/images_delete'
        replace:
          - $ref: '#/components/x-stackQL-resources/images/methods/images_update'
    image_actions:
      id: digitalocean.compute.image_actions
      name: image_actions
      title: Image Actions
      methods:
        image_actions_list:
          operation:
            $ref: '#/paths/~1v2~1images~1{image_id}~1actions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.actions
        image_actions_post:
          operation:
            $ref: '#/paths/~1v2~1images~1{image_id}~1actions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        image_actions_get:
          operation:
            $ref: '#/paths/~1v2~1images~1{image_id}~1actions~1{action_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/image_actions/methods/image_actions_get
          - $ref: >-
              #/components/x-stackQL-resources/image_actions/methods/image_actions_list
        insert: []
        update: []
        delete: []
        replace: []
    load_balancers:
      id: digitalocean.compute.load_balancers
      name: load_balancers
      title: Load Balancers
      methods:
        load_balancers_create:
          operation:
            $ref: '#/paths/~1v2~1load_balancers/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        load_balancers_list:
          operation:
            $ref: '#/paths/~1v2~1load_balancers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.load_balancers
        load_balancers_get:
          operation:
            $ref: '#/paths/~1v2~1load_balancers~1{lb_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.load_balancer
        load_balancers_update:
          operation:
            $ref: '#/paths/~1v2~1load_balancers~1{lb_id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        load_balancers_delete:
          operation:
            $ref: '#/paths/~1v2~1load_balancers~1{lb_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        load_balancers_delete_cache:
          operation:
            $ref: '#/paths/~1v2~1load_balancers~1{lb_id}~1cache/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        load_balancers_add_droplets:
          operation:
            $ref: '#/paths/~1v2~1load_balancers~1{lb_id}~1droplets/post'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        load_balancers_remove_droplets:
          operation:
            $ref: '#/paths/~1v2~1load_balancers~1{lb_id}~1droplets/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        load_balancers_add_forwarding_rules:
          operation:
            $ref: '#/paths/~1v2~1load_balancers~1{lb_id}~1forwarding_rules/post'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        load_balancers_remove_forwarding_rules:
          operation:
            $ref: '#/paths/~1v2~1load_balancers~1{lb_id}~1forwarding_rules/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/load_balancers/methods/load_balancers_get
          - $ref: >-
              #/components/x-stackQL-resources/load_balancers/methods/load_balancers_list
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/load_balancers/methods/load_balancers_create
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/load_balancers/methods/load_balancers_delete
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/load_balancers/methods/load_balancers_update
    regions:
      id: digitalocean.compute.regions
      name: regions
      title: Regions
      methods:
        regions_list:
          operation:
            $ref: '#/paths/~1v2~1regions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.regions
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/regions/methods/regions_list'
        insert: []
        update: []
        delete: []
        replace: []
    droplet_neighbor_ids:
      id: digitalocean.compute.droplet_neighbor_ids
      name: droplet_neighbor_ids
      title: Droplet Neighbor Ids
      methods:
        droplets_list_neighbors_ids:
          operation:
            $ref: '#/paths/~1v2~1reports~1droplet_neighbors_ids/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.neighbor_ids
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/droplet_neighbor_ids/methods/droplets_list_neighbors_ids
        insert: []
        update: []
        delete: []
        replace: []
    reserved_ips:
      id: digitalocean.compute.reserved_ips
      name: reserved_ips
      title: Reserved Ips
      methods:
        reserved_ips_list:
          operation:
            $ref: '#/paths/~1v2~1reserved_ips/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.reserved_ips
        reserved_ips_create:
          operation:
            $ref: '#/paths/~1v2~1reserved_ips/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        reserved_ips_get:
          operation:
            $ref: '#/paths/~1v2~1reserved_ips~1{reserved_ip}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.reserved_ip
        reserved_ips_delete:
          operation:
            $ref: '#/paths/~1v2~1reserved_ips~1{reserved_ip}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/reserved_ips/methods/reserved_ips_get
          - $ref: >-
              #/components/x-stackQL-resources/reserved_ips/methods/reserved_ips_list
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/reserved_ips/methods/reserved_ips_create
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/reserved_ips/methods/reserved_ips_delete
        replace: []
    reserved_ip_actions:
      id: digitalocean.compute.reserved_ip_actions
      name: reserved_ip_actions
      title: Reserved Ip Actions
      methods:
        reserved_ips_actions_list:
          operation:
            $ref: '#/paths/~1v2~1reserved_ips~1{reserved_ip}~1actions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.actions
        reserved_ips_actions_post:
          operation:
            $ref: '#/paths/~1v2~1reserved_ips~1{reserved_ip}~1actions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        reserved_ips_actions_get:
          operation:
            $ref: >-
              #/paths/~1v2~1reserved_ips~1{reserved_ip}~1actions~1{action_id}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/reserved_ip_actions/methods/reserved_ips_actions_get
          - $ref: >-
              #/components/x-stackQL-resources/reserved_ip_actions/methods/reserved_ips_actions_list
        insert: []
        update: []
        delete: []
        replace: []
    reserved_ipv6:
      id: digitalocean.compute.reserved_ipv6
      name: reserved_ipv6
      title: Reserved Ipv6
      methods:
        reserved_ipv6_list:
          operation:
            $ref: '#/paths/~1v2~1reserved_ipv6/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        reserved_ipv6_create:
          operation:
            $ref: '#/paths/~1v2~1reserved_ipv6/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        reserved_ipv6_get:
          operation:
            $ref: '#/paths/~1v2~1reserved_ipv6~1{reserved_ipv6}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.reserved_ipv6
        reserved_ipv6_delete:
          operation:
            $ref: '#/paths/~1v2~1reserved_ipv6~1{reserved_ipv6}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        reserved_ipv6_actions_post:
          operation:
            $ref: '#/paths/~1v2~1reserved_ipv6~1{reserved_ipv6}~1actions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/reserved_ipv6/methods/reserved_ipv6_get
          - $ref: >-
              #/components/x-stackQL-resources/reserved_ipv6/methods/reserved_ipv6_list
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/reserved_ipv6/methods/reserved_ipv6_create
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/reserved_ipv6/methods/reserved_ipv6_delete
        replace: []
    sizes:
      id: digitalocean.compute.sizes
      name: sizes
      title: Sizes
      methods:
        sizes_list:
          operation:
            $ref: '#/paths/~1v2~1sizes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.sizes
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/sizes/methods/sizes_list'
        insert: []
        update: []
        delete: []
        replace: []
    snapshots:
      id: digitalocean.compute.snapshots
      name: snapshots
      title: Snapshots
      methods:
        snapshots_list:
          operation:
            $ref: '#/paths/~1v2~1snapshots/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.snapshots
        snapshots_get:
          operation:
            $ref: '#/paths/~1v2~1snapshots~1{snapshot_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.snapshot
        snapshots_delete:
          operation:
            $ref: '#/paths/~1v2~1snapshots~1{snapshot_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/snapshots/methods/snapshots_get'
          - $ref: '#/components/x-stackQL-resources/snapshots/methods/snapshots_list'
        insert: []
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/snapshots/methods/snapshots_delete
        replace: []
    tags:
      id: digitalocean.compute.tags
      name: tags
      title: Tags
      methods:
        tags_list:
          operation:
            $ref: '#/paths/~1v2~1tags/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.tags
        tags_create:
          operation:
            $ref: '#/paths/~1v2~1tags/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        tags_get:
          operation:
            $ref: '#/paths/~1v2~1tags~1{tag_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.tag
        tags_delete:
          operation:
            $ref: '#/paths/~1v2~1tags~1{tag_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        tags_assign_resources:
          operation:
            $ref: '#/paths/~1v2~1tags~1{tag_id}~1resources/post'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        tags_unassign_resources:
          operation:
            $ref: '#/paths/~1v2~1tags~1{tag_id}~1resources/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tags/methods/tags_get'
          - $ref: '#/components/x-stackQL-resources/tags/methods/tags_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/tags/methods/tags_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/tags/methods/tags_delete'
        replace: []
    volumes:
      id: digitalocean.compute.volumes
      name: volumes
      title: Volumes
      methods:
        volumes_list:
          operation:
            $ref: '#/paths/~1v2~1volumes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.volumes
        volumes_create:
          operation:
            $ref: '#/paths/~1v2~1volumes/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        volumes_delete_by_name:
          operation:
            $ref: '#/paths/~1v2~1volumes/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        volume_actions_post:
          operation:
            $ref: '#/paths/~1v2~1volumes~1actions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        volumes_get:
          operation:
            $ref: '#/paths/~1v2~1volumes~1{volume_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.volume
        volumes_delete:
          operation:
            $ref: '#/paths/~1v2~1volumes~1{volume_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/volumes/methods/volumes_get'
          - $ref: '#/components/x-stackQL-resources/volumes/methods/volumes_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/volumes/methods/volumes_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/volumes/methods/volumes_delete'
          - $ref: >-
              #/components/x-stackQL-resources/volumes/methods/volumes_delete_by_name
        replace: []
    volume_snapshots:
      id: digitalocean.compute.volume_snapshots
      name: volume_snapshots
      title: Volume Snapshots
      methods:
        volume_snapshots_get_by_id:
          operation:
            $ref: '#/paths/~1v2~1volumes~1snapshots~1{snapshot_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.snapshot
        volume_snapshots_delete_by_id:
          operation:
            $ref: '#/paths/~1v2~1volumes~1snapshots~1{snapshot_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        volume_snapshots_list:
          operation:
            $ref: '#/paths/~1v2~1volumes~1{volume_id}~1snapshots/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.snapshots
        volume_snapshots_create:
          operation:
            $ref: '#/paths/~1v2~1volumes~1{volume_id}~1snapshots/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/volume_snapshots/methods/volume_snapshots_get_by_id
          - $ref: >-
              #/components/x-stackQL-resources/volume_snapshots/methods/volume_snapshots_list
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/volume_snapshots/methods/volume_snapshots_create
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/volume_snapshots/methods/volume_snapshots_delete_by_id
        replace: []
    volume_actions:
      id: digitalocean.compute.volume_actions
      name: volume_actions
      title: Volume Actions
      methods:
        volume_actions_list:
          operation:
            $ref: '#/paths/~1v2~1volumes~1{volume_id}~1actions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.actions
        volume_actions_post_by_id:
          operation:
            $ref: '#/paths/~1v2~1volumes~1{volume_id}~1actions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        volume_actions_get:
          operation:
            $ref: '#/paths/~1v2~1volumes~1{volume_id}~1actions~1{action_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.action
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/volume_actions/methods/volume_actions_get
          - $ref: >-
              #/components/x-stackQL-resources/volume_actions/methods/volume_actions_list
        insert: []
        update: []
        delete: []
        replace: []
    vpc_nat_gateways:
      id: digitalocean.compute.vpc_nat_gateways
      name: vpc_nat_gateways
      title: Vpc Nat Gateways
      methods:
        vpcnatgateways_list:
          operation:
            $ref: '#/paths/~1v2~1vpc_nat_gateways/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.vpc_nat_gateways
        vpcnatgateways_create:
          operation:
            $ref: '#/paths/~1v2~1vpc_nat_gateways/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        vpcnatgateways_get:
          operation:
            $ref: '#/paths/~1v2~1vpc_nat_gateways~1{id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.vpc_nat_gateway
        vpcnatgateways_update:
          operation:
            $ref: '#/paths/~1v2~1vpc_nat_gateways~1{id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        vpcnatgateways_delete:
          operation:
            $ref: '#/paths/~1v2~1vpc_nat_gateways~1{id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/vpc_nat_gateways/methods/vpcnatgateways_get
          - $ref: >-
              #/components/x-stackQL-resources/vpc_nat_gateways/methods/vpcnatgateways_list
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/vpc_nat_gateways/methods/vpcnatgateways_create
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/vpc_nat_gateways/methods/vpcnatgateways_delete
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/vpc_nat_gateways/methods/vpcnatgateways_update
servers:
  - url: https://api.digitalocean.com
