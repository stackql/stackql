paths:
  /api/v1/:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: get available resources
      operationId: getCoreV1APIResources
  /api/v1/componentstatuses:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ComponentStatusList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ComponentStatusList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ComponentStatusList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ComponentStatusList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ComponentStatusList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list objects of kind ComponentStatus
      operationId: listCoreV1ComponentStatus
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ComponentStatus
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/componentstatuses/{name}:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ComponentStatus'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ComponentStatus'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ComponentStatus'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read the specified ComponentStatus
      operationId: readCoreV1ComponentStatus
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ComponentStatus
        version: v1
      parameters:
        - description: name of the ComponentStatus
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
  /api/v1/configmaps:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMapList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMapList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMapList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMapList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMapList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind ConfigMap
      operationId: listCoreV1ConfigMapForAllNamespaces
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/endpoints:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EndpointsList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EndpointsList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EndpointsList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EndpointsList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EndpointsList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind Endpoints
      operationId: listCoreV1EndpointsForAllNamespaces
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/events:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EventList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EventList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EventList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EventList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EventList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind Event
      operationId: listCoreV1EventForAllNamespaces
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/limitranges:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRangeList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRangeList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRangeList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRangeList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRangeList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind LimitRange
      operationId: listCoreV1LimitRangeForAllNamespaces
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/namespaces:
    get:
      servers: []
      parameters: &ref_0
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind Namespace
      operationId: listCoreV1Namespace
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
    post:
      servers: []
      parameters: *ref_0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create a Namespace
      operationId: createCoreV1Namespace
      requestBody:
        $ref: '#/components/requestBodies/io.k8s.api.core.v1.Namespace'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
  /api/v1/namespaces/{namespace}/bindings:
    post:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create a Binding
      operationId: createCoreV1NamespacedBinding
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
        required: true
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Binding
        version: v1
      parameters:
        - description: 'When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed'
          in: query
          name: dryRun
          schema:
            type: string
            uniqueItems: true
        - description: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          in: query
          name: fieldManager
          schema:
            type: string
            uniqueItems: true
        - description: 'fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.'
          in: query
          name: fieldValidation
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
  /api/v1/namespaces/{namespace}/configmaps:
    delete:
      servers: []
      parameters: &ref_1
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete collection of ConfigMap
      operationId: deleteCoreV1CollectionNamespacedConfigMap
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
    get:
      servers: []
      parameters: *ref_1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMapList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMapList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMapList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMapList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMapList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind ConfigMap
      operationId: listCoreV1NamespacedConfigMap
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
    post:
      servers: []
      parameters: *ref_1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create a ConfigMap
      operationId: createCoreV1NamespacedConfigMap
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
        required: true
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
  /api/v1/namespaces/{namespace}/configmaps/{name}:
    delete:
      servers: []
      parameters: &ref_2
        - description: name of the ConfigMap
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete a ConfigMap
      operationId: deleteCoreV1NamespacedConfigMap
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read the specified ConfigMap
      operationId: readCoreV1NamespacedConfigMap
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
      parameters: *ref_2
    patch:
      servers: []
      parameters: *ref_2
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update the specified ConfigMap
      operationId: patchCoreV1NamespacedConfigMap
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
    put:
      servers: []
      parameters: *ref_2
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace the specified ConfigMap
      operationId: replaceCoreV1NamespacedConfigMap
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
  /api/v1/namespaces/{namespace}/endpoints:
    delete:
      servers: []
      parameters: &ref_3
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete collection of Endpoints
      operationId: deleteCoreV1CollectionNamespacedEndpoints
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
    get:
      servers: []
      parameters: *ref_3
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EndpointsList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EndpointsList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EndpointsList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EndpointsList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EndpointsList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind Endpoints
      operationId: listCoreV1NamespacedEndpoints
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
    post:
      servers: []
      parameters: *ref_3
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create Endpoints
      operationId: createCoreV1NamespacedEndpoints
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
        required: true
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
  /api/v1/namespaces/{namespace}/endpoints/{name}:
    delete:
      servers: []
      parameters: &ref_4
        - description: name of the Endpoints
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete Endpoints
      operationId: deleteCoreV1NamespacedEndpoints
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read the specified Endpoints
      operationId: readCoreV1NamespacedEndpoints
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
      parameters: *ref_4
    patch:
      servers: []
      parameters: *ref_4
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update the specified Endpoints
      operationId: patchCoreV1NamespacedEndpoints
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
    put:
      servers: []
      parameters: *ref_4
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace the specified Endpoints
      operationId: replaceCoreV1NamespacedEndpoints
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
  /api/v1/namespaces/{namespace}/events:
    delete:
      servers: []
      parameters: &ref_5
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete collection of Event
      operationId: deleteCoreV1CollectionNamespacedEvent
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
    get:
      servers: []
      parameters: *ref_5
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EventList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EventList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EventList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EventList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.EventList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind Event
      operationId: listCoreV1NamespacedEvent
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
    post:
      servers: []
      parameters: *ref_5
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create an Event
      operationId: createCoreV1NamespacedEvent
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
        required: true
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
  /api/v1/namespaces/{namespace}/events/{name}:
    delete:
      servers: []
      parameters: &ref_6
        - description: name of the Event
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete an Event
      operationId: deleteCoreV1NamespacedEvent
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read the specified Event
      operationId: readCoreV1NamespacedEvent
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
      parameters: *ref_6
    patch:
      servers: []
      parameters: *ref_6
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update the specified Event
      operationId: patchCoreV1NamespacedEvent
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
    put:
      servers: []
      parameters: *ref_6
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace the specified Event
      operationId: replaceCoreV1NamespacedEvent
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
  /api/v1/namespaces/{namespace}/limitranges:
    delete:
      servers: []
      parameters: &ref_7
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete collection of LimitRange
      operationId: deleteCoreV1CollectionNamespacedLimitRange
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
    get:
      servers: []
      parameters: *ref_7
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRangeList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRangeList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRangeList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRangeList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRangeList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind LimitRange
      operationId: listCoreV1NamespacedLimitRange
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
    post:
      servers: []
      parameters: *ref_7
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create a LimitRange
      operationId: createCoreV1NamespacedLimitRange
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
        required: true
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
  /api/v1/namespaces/{namespace}/limitranges/{name}:
    delete:
      servers: []
      parameters: &ref_8
        - description: name of the LimitRange
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete a LimitRange
      operationId: deleteCoreV1NamespacedLimitRange
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read the specified LimitRange
      operationId: readCoreV1NamespacedLimitRange
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
      parameters: *ref_8
    patch:
      servers: []
      parameters: *ref_8
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update the specified LimitRange
      operationId: patchCoreV1NamespacedLimitRange
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
    put:
      servers: []
      parameters: *ref_8
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace the specified LimitRange
      operationId: replaceCoreV1NamespacedLimitRange
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
  /api/v1/namespaces/{namespace}/persistentvolumeclaims:
    delete:
      servers: []
      parameters: &ref_9
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete collection of PersistentVolumeClaim
      operationId: deleteCoreV1CollectionNamespacedPersistentVolumeClaim
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
    get:
      servers: []
      parameters: *ref_9
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind PersistentVolumeClaim
      operationId: listCoreV1NamespacedPersistentVolumeClaim
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
    post:
      servers: []
      parameters: *ref_9
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create a PersistentVolumeClaim
      operationId: createCoreV1NamespacedPersistentVolumeClaim
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
        required: true
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
  /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}:
    delete:
      servers: []
      parameters: &ref_10
        - description: name of the PersistentVolumeClaim
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
          description: OK
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete a PersistentVolumeClaim
      operationId: deleteCoreV1NamespacedPersistentVolumeClaim
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read the specified PersistentVolumeClaim
      operationId: readCoreV1NamespacedPersistentVolumeClaim
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      parameters: *ref_10
    patch:
      servers: []
      parameters: *ref_10
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update the specified PersistentVolumeClaim
      operationId: patchCoreV1NamespacedPersistentVolumeClaim
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
    put:
      servers: []
      parameters: *ref_10
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace the specified PersistentVolumeClaim
      operationId: replaceCoreV1NamespacedPersistentVolumeClaim
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
  /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read status of the specified PersistentVolumeClaim
      operationId: readCoreV1NamespacedPersistentVolumeClaimStatus
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      parameters: &ref_11
        - description: name of the PersistentVolumeClaim
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
    patch:
      servers: []
      parameters: *ref_11
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update status of the specified PersistentVolumeClaim
      operationId: patchCoreV1NamespacedPersistentVolumeClaimStatus
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
    put:
      servers: []
      parameters: *ref_11
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace status of the specified PersistentVolumeClaim
      operationId: replaceCoreV1NamespacedPersistentVolumeClaimStatus
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
  /api/v1/namespaces/{namespace}/pods:
    delete:
      servers: []
      parameters: &ref_12
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete collection of Pod
      operationId: deleteCoreV1CollectionNamespacedPod
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
    get:
      servers: []
      parameters: *ref_12
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind Pod
      operationId: listCoreV1NamespacedPod
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
    post:
      servers: []
      parameters: *ref_12
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create a Pod
      operationId: createCoreV1NamespacedPod
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Pod'
        required: true
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
  /api/v1/namespaces/{namespace}/pods/{name}:
    delete:
      servers: []
      parameters: &ref_13
        - description: name of the Pod
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: OK
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete a Pod
      operationId: deleteCoreV1NamespacedPod
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read the specified Pod
      operationId: readCoreV1NamespacedPod
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      parameters: *ref_13
    patch:
      servers: []
      parameters: *ref_13
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update the specified Pod
      operationId: patchCoreV1NamespacedPod
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
    put:
      servers: []
      parameters: *ref_13
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace the specified Pod
      operationId: replaceCoreV1NamespacedPod
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Pod'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
  /api/v1/namespaces/{namespace}/pods/{name}/attach:
    get:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect GET requests to attach of Pod
      operationId: connectCoreV1GetNamespacedPodAttach
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodAttachOptions
        version: v1
      parameters: &ref_14
        - description: The container in which to execute the command. Defaults to only container if there is only one container in the pod.
          in: query
          name: container
          schema:
            type: string
            uniqueItems: true
        - description: name of the PodAttachOptions
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
          in: query
          name: stderr
          schema:
            type: boolean
            uniqueItems: true
        - description: Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
          in: query
          name: stdin
          schema:
            type: boolean
            uniqueItems: true
        - description: Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
          in: query
          name: stdout
          schema:
            type: boolean
            uniqueItems: true
        - description: TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
          in: query
          name: tty
          schema:
            type: boolean
            uniqueItems: true
    post:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect POST requests to attach of Pod
      operationId: connectCoreV1PostNamespacedPodAttach
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodAttachOptions
        version: v1
      parameters: *ref_14
  /api/v1/namespaces/{namespace}/pods/{name}/binding:
    post:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create binding of a Pod
      operationId: createCoreV1NamespacedPodBinding
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.Binding'
        required: true
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Binding
        version: v1
      parameters:
        - description: 'When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed'
          in: query
          name: dryRun
          schema:
            type: string
            uniqueItems: true
        - description: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          in: query
          name: fieldManager
          schema:
            type: string
            uniqueItems: true
        - description: 'fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.'
          in: query
          name: fieldValidation
          schema:
            type: string
            uniqueItems: true
        - description: name of the Binding
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
  /api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read ephemeralcontainers of the specified Pod
      operationId: readCoreV1NamespacedPodEphemeralcontainers
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      parameters: &ref_15
        - description: name of the Pod
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
    patch:
      servers: []
      parameters: *ref_15
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update ephemeralcontainers of the specified Pod
      operationId: patchCoreV1NamespacedPodEphemeralcontainers
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
    put:
      servers: []
      parameters: *ref_15
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace ephemeralcontainers of the specified Pod
      operationId: replaceCoreV1NamespacedPodEphemeralcontainers
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Pod'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
  /api/v1/namespaces/{namespace}/pods/{name}/eviction:
    post:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.policy.v1.Eviction'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.policy.v1.Eviction'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.policy.v1.Eviction'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.policy.v1.Eviction'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.policy.v1.Eviction'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.policy.v1.Eviction'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.policy.v1.Eviction'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.policy.v1.Eviction'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.policy.v1.Eviction'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create eviction of a Pod
      operationId: createCoreV1NamespacedPodEviction
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.policy.v1.Eviction'
        required: true
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: policy
        kind: Eviction
        version: v1
      parameters:
        - description: 'When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed'
          in: query
          name: dryRun
          schema:
            type: string
            uniqueItems: true
        - description: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          in: query
          name: fieldManager
          schema:
            type: string
            uniqueItems: true
        - description: 'fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.'
          in: query
          name: fieldValidation
          schema:
            type: string
            uniqueItems: true
        - description: name of the Eviction
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
  /api/v1/namespaces/{namespace}/pods/{name}/exec:
    get:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect GET requests to exec of Pod
      operationId: connectCoreV1GetNamespacedPodExec
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodExecOptions
        version: v1
      parameters: &ref_16
        - description: Command is the remote command to execute. argv array. Not executed within a shell.
          in: query
          name: command
          schema:
            type: string
            uniqueItems: true
        - description: Container in which to execute the command. Defaults to only container if there is only one container in the pod.
          in: query
          name: container
          schema:
            type: string
            uniqueItems: true
        - description: name of the PodExecOptions
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: Redirect the standard error stream of the pod for this call.
          in: query
          name: stderr
          schema:
            type: boolean
            uniqueItems: true
        - description: Redirect the standard input stream of the pod for this call. Defaults to false.
          in: query
          name: stdin
          schema:
            type: boolean
            uniqueItems: true
        - description: Redirect the standard output stream of the pod for this call.
          in: query
          name: stdout
          schema:
            type: boolean
            uniqueItems: true
        - description: TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
          in: query
          name: tty
          schema:
            type: boolean
            uniqueItems: true
    post:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect POST requests to exec of Pod
      operationId: connectCoreV1PostNamespacedPodExec
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodExecOptions
        version: v1
      parameters: *ref_16
  /api/v1/namespaces/{namespace}/pods/{name}/log:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
            application/vnd.kubernetes.protobuf:
              schema:
                type: string
            application/yaml:
              schema:
                type: string
            text/plain:
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read log of the specified Pod
      operationId: readCoreV1NamespacedPodLog
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      parameters:
        - description: The container for which to stream logs. Defaults to only container if there is one container in the pod.
          in: query
          name: container
          schema:
            type: string
            uniqueItems: true
        - description: Follow the log stream of the pod. Defaults to false.
          in: query
          name: follow
          schema:
            type: boolean
            uniqueItems: true
        - description: insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver's TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet).
          in: query
          name: insecureSkipTLSVerifyBackend
          schema:
            type: boolean
            uniqueItems: true
        - description: If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.
          in: query
          name: limitBytes
          schema:
            type: integer
            uniqueItems: true
        - description: name of the Pod
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: Return previous terminated container logs. Defaults to false.
          in: query
          name: previous
          schema:
            type: boolean
            uniqueItems: true
        - description: A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
          in: query
          name: sinceSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime
          in: query
          name: tailLines
          schema:
            type: integer
            uniqueItems: true
        - description: If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.
          in: query
          name: timestamps
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/namespaces/{namespace}/pods/{name}/portforward:
    get:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect GET requests to portforward of Pod
      operationId: connectCoreV1GetNamespacedPodPortforward
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodPortForwardOptions
        version: v1
      parameters: &ref_17
        - description: name of the PodPortForwardOptions
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: List of ports to forward Required when using WebSockets
          in: query
          name: ports
          schema:
            type: integer
            uniqueItems: true
    post:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect POST requests to portforward of Pod
      operationId: connectCoreV1PostNamespacedPodPortforward
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodPortForwardOptions
        version: v1
      parameters: *ref_17
  /api/v1/namespaces/{namespace}/pods/{name}/proxy:
    delete:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect DELETE requests to proxy of Pod
      operationId: connectCoreV1DeleteNamespacedPodProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      parameters: &ref_18
        - description: name of the PodProxyOptions
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: Path is the URL path to use for the current proxy request to pod.
          in: query
          name: path
          schema:
            type: string
            uniqueItems: true
    get:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect GET requests to proxy of Pod
      operationId: connectCoreV1GetNamespacedPodProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      parameters: *ref_18
    head:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect HEAD requests to proxy of Pod
      operationId: connectCoreV1HeadNamespacedPodProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      parameters: *ref_18
    options:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect OPTIONS requests to proxy of Pod
      operationId: connectCoreV1OptionsNamespacedPodProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      parameters: *ref_18
    patch:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect PATCH requests to proxy of Pod
      operationId: connectCoreV1PatchNamespacedPodProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      parameters: *ref_18
    post:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect POST requests to proxy of Pod
      operationId: connectCoreV1PostNamespacedPodProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      parameters: *ref_18
    put:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect PUT requests to proxy of Pod
      operationId: connectCoreV1PutNamespacedPodProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      parameters: *ref_18
  /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}:
    delete:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect DELETE requests to proxy of Pod
      operationId: connectCoreV1DeleteNamespacedPodProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      parameters: &ref_19
        - description: name of the PodProxyOptions
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: path to the resource
          in: path
          name: path
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: Path is the URL path to use for the current proxy request to pod.
          in: query
          name: path
          schema:
            type: string
            uniqueItems: true
    get:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect GET requests to proxy of Pod
      operationId: connectCoreV1GetNamespacedPodProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      parameters: *ref_19
    head:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect HEAD requests to proxy of Pod
      operationId: connectCoreV1HeadNamespacedPodProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      parameters: *ref_19
    options:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect OPTIONS requests to proxy of Pod
      operationId: connectCoreV1OptionsNamespacedPodProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      parameters: *ref_19
    patch:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect PATCH requests to proxy of Pod
      operationId: connectCoreV1PatchNamespacedPodProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      parameters: *ref_19
    post:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect POST requests to proxy of Pod
      operationId: connectCoreV1PostNamespacedPodProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      parameters: *ref_19
    put:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect PUT requests to proxy of Pod
      operationId: connectCoreV1PutNamespacedPodProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      parameters: *ref_19
  /api/v1/namespaces/{namespace}/pods/{name}/status:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read status of the specified Pod
      operationId: readCoreV1NamespacedPodStatus
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      parameters: &ref_20
        - description: name of the Pod
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
    patch:
      servers: []
      parameters: *ref_20
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update status of the specified Pod
      operationId: patchCoreV1NamespacedPodStatus
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
    put:
      servers: []
      parameters: *ref_20
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pod'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/Pod'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Pod'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace status of the specified Pod
      operationId: replaceCoreV1NamespacedPodStatus
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Pod'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
  /api/v1/namespaces/{namespace}/podtemplates:
    delete:
      servers: []
      parameters: &ref_21
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete collection of PodTemplate
      operationId: deleteCoreV1CollectionNamespacedPodTemplate
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
    get:
      servers: []
      parameters: *ref_21
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplateList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplateList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplateList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplateList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplateList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind PodTemplate
      operationId: listCoreV1NamespacedPodTemplate
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
    post:
      servers: []
      parameters: *ref_21
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create a PodTemplate
      operationId: createCoreV1NamespacedPodTemplate
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
        required: true
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
  /api/v1/namespaces/{namespace}/podtemplates/{name}:
    delete:
      servers: []
      parameters: &ref_22
        - description: name of the PodTemplate
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
          description: OK
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete a PodTemplate
      operationId: deleteCoreV1NamespacedPodTemplate
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read the specified PodTemplate
      operationId: readCoreV1NamespacedPodTemplate
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
      parameters: *ref_22
    patch:
      servers: []
      parameters: *ref_22
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update the specified PodTemplate
      operationId: patchCoreV1NamespacedPodTemplate
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
    put:
      servers: []
      parameters: *ref_22
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace the specified PodTemplate
      operationId: replaceCoreV1NamespacedPodTemplate
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
  /api/v1/namespaces/{namespace}/replicationcontrollers:
    delete:
      servers: []
      parameters: &ref_23
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete collection of ReplicationController
      operationId: deleteCoreV1CollectionNamespacedReplicationController
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
    get:
      servers: []
      parameters: *ref_23
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind ReplicationController
      operationId: listCoreV1NamespacedReplicationController
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
    post:
      servers: []
      parameters: *ref_23
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create a ReplicationController
      operationId: createCoreV1NamespacedReplicationController
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
        required: true
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
  /api/v1/namespaces/{namespace}/replicationcontrollers/{name}:
    delete:
      servers: []
      parameters: &ref_24
        - description: name of the ReplicationController
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete a ReplicationController
      operationId: deleteCoreV1NamespacedReplicationController
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read the specified ReplicationController
      operationId: readCoreV1NamespacedReplicationController
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      parameters: *ref_24
    patch:
      servers: []
      parameters: *ref_24
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update the specified ReplicationController
      operationId: patchCoreV1NamespacedReplicationController
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
    put:
      servers: []
      parameters: *ref_24
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace the specified ReplicationController
      operationId: replaceCoreV1NamespacedReplicationController
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
  /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.autoscaling.v1.Scale'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.autoscaling.v1.Scale'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.autoscaling.v1.Scale'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read scale of the specified ReplicationController
      operationId: readCoreV1NamespacedReplicationControllerScale
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: Scale
        version: v1
      parameters: &ref_25
        - description: name of the Scale
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
    patch:
      servers: []
      parameters: *ref_25
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.autoscaling.v1.Scale'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.autoscaling.v1.Scale'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.autoscaling.v1.Scale'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.autoscaling.v1.Scale'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.autoscaling.v1.Scale'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.autoscaling.v1.Scale'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update scale of the specified ReplicationController
      operationId: patchCoreV1NamespacedReplicationControllerScale
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: Scale
        version: v1
    put:
      servers: []
      parameters: *ref_25
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.autoscaling.v1.Scale'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.autoscaling.v1.Scale'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.autoscaling.v1.Scale'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.autoscaling.v1.Scale'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.autoscaling.v1.Scale'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.autoscaling.v1.Scale'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace scale of the specified ReplicationController
      operationId: replaceCoreV1NamespacedReplicationControllerScale
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.autoscaling.v1.Scale'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: Scale
        version: v1
  /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read status of the specified ReplicationController
      operationId: readCoreV1NamespacedReplicationControllerStatus
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      parameters: &ref_26
        - description: name of the ReplicationController
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
    patch:
      servers: []
      parameters: *ref_26
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update status of the specified ReplicationController
      operationId: patchCoreV1NamespacedReplicationControllerStatus
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
    put:
      servers: []
      parameters: *ref_26
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace status of the specified ReplicationController
      operationId: replaceCoreV1NamespacedReplicationControllerStatus
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
  /api/v1/namespaces/{namespace}/resourcequotas:
    delete:
      servers: []
      parameters: &ref_27
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete collection of ResourceQuota
      operationId: deleteCoreV1CollectionNamespacedResourceQuota
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
    get:
      servers: []
      parameters: *ref_27
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind ResourceQuota
      operationId: listCoreV1NamespacedResourceQuota
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
    post:
      servers: []
      parameters: *ref_27
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create a ResourceQuota
      operationId: createCoreV1NamespacedResourceQuota
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
        required: true
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
  /api/v1/namespaces/{namespace}/resourcequotas/{name}:
    delete:
      servers: []
      parameters: &ref_28
        - description: name of the ResourceQuota
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
          description: OK
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete a ResourceQuota
      operationId: deleteCoreV1NamespacedResourceQuota
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read the specified ResourceQuota
      operationId: readCoreV1NamespacedResourceQuota
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      parameters: *ref_28
    patch:
      servers: []
      parameters: *ref_28
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update the specified ResourceQuota
      operationId: patchCoreV1NamespacedResourceQuota
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
    put:
      servers: []
      parameters: *ref_28
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace the specified ResourceQuota
      operationId: replaceCoreV1NamespacedResourceQuota
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
  /api/v1/namespaces/{namespace}/resourcequotas/{name}/status:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read status of the specified ResourceQuota
      operationId: readCoreV1NamespacedResourceQuotaStatus
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      parameters: &ref_29
        - description: name of the ResourceQuota
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
    patch:
      servers: []
      parameters: *ref_29
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update status of the specified ResourceQuota
      operationId: patchCoreV1NamespacedResourceQuotaStatus
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
    put:
      servers: []
      parameters: *ref_29
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace status of the specified ResourceQuota
      operationId: replaceCoreV1NamespacedResourceQuotaStatus
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
  /api/v1/namespaces/{namespace}/secrets:
    delete:
      servers: []
      parameters: &ref_30
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete collection of Secret
      operationId: deleteCoreV1CollectionNamespacedSecret
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
    get:
      servers: []
      parameters: *ref_30
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.SecretList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.SecretList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.SecretList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.SecretList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.SecretList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind Secret
      operationId: listCoreV1NamespacedSecret
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
    post:
      servers: []
      parameters: *ref_30
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create a Secret
      operationId: createCoreV1NamespacedSecret
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
        required: true
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
  /api/v1/namespaces/{namespace}/secrets/{name}:
    delete:
      servers: []
      parameters: &ref_31
        - description: name of the Secret
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete a Secret
      operationId: deleteCoreV1NamespacedSecret
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read the specified Secret
      operationId: readCoreV1NamespacedSecret
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
      parameters: *ref_31
    patch:
      servers: []
      parameters: *ref_31
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update the specified Secret
      operationId: patchCoreV1NamespacedSecret
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
    put:
      servers: []
      parameters: *ref_31
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace the specified Secret
      operationId: replaceCoreV1NamespacedSecret
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
  /api/v1/namespaces/{namespace}/serviceaccounts:
    delete:
      servers: []
      parameters: &ref_32
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete collection of ServiceAccount
      operationId: deleteCoreV1CollectionNamespacedServiceAccount
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
    get:
      servers: []
      parameters: *ref_32
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccountList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccountList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccountList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccountList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccountList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind ServiceAccount
      operationId: listCoreV1NamespacedServiceAccount
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
    post:
      servers: []
      parameters: *ref_32
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create a ServiceAccount
      operationId: createCoreV1NamespacedServiceAccount
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
        required: true
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
  /api/v1/namespaces/{namespace}/serviceaccounts/{name}:
    delete:
      servers: []
      parameters: &ref_33
        - description: name of the ServiceAccount
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
          description: OK
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete a ServiceAccount
      operationId: deleteCoreV1NamespacedServiceAccount
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read the specified ServiceAccount
      operationId: readCoreV1NamespacedServiceAccount
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
      parameters: *ref_33
    patch:
      servers: []
      parameters: *ref_33
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update the specified ServiceAccount
      operationId: patchCoreV1NamespacedServiceAccount
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
    put:
      servers: []
      parameters: *ref_33
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace the specified ServiceAccount
      operationId: replaceCoreV1NamespacedServiceAccount
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
  /api/v1/namespaces/{namespace}/serviceaccounts/{name}/token:
    post:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.authentication.v1.TokenRequest'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.authentication.v1.TokenRequest'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.authentication.v1.TokenRequest'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.authentication.v1.TokenRequest'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.authentication.v1.TokenRequest'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.authentication.v1.TokenRequest'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.authentication.v1.TokenRequest'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.authentication.v1.TokenRequest'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.authentication.v1.TokenRequest'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create token of a ServiceAccount
      operationId: createCoreV1NamespacedServiceAccountToken
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.authentication.v1.TokenRequest'
        required: true
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: authentication.k8s.io
        kind: TokenRequest
        version: v1
      parameters:
        - description: 'When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed'
          in: query
          name: dryRun
          schema:
            type: string
            uniqueItems: true
        - description: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          in: query
          name: fieldManager
          schema:
            type: string
            uniqueItems: true
        - description: 'fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.'
          in: query
          name: fieldValidation
          schema:
            type: string
            uniqueItems: true
        - description: name of the TokenRequest
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
  /api/v1/namespaces/{namespace}/services:
    delete:
      servers: []
      parameters: &ref_34
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete collection of Service
      operationId: deleteCoreV1CollectionNamespacedService
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
    get:
      servers: []
      parameters: *ref_34
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind Service
      operationId: listCoreV1NamespacedService
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
    post:
      servers: []
      parameters: *ref_34
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create a Service
      operationId: createCoreV1NamespacedService
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
        required: true
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
  /api/v1/namespaces/{namespace}/services/{name}:
    delete:
      servers: []
      parameters: &ref_35
        - description: name of the Service
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
          description: OK
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete a Service
      operationId: deleteCoreV1NamespacedService
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read the specified Service
      operationId: readCoreV1NamespacedService
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      parameters: *ref_35
    patch:
      servers: []
      parameters: *ref_35
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update the specified Service
      operationId: patchCoreV1NamespacedService
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
    put:
      servers: []
      parameters: *ref_35
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace the specified Service
      operationId: replaceCoreV1NamespacedService
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
  /api/v1/namespaces/{namespace}/services/{name}/proxy:
    delete:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect DELETE requests to proxy of Service
      operationId: connectCoreV1DeleteNamespacedServiceProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      parameters: &ref_36
        - description: name of the ServiceProxyOptions
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
          in: query
          name: path
          schema:
            type: string
            uniqueItems: true
    get:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect GET requests to proxy of Service
      operationId: connectCoreV1GetNamespacedServiceProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      parameters: *ref_36
    head:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect HEAD requests to proxy of Service
      operationId: connectCoreV1HeadNamespacedServiceProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      parameters: *ref_36
    options:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect OPTIONS requests to proxy of Service
      operationId: connectCoreV1OptionsNamespacedServiceProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      parameters: *ref_36
    patch:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect PATCH requests to proxy of Service
      operationId: connectCoreV1PatchNamespacedServiceProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      parameters: *ref_36
    post:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect POST requests to proxy of Service
      operationId: connectCoreV1PostNamespacedServiceProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      parameters: *ref_36
    put:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect PUT requests to proxy of Service
      operationId: connectCoreV1PutNamespacedServiceProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      parameters: *ref_36
  /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}:
    delete:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect DELETE requests to proxy of Service
      operationId: connectCoreV1DeleteNamespacedServiceProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      parameters: &ref_37
        - description: name of the ServiceProxyOptions
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: path to the resource
          in: path
          name: path
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
          in: query
          name: path
          schema:
            type: string
            uniqueItems: true
    get:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect GET requests to proxy of Service
      operationId: connectCoreV1GetNamespacedServiceProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      parameters: *ref_37
    head:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect HEAD requests to proxy of Service
      operationId: connectCoreV1HeadNamespacedServiceProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      parameters: *ref_37
    options:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect OPTIONS requests to proxy of Service
      operationId: connectCoreV1OptionsNamespacedServiceProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      parameters: *ref_37
    patch:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect PATCH requests to proxy of Service
      operationId: connectCoreV1PatchNamespacedServiceProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      parameters: *ref_37
    post:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect POST requests to proxy of Service
      operationId: connectCoreV1PostNamespacedServiceProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      parameters: *ref_37
    put:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect PUT requests to proxy of Service
      operationId: connectCoreV1PutNamespacedServiceProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      parameters: *ref_37
  /api/v1/namespaces/{namespace}/services/{name}/status:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read status of the specified Service
      operationId: readCoreV1NamespacedServiceStatus
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      parameters: &ref_38
        - description: name of the Service
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
    patch:
      servers: []
      parameters: *ref_38
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update status of the specified Service
      operationId: patchCoreV1NamespacedServiceStatus
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
    put:
      servers: []
      parameters: *ref_38
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace status of the specified Service
      operationId: replaceCoreV1NamespacedServiceStatus
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
  /api/v1/namespaces/{name}:
    delete:
      servers: []
      parameters: &ref_39
        - description: name of the Namespace
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete a Namespace
      operationId: deleteCoreV1Namespace
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read the specified Namespace
      operationId: readCoreV1Namespace
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
      parameters: *ref_39
    patch:
      servers: []
      parameters: *ref_39
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update the specified Namespace
      operationId: patchCoreV1Namespace
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
    put:
      servers: []
      parameters: *ref_39
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace the specified Namespace
      operationId: replaceCoreV1Namespace
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
  /api/v1/namespaces/{name}/finalize:
    put:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace finalize of the specified Namespace
      operationId: replaceCoreV1NamespaceFinalize
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
      parameters:
        - description: 'When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed'
          in: query
          name: dryRun
          schema:
            type: string
            uniqueItems: true
        - description: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          in: query
          name: fieldManager
          schema:
            type: string
            uniqueItems: true
        - description: 'fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.'
          in: query
          name: fieldValidation
          schema:
            type: string
            uniqueItems: true
        - description: name of the Namespace
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
  /api/v1/namespaces/{name}/status:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read status of the specified Namespace
      operationId: readCoreV1NamespaceStatus
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
      parameters: &ref_40
        - description: name of the Namespace
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
    patch:
      servers: []
      parameters: *ref_40
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update status of the specified Namespace
      operationId: patchCoreV1NamespaceStatus
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
    put:
      servers: []
      parameters: *ref_40
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace status of the specified Namespace
      operationId: replaceCoreV1NamespaceStatus
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
  /api/v1/nodes:
    delete:
      servers: []
      parameters: &ref_41
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete collection of Node
      operationId: deleteCoreV1CollectionNode
      requestBody:
        $ref: '#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
    get:
      servers: []
      parameters: *ref_41
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.NodeList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.NodeList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.NodeList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.NodeList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.NodeList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind Node
      operationId: listCoreV1Node
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
    post:
      servers: []
      parameters: *ref_41
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create a Node
      operationId: createCoreV1Node
      requestBody:
        $ref: '#/components/requestBodies/io.k8s.api.core.v1.Node'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
  /api/v1/nodes/{name}:
    delete:
      servers: []
      parameters: &ref_42
        - description: name of the Node
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete a Node
      operationId: deleteCoreV1Node
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read the specified Node
      operationId: readCoreV1Node
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
      parameters: *ref_42
    patch:
      servers: []
      parameters: *ref_42
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update the specified Node
      operationId: patchCoreV1Node
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
    put:
      servers: []
      parameters: *ref_42
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace the specified Node
      operationId: replaceCoreV1Node
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
  /api/v1/nodes/{name}/proxy:
    delete:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect DELETE requests to proxy of Node
      operationId: connectCoreV1DeleteNodeProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      parameters: &ref_43
        - description: name of the NodeProxyOptions
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: Path is the URL path to use for the current proxy request to node.
          in: query
          name: path
          schema:
            type: string
            uniqueItems: true
    get:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect GET requests to proxy of Node
      operationId: connectCoreV1GetNodeProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      parameters: *ref_43
    head:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect HEAD requests to proxy of Node
      operationId: connectCoreV1HeadNodeProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      parameters: *ref_43
    options:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect OPTIONS requests to proxy of Node
      operationId: connectCoreV1OptionsNodeProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      parameters: *ref_43
    patch:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect PATCH requests to proxy of Node
      operationId: connectCoreV1PatchNodeProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      parameters: *ref_43
    post:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect POST requests to proxy of Node
      operationId: connectCoreV1PostNodeProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      parameters: *ref_43
    put:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect PUT requests to proxy of Node
      operationId: connectCoreV1PutNodeProxy
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      parameters: *ref_43
  /api/v1/nodes/{name}/proxy/{path}:
    delete:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect DELETE requests to proxy of Node
      operationId: connectCoreV1DeleteNodeProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      parameters: &ref_44
        - description: name of the NodeProxyOptions
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: path to the resource
          in: path
          name: path
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: Path is the URL path to use for the current proxy request to node.
          in: query
          name: path
          schema:
            type: string
            uniqueItems: true
    get:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect GET requests to proxy of Node
      operationId: connectCoreV1GetNodeProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      parameters: *ref_44
    head:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect HEAD requests to proxy of Node
      operationId: connectCoreV1HeadNodeProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      parameters: *ref_44
    options:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect OPTIONS requests to proxy of Node
      operationId: connectCoreV1OptionsNodeProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      parameters: *ref_44
    patch:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect PATCH requests to proxy of Node
      operationId: connectCoreV1PatchNodeProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      parameters: *ref_44
    post:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect POST requests to proxy of Node
      operationId: connectCoreV1PostNodeProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      parameters: *ref_44
    put:
      servers: []
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: connect PUT requests to proxy of Node
      operationId: connectCoreV1PutNodeProxyWithPath
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      parameters: *ref_44
  /api/v1/nodes/{name}/status:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read status of the specified Node
      operationId: readCoreV1NodeStatus
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
      parameters: &ref_45
        - description: name of the Node
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
    patch:
      servers: []
      parameters: *ref_45
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update status of the specified Node
      operationId: patchCoreV1NodeStatus
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
    put:
      servers: []
      parameters: *ref_45
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace status of the specified Node
      operationId: replaceCoreV1NodeStatus
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
  /api/v1/persistentvolumeclaims:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind PersistentVolumeClaim
      operationId: listCoreV1PersistentVolumeClaimForAllNamespaces
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/persistentvolumes:
    delete:
      servers: []
      parameters: &ref_46
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete collection of PersistentVolume
      operationId: deleteCoreV1CollectionPersistentVolume
      requestBody:
        $ref: '#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
    get:
      servers: []
      parameters: *ref_46
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind PersistentVolume
      operationId: listCoreV1PersistentVolume
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
    post:
      servers: []
      parameters: *ref_46
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
          description: Created
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: create a PersistentVolume
      operationId: createCoreV1PersistentVolume
      requestBody:
        $ref: '#/components/requestBodies/io.k8s.api.core.v1.PersistentVolume'
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
  /api/v1/persistentvolumes/{name}:
    delete:
      servers: []
      parameters: &ref_47
        - description: name of the PersistentVolume
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
          description: OK
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
          description: Accepted
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: delete a PersistentVolume
      operationId: deleteCoreV1PersistentVolume
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read the specified PersistentVolume
      operationId: readCoreV1PersistentVolume
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
      parameters: *ref_47
    patch:
      servers: []
      parameters: *ref_47
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update the specified PersistentVolume
      operationId: patchCoreV1PersistentVolume
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
    put:
      servers: []
      parameters: *ref_47
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace the specified PersistentVolume
      operationId: replaceCoreV1PersistentVolume
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
  /api/v1/persistentvolumes/{name}/status:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: read status of the specified PersistentVolume
      operationId: readCoreV1PersistentVolumeStatus
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
      parameters: &ref_48
        - description: name of the PersistentVolume
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
    patch:
      servers: []
      parameters: *ref_48
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: partially update status of the specified PersistentVolume
      operationId: patchCoreV1PersistentVolumeStatus
      requestBody:
        content:
          application/apply-patch+yaml:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
          application/strategic-merge-patch+json:
            schema:
              $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        required: true
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
    put:
      servers: []
      parameters: *ref_48
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
          description: Created
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: replace status of the specified PersistentVolume
      operationId: replaceCoreV1PersistentVolumeStatus
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
        required: true
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
  /api/v1/pods:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind Pod
      operationId: listCoreV1PodForAllNamespaces
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/podtemplates:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplateList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplateList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplateList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplateList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplateList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind PodTemplate
      operationId: listCoreV1PodTemplateForAllNamespaces
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/replicationcontrollers:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind ReplicationController
      operationId: listCoreV1ReplicationControllerForAllNamespaces
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/resourcequotas:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind ResourceQuota
      operationId: listCoreV1ResourceQuotaForAllNamespaces
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/secrets:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.SecretList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.SecretList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.SecretList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.SecretList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.SecretList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind Secret
      operationId: listCoreV1SecretForAllNamespaces
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/serviceaccounts:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccountList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccountList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccountList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccountList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccountList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind ServiceAccount
      operationId: listCoreV1ServiceAccountForAllNamespaces
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/services:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceList'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceList'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceList'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceList'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: list or watch objects of kind Service
      operationId: listCoreV1ServiceForAllNamespaces
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/configmaps:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of ConfigMap. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1ConfigMapListForAllNamespaces
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/endpoints:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of Endpoints. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1EndpointsListForAllNamespaces
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/events:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of Event. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1EventListForAllNamespaces
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/limitranges:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of LimitRange. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1LimitRangeListForAllNamespaces
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of Namespace. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespaceList
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/configmaps:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of ConfigMap. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedConfigMapList
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/configmaps/{name}:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch changes to an object of kind ConfigMap. deprecated: use the ''watch'' parameter with a list operation instead, filtered to a single item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedConfigMap
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: name of the ConfigMap
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/endpoints:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of Endpoints. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedEndpointsList
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/endpoints/{name}:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch changes to an object of kind Endpoints. deprecated: use the ''watch'' parameter with a list operation instead, filtered to a single item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedEndpoints
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: name of the Endpoints
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/events:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of Event. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedEventList
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/events/{name}:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch changes to an object of kind Event. deprecated: use the ''watch'' parameter with a list operation instead, filtered to a single item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedEvent
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: name of the Event
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/limitranges:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of LimitRange. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedLimitRangeList
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/limitranges/{name}:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch changes to an object of kind LimitRange. deprecated: use the ''watch'' parameter with a list operation instead, filtered to a single item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedLimitRange
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: name of the LimitRange
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/persistentvolumeclaims:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of PersistentVolumeClaim. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedPersistentVolumeClaimList
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch changes to an object of kind PersistentVolumeClaim. deprecated: use the ''watch'' parameter with a list operation instead, filtered to a single item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedPersistentVolumeClaim
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: name of the PersistentVolumeClaim
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/pods:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of Pod. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedPodList
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/pods/{name}:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch changes to an object of kind Pod. deprecated: use the ''watch'' parameter with a list operation instead, filtered to a single item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedPod
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: name of the Pod
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/podtemplates:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of PodTemplate. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedPodTemplateList
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/podtemplates/{name}:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch changes to an object of kind PodTemplate. deprecated: use the ''watch'' parameter with a list operation instead, filtered to a single item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedPodTemplate
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: name of the PodTemplate
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/replicationcontrollers:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of ReplicationController. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedReplicationControllerList
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch changes to an object of kind ReplicationController. deprecated: use the ''watch'' parameter with a list operation instead, filtered to a single item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedReplicationController
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: name of the ReplicationController
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/resourcequotas:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of ResourceQuota. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedResourceQuotaList
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/resourcequotas/{name}:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch changes to an object of kind ResourceQuota. deprecated: use the ''watch'' parameter with a list operation instead, filtered to a single item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedResourceQuota
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: name of the ResourceQuota
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/secrets:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of Secret. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedSecretList
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/secrets/{name}:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch changes to an object of kind Secret. deprecated: use the ''watch'' parameter with a list operation instead, filtered to a single item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedSecret
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: name of the Secret
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/serviceaccounts:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of ServiceAccount. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedServiceAccountList
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch changes to an object of kind ServiceAccount. deprecated: use the ''watch'' parameter with a list operation instead, filtered to a single item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedServiceAccount
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: name of the ServiceAccount
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/services:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of Service. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedServiceList
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{namespace}/services/{name}:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch changes to an object of kind Service. deprecated: use the ''watch'' parameter with a list operation instead, filtered to a single item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedService
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: name of the Service
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: object name and auth scope, such as for teams and projects
          in: path
          name: namespace
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/namespaces/{name}:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch changes to an object of kind Namespace. deprecated: use the ''watch'' parameter with a list operation instead, filtered to a single item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1Namespace
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: name of the Namespace
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/nodes:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of Node. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NodeList
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/nodes/{name}:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch changes to an object of kind Node. deprecated: use the ''watch'' parameter with a list operation instead, filtered to a single item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1Node
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: name of the Node
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/persistentvolumeclaims:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of PersistentVolumeClaim. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1PersistentVolumeClaimListForAllNamespaces
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/persistentvolumes:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of PersistentVolume. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1PersistentVolumeList
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/persistentvolumes/{name}:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch changes to an object of kind PersistentVolume. deprecated: use the ''watch'' parameter with a list operation instead, filtered to a single item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1PersistentVolume
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: name of the PersistentVolume
          in: path
          name: name
          required: true
          schema:
            type: string
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/pods:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of Pod. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1PodListForAllNamespaces
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/podtemplates:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of PodTemplate. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1PodTemplateListForAllNamespaces
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/replicationcontrollers:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of ReplicationController. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1ReplicationControllerListForAllNamespaces
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/resourcequotas:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of ResourceQuota. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1ResourceQuotaListForAllNamespaces
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/secrets:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of Secret. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1SecretListForAllNamespaces
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/serviceaccounts:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of ServiceAccount. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1ServiceAccountListForAllNamespaces
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
  /api/v1/watch/services:
    get:
      servers: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
            application/yaml:
              schema:
                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent'
          description: OK
        '401':
          description: Unauthorized
      tags:
        - core_v1
      description: 'watch individual changes to a list of Service. deprecated: use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1ServiceListForAllNamespaces
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      parameters:
        - description: allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
          in: query
          name: allowWatchBookmarks
          schema:
            type: boolean
            uniqueItems: true
        - description: |-
            The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

            This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
          in: query
          name: continue
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their fields. Defaults to everything.
          in: query
          name: fieldSelector
          schema:
            type: string
            uniqueItems: true
        - description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          in: query
          name: labelSelector
          schema:
            type: string
            uniqueItems: true
        - description: |-
            limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

            The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
          in: query
          name: limit
          schema:
            type: integer
            uniqueItems: true
        - description: If 'true', then the output is pretty printed.
          in: query
          name: pretty
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersion
          schema:
            type: string
            uniqueItems: true
        - description: |-
            resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.

            Defaults to unset
          in: query
          name: resourceVersionMatch
          schema:
            type: string
            uniqueItems: true
        - description: Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
          in: query
          name: timeoutSeconds
          schema:
            type: integer
            uniqueItems: true
        - description: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
          in: query
          name: watch
          schema:
            type: boolean
            uniqueItems: true
components:
  schemas:
    io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList:
      description: APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        groupVersion:
          description: groupVersion is the group and version this APIResourceList is for.
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        resources:
          description: resources contains the name of the resources and if they are namespaced.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource'
          type: array
      required:
        - groupVersion
        - resources
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: APIResourceList
          version: v1
    io.k8s.apimachinery.pkg.apis.meta.v1.APIResource:
      description: APIResource specifies the name of a resource and whether it is namespaced.
      properties:
        categories:
          description: categories is a list of the grouped resources this resource belongs to (e.g. 'all')
          items:
            type: string
          type: array
        group:
          description: 'group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale".'
          type: string
        kind:
          description: kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
          type: string
        name:
          description: name is the plural name of the resource.
          type: string
        namespaced:
          description: namespaced indicates if a resource is namespaced or not.
          type: boolean
        shortNames:
          description: shortNames is a list of suggested short names of the resource.
          items:
            type: string
          type: array
        singularName:
          description: singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.
          type: string
        storageVersionHash:
          description: The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.
          type: string
        verbs:
          description: verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)
          items:
            type: string
          type: array
        version:
          description: 'version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource''s group)".'
          type: string
      required:
        - name
        - singularName
        - namespaced
        - kind
        - verbs
      type: object
    io.k8s.api.core.v1.ComponentStatusList:
      description: 'Status of all the conditions for the component as a list of ComponentStatus objects. Deprecated: This API is deprecated in v1.19+'
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: List of ComponentStatus objects.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ComponentStatus'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
          description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
      required:
        - items
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: ComponentStatusList
          version: v1
    io.k8s.api.core.v1.ComponentStatus:
      description: 'ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+'
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        conditions:
          description: List of component conditions observed
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ComponentCondition'
          type: array
          x-kubernetes-patch-merge-key: type
          x-kubernetes-patch-strategy: merge
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: ComponentStatus
          version: v1
    io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta:
      description: ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
      properties:
        continue:
          description: continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
          type: string
        remainingItemCount:
          description: remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
          format: int64
          type: integer
        resourceVersion:
          description: 'String that identifies the server''s internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
          type: string
        selfLink:
          description: 'Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.'
          type: string
      type: object
    io.k8s.api.core.v1.ComponentCondition:
      description: Information about the condition of a component.
      properties:
        error:
          description: Condition error code for a component. For example, a health check error code.
          type: string
        message:
          description: Message about the condition for a component. For example, information about a health check.
          type: string
        status:
          description: 'Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".'
          type: string
        type:
          description: 'Type of condition for a component. Valid value: "Healthy"'
          type: string
      required:
        - type
        - status
      type: object
    ObjectMeta:
      description: ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
      properties:
        annotations:
          additionalProperties:
            type: string
          description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
          type: object
        clusterName:
          description: |-
            Deprecated: ClusterName is a legacy field that was always cleared by the system and never used; it will be removed completely in 1.25.

            The name in the go struct is changed to help clients detect accidental use.
          type: string
        creationTimestamp:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: |-
            CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        deletionGracePeriodSeconds:
          description: Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
          format: int64
          type: integer
        deletionTimestamp:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: |-
            DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.

            Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        finalizers:
          description: Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
          items:
            type: string
          type: array
          x-kubernetes-patch-strategy: merge
        generateName:
          description: |-
            GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

            If this field is specified and the generated name exists, the server will return a 409.

            Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          type: string
        generation:
          description: A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
          format: int64
          type: integer
        labels:
          additionalProperties:
            type: string
          description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
          type: object
        managedFields:
          description: ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry'
          type: array
        name:
          description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
          type: string
        namespace:
          description: |-
            Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

            Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
          type: string
        ownerReferences:
          description: List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference'
          type: array
          x-kubernetes-patch-merge-key: uid
          x-kubernetes-patch-strategy: merge
        resourceVersion:
          description: |-
            An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

            Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          type: string
        selfLink:
          description: 'Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.'
          type: string
        uid:
          description: |-
            UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

            Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
          type: string
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.Time:
      description: Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
      format: date-time
      type: string
    io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry:
      description: ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
      properties:
        apiVersion:
          description: APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
          type: string
        fieldsType:
          description: 'FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"'
          type: string
        fieldsV1:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1'
          description: FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
        manager:
          description: Manager is an identifier of the workflow managing these fields.
          type: string
        operation:
          description: Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
          type: string
        subresource:
          description: Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
          type: string
        time:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference:
      description: OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
      properties:
        apiVersion:
          description: API version of the referent.
          type: string
        blockOwnerDeletion:
          description: If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
          type: boolean
        controller:
          description: If true, this reference points to the managing controller.
          type: boolean
        kind:
          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        name:
          description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
          type: string
        uid:
          description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
          type: string
      required:
        - apiVersion
        - kind
        - name
        - uid
      type: object
      x-kubernetes-map-type: atomic
    io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1:
      description: |-
        FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

        Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.

        The exact format is defined in sigs.k8s.io/structured-merge-diff
      type: object
    io.k8s.api.core.v1.ConfigMapList:
      description: ConfigMapList is a resource containing a list of ConfigMap objects.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: Items is the list of ConfigMaps.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
          description: 'More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
      required:
        - items
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: ConfigMapList
          version: v1
    io.k8s.api.core.v1.ConfigMap:
      description: ConfigMap holds configuration data for pods to consume.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        binaryData:
          additionalProperties:
            format: byte
            type: string
          description: BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
          type: object
        data:
          additionalProperties:
            type: string
          description: Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
          type: object
        immutable:
          description: Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
          type: boolean
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: ConfigMap
          version: v1
    io.k8s.api.core.v1.EndpointsList:
      description: EndpointsList is a list of endpoints.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: List of endpoints.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.Endpoints'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
          description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
      required:
        - items
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: EndpointsList
          version: v1
    io.k8s.api.core.v1.Endpoints:
      description: |-
        Endpoints is a collection of endpoints that implement the actual service. Example:
          Name: "mysvc",
          Subsets: [
            {
              Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
              Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
            },
            {
              Addresses: [{"ip": "10.10.3.3"}],
              Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
            },
         ]
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        subsets:
          description: The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.EndpointSubset'
          type: array
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: Endpoints
          version: v1
    io.k8s.api.core.v1.EndpointSubset:
      description: |-
        EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:
          {
            Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
            Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
          }
        The resulting set of endpoints can be viewed as:
            a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
            b: [ 10.10.1.1:309, 10.10.2.2:309 ]
      properties:
        addresses:
          description: IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.EndpointAddress'
          type: array
        notReadyAddresses:
          description: IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.EndpointAddress'
          type: array
        ports:
          description: Port numbers available on the related IP addresses.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.EndpointPort'
          type: array
      type: object
    io.k8s.api.core.v1.EventList:
      description: EventList is a list of events.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: List of events
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.Event'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
          description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
      required:
        - items
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: EventList
          version: v1
    io.k8s.api.core.v1.EndpointAddress:
      description: EndpointAddress is a tuple that describes single IP address.
      properties:
        hostname:
          description: The Hostname of this endpoint
          type: string
        ip:
          description: The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.
          type: string
        nodeName:
          description: 'Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.'
          type: string
        targetRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
          description: Reference to object providing the endpoint.
      required:
        - ip
      type: object
      x-kubernetes-map-type: atomic
    io.k8s.api.core.v1.EndpointPort:
      description: EndpointPort is a tuple that describes a single port.
      properties:
        appProtocol:
          description: The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
          type: string
        name:
          description: The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
          type: string
        port:
          description: The port number of the endpoint.
          format: int32
          type: integer
        protocol:
          description: |+
            The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.

          type: string
      required:
        - port
      type: object
      x-kubernetes-map-type: atomic
    io.k8s.api.core.v1.Event:
      description: Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
      properties:
        action:
          description: What action was taken/failed regarding to the Regarding object.
          type: string
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        count:
          description: The number of times this event has occurred.
          format: int32
          type: integer
        eventTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime'
          description: Time when this Event was first observed.
        firstTimestamp:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
        involvedObject:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
          description: The object that this event is about.
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        lastTimestamp:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: The time at which the most recent occurrence of this event was recorded.
        message:
          description: A human-readable description of the status of this operation.
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        reason:
          description: This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
          type: string
        related:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
          description: Optional secondary object for more complex actions.
        reportingComponent:
          description: Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
          type: string
        reportingInstance:
          description: ID of the controller instance, e.g. `kubelet-xyzf`.
          type: string
        series:
          $ref: '#/components/schemas/io.k8s.api.core.v1.EventSeries'
          description: Data about the Event series this event represents or nil if it's a singleton Event.
        source:
          $ref: '#/components/schemas/io.k8s.api.core.v1.EventSource'
          description: The component reporting this event. Should be a short machine understandable string.
        type:
          description: Type of this event (Normal, Warning), new types could be added in the future
          type: string
      required:
        - metadata
        - involvedObject
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: Event
          version: v1
    io.k8s.api.core.v1.ObjectReference:
      description: ObjectReference contains enough information to let you inspect or modify the referred object.
      properties:
        apiVersion:
          description: API version of the referent.
          type: string
        fieldPath:
          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.'
          type: string
        kind:
          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        name:
          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
          type: string
        namespace:
          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
          type: string
        resourceVersion:
          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
          type: string
        uid:
          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
          type: string
      type: object
      x-kubernetes-map-type: atomic
    io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime:
      description: MicroTime is version of Time with microsecond level precision.
      format: date-time
      type: string
    io.k8s.api.core.v1.EventSeries:
      description: EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
      properties:
        count:
          description: Number of occurrences in this series up to the last heartbeat time
          format: int32
          type: integer
        lastObservedTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime'
          description: Time of the last occurrence observed
      type: object
    io.k8s.api.core.v1.EventSource:
      description: EventSource contains information for an event.
      properties:
        host:
          description: Node name on which the event is generated.
          type: string
        component:
          description: Component from which the event is generated.
          type: string
      type: object
    io.k8s.api.core.v1.LimitRangeList:
      description: LimitRangeList is a list of LimitRange items.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: 'Items is a list of LimitRange objects. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRange'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
          description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
      required:
        - items
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: LimitRangeList
          version: v1
    io.k8s.api.core.v1.LimitRange:
      description: LimitRange sets resource usage limits for each kind of resource in a Namespace.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        spec:
          $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRangeSpec'
          description: 'Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: LimitRange
          version: v1
    io.k8s.api.core.v1.LimitRangeSpec:
      description: LimitRangeSpec defines a min/max usage limit for resources that match on kind.
      properties:
        limits:
          description: Limits is the list of LimitRangeItem objects that are enforced.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.LimitRangeItem'
          type: array
      required:
        - limits
      type: object
    io.k8s.api.core.v1.NamespaceList:
      description: NamespaceList is a list of Namespaces.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: 'Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
          description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
      required:
        - items
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: NamespaceList
          version: v1
    io.k8s.api.core.v1.LimitRangeItem:
      description: LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
      properties:
        default:
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: Default resource requirement limit value by resource name if resource limit is omitted.
          type: object
        defaultRequest:
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
          type: object
        max:
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: Max usage constraints on this kind by resource name.
          type: object
        maxLimitRequestRatio:
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
          type: object
        min:
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: Min usage constraints on this kind by resource name.
          type: object
        type:
          description: Type of resource that this limit applies to.
          type: string
      required:
        - type
      type: object
    io.k8s.api.core.v1.Namespace:
      description: Namespace provides a scope for Names. Use of multiple namespaces is optional.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        spec:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceSpec'
          description: 'Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
        status:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceStatus'
          description: 'Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: Namespace
          version: v1
    io.k8s.apimachinery.pkg.api.resource.Quantity:
      description: |-
        Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

        The serialization format is:

        <quantity>        ::= <signedNumber><suffix>
          (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
        <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
          (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
        <decimalSI>       ::= m | "" | k | M | G | T | P | E
          (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
        <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

        No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

        When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

        Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
          a. No precision is lost
          b. No fractional digits will be emitted
          c. The exponent (or suffix) is as large as possible.
        The sign will be omitted unless the number is negative.

        Examples:
          1.5 will be serialized as "1500m"
          1.5Gi will be serialized as "1536Mi"

        Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

        Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

        This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
      type: string
    io.k8s.api.core.v1.NamespaceSpec:
      description: NamespaceSpec describes the attributes on a Namespace.
      properties:
        finalizers:
          description: 'Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/'
          items:
            type: string
          type: array
      type: object
    io.k8s.api.core.v1.NamespaceStatus:
      description: NamespaceStatus is information about the current status of a Namespace.
      properties:
        conditions:
          description: Represents the latest available observations of a namespace's current state.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceCondition'
          type: array
          x-kubernetes-patch-merge-key: type
          x-kubernetes-patch-strategy: merge
        phase:
          description: |+
            Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/

          type: string
      type: object
    io.k8s.api.core.v1.NamespaceCondition:
      description: NamespaceCondition contains details about state of namespace.
      properties:
        lastTransitionTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        message:
          type: string
        reason:
          type: string
        status:
          description: Status of the condition, one of True, False, Unknown.
          type: string
        type:
          description: Type of namespace controller condition.
          type: string
      required:
        - type
        - status
      type: object
    io.k8s.api.core.v1.Binding:
      description: Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        target:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
          description: The target object that you want to bind to the standard object.
      required:
        - target
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: Binding
          version: v1
    io.k8s.apimachinery.pkg.apis.meta.v1.Status:
      description: Status is a return value for calls that don't return other objects.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        code:
          description: Suggested HTTP return code for this status, 0 if not set.
          format: int32
          type: integer
        details:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails'
          description: Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        message:
          description: A human-readable description of the status of this operation.
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
          description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        reason:
          description: A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
          type: string
        status:
          description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
          type: string
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: Status
          version: v1
    io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions:
      description: DeleteOptions may be provided when deleting an API object.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        dryRun:
          description: 'When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed'
          items:
            type: string
          type: array
        gracePeriodSeconds:
          description: The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
          format: int64
          type: integer
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        orphanDependents:
          description: 'Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object''s finalizers list. Either this field or PropagationPolicy may be set, but not both.'
          type: boolean
        preconditions:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions'
          description: Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
        propagationPolicy:
          description: 'Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: ''Orphan'' - orphan the dependents; ''Background'' - allow the garbage collector to delete the dependents in the background; ''Foreground'' - a cascading policy that deletes all dependents in the foreground.'
          type: string
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: DeleteOptions
          version: v1
        - group: admission.k8s.io
          kind: DeleteOptions
          version: v1
        - group: admission.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: admissionregistration.k8s.io
          kind: DeleteOptions
          version: v1
        - group: admissionregistration.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: apiextensions.k8s.io
          kind: DeleteOptions
          version: v1
        - group: apiextensions.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: apiregistration.k8s.io
          kind: DeleteOptions
          version: v1
        - group: apiregistration.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: apps
          kind: DeleteOptions
          version: v1
        - group: apps
          kind: DeleteOptions
          version: v1beta1
        - group: apps
          kind: DeleteOptions
          version: v1beta2
        - group: authentication.k8s.io
          kind: DeleteOptions
          version: v1
        - group: authentication.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: authorization.k8s.io
          kind: DeleteOptions
          version: v1
        - group: authorization.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: autoscaling
          kind: DeleteOptions
          version: v1
        - group: autoscaling
          kind: DeleteOptions
          version: v2
        - group: autoscaling
          kind: DeleteOptions
          version: v2beta1
        - group: autoscaling
          kind: DeleteOptions
          version: v2beta2
        - group: batch
          kind: DeleteOptions
          version: v1
        - group: batch
          kind: DeleteOptions
          version: v1beta1
        - group: certificates.k8s.io
          kind: DeleteOptions
          version: v1
        - group: certificates.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: coordination.k8s.io
          kind: DeleteOptions
          version: v1
        - group: coordination.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: discovery.k8s.io
          kind: DeleteOptions
          version: v1
        - group: discovery.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: events.k8s.io
          kind: DeleteOptions
          version: v1
        - group: events.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: extensions
          kind: DeleteOptions
          version: v1beta1
        - group: flowcontrol.apiserver.k8s.io
          kind: DeleteOptions
          version: v1alpha1
        - group: flowcontrol.apiserver.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: flowcontrol.apiserver.k8s.io
          kind: DeleteOptions
          version: v1beta2
        - group: imagepolicy.k8s.io
          kind: DeleteOptions
          version: v1alpha1
        - group: internal.apiserver.k8s.io
          kind: DeleteOptions
          version: v1alpha1
        - group: networking.k8s.io
          kind: DeleteOptions
          version: v1
        - group: networking.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: node.k8s.io
          kind: DeleteOptions
          version: v1
        - group: node.k8s.io
          kind: DeleteOptions
          version: v1alpha1
        - group: node.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: policy
          kind: DeleteOptions
          version: v1
        - group: policy
          kind: DeleteOptions
          version: v1beta1
        - group: rbac.authorization.k8s.io
          kind: DeleteOptions
          version: v1
        - group: rbac.authorization.k8s.io
          kind: DeleteOptions
          version: v1alpha1
        - group: rbac.authorization.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: scheduling.k8s.io
          kind: DeleteOptions
          version: v1
        - group: scheduling.k8s.io
          kind: DeleteOptions
          version: v1alpha1
        - group: scheduling.k8s.io
          kind: DeleteOptions
          version: v1beta1
        - group: storage.k8s.io
          kind: DeleteOptions
          version: v1
        - group: storage.k8s.io
          kind: DeleteOptions
          version: v1alpha1
        - group: storage.k8s.io
          kind: DeleteOptions
          version: v1beta1
    io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails:
      description: StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
      properties:
        causes:
          description: The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause'
          type: array
        group:
          description: The group attribute of the resource associated with the status StatusReason.
          type: string
        kind:
          description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        name:
          description: The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
          type: string
        retryAfterSeconds:
          description: If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
          format: int32
          type: integer
        uid:
          description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
          type: string
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions:
      description: Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
      properties:
        resourceVersion:
          description: Specifies the target ResourceVersion
          type: string
        uid:
          description: Specifies the target UID.
          type: string
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause:
      description: StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
      properties:
        field:
          description: |-
            The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.

            Examples:
              "name" - the field "name" on the current resource
              "items[0].name" - the field "name" on the first array entry in "items"
          type: string
        message:
          description: A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
          type: string
        reason:
          description: A machine-readable description of the cause of the error. If this value is empty there is no information available.
          type: string
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.Patch:
      description: Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.
      type: object
    io.k8s.api.core.v1.PersistentVolumeClaimList:
      description: PersistentVolumeClaimList is a list of PersistentVolumeClaim items.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: 'items is a list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
          description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
      required:
        - items
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: PersistentVolumeClaimList
          version: v1
    io.k8s.api.core.v1.PersistentVolumeClaim:
      description: PersistentVolumeClaim is a user's request for and claim to a persistent volume
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        spec:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimSpec'
          description: 'spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
        status:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimStatus'
          description: 'status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: PersistentVolumeClaim
          version: v1
    io.k8s.api.core.v1.PersistentVolumeClaimSpec:
      description: PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
      properties:
        accessModes:
          description: 'accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
          items:
            type: string
          type: array
        dataSource:
          $ref: '#/components/schemas/io.k8s.api.core.v1.TypedLocalObjectReference'
          description: 'dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.'
        dataSourceRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.TypedLocalObjectReference'
          description: |-
            dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef
              allows any non-core object, as well as PersistentVolumeClaim objects.
            * While DataSource ignores disallowed values (dropping them), DataSourceRef
              preserves all values, and generates an error if a disallowed value is
              specified.
            (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
        resources:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceRequirements'
          description: 'resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
        selector:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
          description: selector is a label query over volumes to consider for binding.
        storageClassName:
          description: 'storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
          type: string
        volumeMode:
          description: volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
          type: string
        volumeName:
          description: volumeName is the binding reference to the PersistentVolume backing this claim.
          type: string
      type: object
    io.k8s.api.core.v1.PersistentVolumeClaimStatus:
      description: PersistentVolumeClaimStatus is the current status of a persistent volume claim.
      properties:
        accessModes:
          description: 'accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
          items:
            type: string
          type: array
        allocatedResources:
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
          type: object
        capacity:
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: capacity represents the actual resources of the underlying volume.
          type: object
        conditions:
          description: conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimCondition'
          type: array
          x-kubernetes-patch-merge-key: type
          x-kubernetes-patch-strategy: merge
        phase:
          description: |+
            phase represents the current phase of PersistentVolumeClaim.

          type: string
        resizeStatus:
          description: resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
          type: string
      type: object
    io.k8s.api.core.v1.TypedLocalObjectReference:
      description: TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
      properties:
        apiGroup:
          description: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
          type: string
        kind:
          description: Kind is the type of resource being referenced
          type: string
        name:
          description: Name is the name of resource being referenced
          type: string
      required:
        - kind
        - name
      type: object
      x-kubernetes-map-type: atomic
    io.k8s.api.core.v1.ResourceRequirements:
      description: ResourceRequirements describes the compute resource requirements.
      properties:
        limits:
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
          type: object
        requests:
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
          type: object
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector:
      description: A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
      properties:
        matchExpressions:
          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement'
          type: array
        matchLabels:
          additionalProperties:
            type: string
          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
          type: object
      type: object
      x-kubernetes-map-type: atomic
    io.k8s.api.core.v1.PersistentVolumeClaimCondition:
      description: PersistentVolumeClaimCondition contails details about state of pvc
      properties:
        lastProbeTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: lastProbeTime is the time we probed the condition.
        lastTransitionTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: lastTransitionTime is the time the condition transitioned from one status to another.
        message:
          description: message is the human-readable message indicating details about last transition.
          type: string
        reason:
          description: reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
          type: string
        status:
          type: string
        type:
          type: string
      required:
        - type
        - status
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement:
      description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
      properties:
        key:
          description: key is the label key that the selector applies to.
          type: string
          x-kubernetes-patch-merge-key: key
          x-kubernetes-patch-strategy: merge
        operator:
          description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
          type: string
        values:
          description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
          items:
            type: string
          type: array
      required:
        - key
        - operator
      type: object
    io.k8s.api.core.v1.PodList:
      description: PodList is a list of Pods.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: 'List of pods. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md'
          items:
            $ref: '#/components/schemas/Pod'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
          description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
      required:
        - items
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: PodList
          version: v1
    Pod:
      description: Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        spec:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PodSpec'
          description: 'Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
        status:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PodStatus'
          description: 'Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: Pod
          version: v1
    io.k8s.api.core.v1.PodSpec:
      description: PodSpec is a description of a pod.
      properties:
        activeDeadlineSeconds:
          description: Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
          format: int64
          type: integer
        affinity:
          $ref: '#/components/schemas/io.k8s.api.core.v1.Affinity'
          description: If specified, the pod's scheduling constraints
        automountServiceAccountToken:
          description: AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
          type: boolean
        containers:
          description: List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.Container'
          type: array
          x-kubernetes-patch-merge-key: name
          x-kubernetes-patch-strategy: merge
        dnsConfig:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PodDNSConfig'
          description: Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
        dnsPolicy:
          description: |+
            Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.

          type: string
        enableServiceLinks:
          description: 'EnableServiceLinks indicates whether information about services should be injected into pod''s environment variables, matching the syntax of Docker links. Optional: Defaults to true.'
          type: boolean
        ephemeralContainers:
          description: List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is beta-level and available on clusters that haven't disabled the EphemeralContainers feature gate.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.EphemeralContainer'
          type: array
          x-kubernetes-patch-merge-key: name
          x-kubernetes-patch-strategy: merge
        hostAliases:
          description: HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.HostAlias'
          type: array
          x-kubernetes-patch-merge-key: ip
          x-kubernetes-patch-strategy: merge
        hostIPC:
          description: 'Use the host''s ipc namespace. Optional: Default to false.'
          type: boolean
        hostNetwork:
          description: Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
          type: boolean
        hostPID:
          description: 'Use the host''s pid namespace. Optional: Default to false.'
          type: boolean
        hostname:
          description: Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
          type: string
        imagePullSecrets:
          description: 'ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.LocalObjectReference'
          type: array
          x-kubernetes-patch-merge-key: name
          x-kubernetes-patch-strategy: merge
        initContainers:
          description: 'List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.Container'
          type: array
          x-kubernetes-patch-merge-key: name
          x-kubernetes-patch-strategy: merge
        nodeName:
          description: NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
          type: string
        nodeSelector:
          additionalProperties:
            type: string
          description: 'NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node''s labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
          type: object
          x-kubernetes-map-type: atomic
        os:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PodOS'
          description: |-
            Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.

            If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions

            If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup This is a beta field and requires the IdentifyPodOS feature
        overhead:
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: 'Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md'
          type: object
        preemptionPolicy:
          description: PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
          type: string
        priority:
          description: The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
          format: int32
          type: integer
        priorityClassName:
          description: If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
          type: string
        readinessGates:
          description: 'If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.PodReadinessGate'
          type: array
        restartPolicy:
          description: |+
            Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy

          type: string
        runtimeClassName:
          description: 'RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class'
          type: string
        schedulerName:
          description: If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
          type: string
        securityContext:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PodSecurityContext'
          description: 'SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.'
        serviceAccount:
          description: 'DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.'
          type: string
        serviceAccountName:
          description: 'ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/'
          type: string
        setHostnameAsFQDN:
          description: If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
          type: boolean
        shareProcessNamespace:
          description: 'Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.'
          type: boolean
        subdomain:
          description: If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
          type: string
        terminationGracePeriodSeconds:
          description: Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
          format: int64
          type: integer
        tolerations:
          description: If specified, the pod's tolerations.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.Toleration'
          type: array
        topologySpreadConstraints:
          description: TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.TopologySpreadConstraint'
          type: array
          x-kubernetes-list-map-keys:
            - topologyKey
            - whenUnsatisfiable
          x-kubernetes-list-type: map
          x-kubernetes-patch-merge-key: topologyKey
          x-kubernetes-patch-strategy: merge
        volumes:
          description: 'List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.Volume'
          type: array
          x-kubernetes-patch-merge-key: name
          x-kubernetes-patch-strategy: merge,retainKeys
      required:
        - containers
      type: object
    io.k8s.api.core.v1.PodStatus:
      description: PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
      properties:
        conditions:
          description: 'Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.PodCondition'
          type: array
          x-kubernetes-patch-merge-key: type
          x-kubernetes-patch-strategy: merge
        containerStatuses:
          description: 'The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerStatus'
          type: array
        ephemeralContainerStatuses:
          description: Status for any ephemeral containers that have run in this pod. This field is beta-level and available on clusters that haven't disabled the EphemeralContainers feature gate.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerStatus'
          type: array
        hostIP:
          description: IP address of the host to which the pod is assigned. Empty if not yet scheduled.
          type: string
        initContainerStatuses:
          description: 'The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerStatus'
          type: array
        message:
          description: A human readable message indicating details about why the pod is in this condition.
          type: string
        nominatedNodeName:
          description: nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
          type: string
        phase:
          description: |+
            The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:

            Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.

            More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase

          type: string
        podIP:
          description: IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
          type: string
        podIPs:
          description: podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.PodIP'
          type: array
          x-kubernetes-patch-merge-key: ip
          x-kubernetes-patch-strategy: merge
        qosClass:
          description: |+
            The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md

          type: string
        reason:
          description: A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
          type: string
        startTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
      type: object
    io.k8s.api.core.v1.Affinity:
      description: Affinity is a group of affinity scheduling rules.
      properties:
        nodeAffinity:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NodeAffinity'
          description: Describes node affinity scheduling rules for the pod.
        podAffinity:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PodAffinity'
          description: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        podAntiAffinity:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PodAntiAffinity'
          description: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
      type: object
    io.k8s.api.core.v1.Container:
      description: A single application container that you want to run within a pod.
      properties:
        args:
          description: 'Arguments to the entrypoint. The container image''s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
          items:
            type: string
          type: array
        command:
          description: 'Entrypoint array. Not executed within a shell. The container image''s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
          items:
            type: string
          type: array
        env:
          description: List of environment variables to set in the container. Cannot be updated.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.EnvVar'
          type: array
          x-kubernetes-patch-merge-key: name
          x-kubernetes-patch-strategy: merge
        envFrom:
          description: List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.EnvFromSource'
          type: array
        image:
          description: 'Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.'
          type: string
        imagePullPolicy:
          description: |+
            Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images

          type: string
        lifecycle:
          $ref: '#/components/schemas/io.k8s.api.core.v1.Lifecycle'
          description: Actions that the management system should take in response to container lifecycle events. Cannot be updated.
        livenessProbe:
          $ref: '#/components/schemas/io.k8s.api.core.v1.Probe'
          description: 'Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
        name:
          description: Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
          type: string
        ports:
          description: List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerPort'
          type: array
          x-kubernetes-list-map-keys:
            - containerPort
            - protocol
          x-kubernetes-list-type: map
          x-kubernetes-patch-merge-key: containerPort
          x-kubernetes-patch-strategy: merge
        readinessProbe:
          $ref: '#/components/schemas/io.k8s.api.core.v1.Probe'
          description: 'Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
        resources:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceRequirements'
          description: 'Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
        securityContext:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SecurityContext'
          description: 'SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/'
        startupProbe:
          $ref: '#/components/schemas/io.k8s.api.core.v1.Probe'
          description: 'StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod''s lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
        stdin:
          description: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
          type: boolean
        stdinOnce:
          description: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
          type: boolean
        terminationMessagePath:
          description: 'Optional: Path at which the file to which the container''s termination message will be written is mounted into the container''s filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.'
          type: string
        terminationMessagePolicy:
          description: |+
            Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.

          type: string
        tty:
          description: Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
          type: boolean
        volumeDevices:
          description: volumeDevices is the list of block devices to be used by the container.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.VolumeDevice'
          type: array
          x-kubernetes-patch-merge-key: devicePath
          x-kubernetes-patch-strategy: merge
        volumeMounts:
          description: Pod volumes to mount into the container's filesystem. Cannot be updated.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.VolumeMount'
          type: array
          x-kubernetes-patch-merge-key: mountPath
          x-kubernetes-patch-strategy: merge
        workingDir:
          description: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
          type: string
      required:
        - name
      type: object
    io.k8s.api.core.v1.PodDNSConfig:
      description: PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
      properties:
        nameservers:
          description: A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
          items:
            type: string
          type: array
        options:
          description: A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.PodDNSConfigOption'
          type: array
        searches:
          description: A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
          items:
            type: string
          type: array
      type: object
    io.k8s.api.core.v1.EphemeralContainer:
      description: |-
        An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.

        To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.

        This is a beta feature available on clusters that haven't disabled the EphemeralContainers feature gate.
      properties:
        args:
          description: 'Arguments to the entrypoint. The image''s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
          items:
            type: string
          type: array
        command:
          description: 'Entrypoint array. Not executed within a shell. The image''s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
          items:
            type: string
          type: array
        env:
          description: List of environment variables to set in the container. Cannot be updated.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.EnvVar'
          type: array
          x-kubernetes-patch-merge-key: name
          x-kubernetes-patch-strategy: merge
        envFrom:
          description: List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.EnvFromSource'
          type: array
        image:
          description: 'Container image name. More info: https://kubernetes.io/docs/concepts/containers/images'
          type: string
        imagePullPolicy:
          description: |+
            Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images

          type: string
        lifecycle:
          $ref: '#/components/schemas/io.k8s.api.core.v1.Lifecycle'
          description: Lifecycle is not allowed for ephemeral containers.
        livenessProbe:
          $ref: '#/components/schemas/io.k8s.api.core.v1.Probe'
          description: Probes are not allowed for ephemeral containers.
        name:
          description: Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
          type: string
        ports:
          description: Ports are not allowed for ephemeral containers.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerPort'
          type: array
          x-kubernetes-list-map-keys:
            - containerPort
            - protocol
          x-kubernetes-list-type: map
          x-kubernetes-patch-merge-key: containerPort
          x-kubernetes-patch-strategy: merge
        readinessProbe:
          $ref: '#/components/schemas/io.k8s.api.core.v1.Probe'
          description: Probes are not allowed for ephemeral containers.
        resources:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceRequirements'
          description: Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
        securityContext:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SecurityContext'
          description: 'Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.'
        startupProbe:
          $ref: '#/components/schemas/io.k8s.api.core.v1.Probe'
          description: Probes are not allowed for ephemeral containers.
        stdin:
          description: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
          type: boolean
        stdinOnce:
          description: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
          type: boolean
        targetContainerName:
          description: |-
            If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.

            The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
          type: string
        terminationMessagePath:
          description: 'Optional: Path at which the file to which the container''s termination message will be written is mounted into the container''s filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.'
          type: string
        terminationMessagePolicy:
          description: |+
            Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.

          type: string
        tty:
          description: Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
          type: boolean
        volumeDevices:
          description: volumeDevices is the list of block devices to be used by the container.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.VolumeDevice'
          type: array
          x-kubernetes-patch-merge-key: devicePath
          x-kubernetes-patch-strategy: merge
        volumeMounts:
          description: Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.VolumeMount'
          type: array
          x-kubernetes-patch-merge-key: mountPath
          x-kubernetes-patch-strategy: merge
        workingDir:
          description: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
          type: string
      required:
        - name
      type: object
    io.k8s.api.core.v1.HostAlias:
      description: HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
      properties:
        hostnames:
          description: Hostnames for the above IP address.
          items:
            type: string
          type: array
        ip:
          description: IP address of the host file entry.
          type: string
      type: object
    io.k8s.api.core.v1.LocalObjectReference:
      description: LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
      properties:
        name:
          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
          type: string
      type: object
      x-kubernetes-map-type: atomic
    io.k8s.api.core.v1.PodOS:
      description: PodOS defines the OS parameters of a pod.
      properties:
        name:
          description: 'Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null'
          type: string
      required:
        - name
      type: object
    io.k8s.api.core.v1.PodReadinessGate:
      description: PodReadinessGate contains the reference to a pod condition
      properties:
        conditionType:
          description: ConditionType refers to a condition in the pod's condition list with matching type.
          type: string
      required:
        - conditionType
      type: object
    io.k8s.api.core.v1.PodSecurityContext:
      description: PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
      properties:
        fsGroup:
          description: |-
            A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:

            1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----

            If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
          format: int64
          type: integer
        fsGroupChangePolicy:
          description: 'fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.'
          type: string
        runAsGroup:
          description: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
          format: int64
          type: integer
        runAsNonRoot:
          description: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          type: boolean
        runAsUser:
          description: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
          format: int64
          type: integer
        seLinuxOptions:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SELinuxOptions'
          description: The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
        seccompProfile:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SeccompProfile'
          description: The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
        supplementalGroups:
          description: A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.
          items:
            format: int64
            type: integer
          type: array
        sysctls:
          description: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.Sysctl'
          type: array
        windowsOptions:
          $ref: '#/components/schemas/io.k8s.api.core.v1.WindowsSecurityContextOptions'
          description: The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
      type: object
    io.k8s.api.core.v1.Toleration:
      description: The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
      properties:
        effect:
          description: |+
            Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.

          type: string
        key:
          description: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
          type: string
        operator:
          description: |+
            Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.

          type: string
        tolerationSeconds:
          description: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
          format: int64
          type: integer
        value:
          description: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
          type: string
      type: object
    io.k8s.api.core.v1.TopologySpreadConstraint:
      description: TopologySpreadConstraint specifies how to spread matching pods among the given topology.
      properties:
        labelSelector:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
          description: LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
        maxSkew:
          description: 'MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It''s a required field. Default value is 1 and 0 is not allowed.'
          format: int32
          type: integer
        minDomains:
          description: |-
            MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.

            For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.

            This is an alpha field and requires enabling MinDomainsInPodTopologySpread feature gate.
          format: int32
          type: integer
        topologyKey:
          description: TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes match the node selector. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
          type: string
        whenUnsatisfiable:
          description: |+
            WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
              but giving higher precedence to topologies that would help reduce the
              skew.
            A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.

          type: string
      required:
        - maxSkew
        - topologyKey
        - whenUnsatisfiable
      type: object
    io.k8s.api.core.v1.Volume:
      description: Volume represents a named volume in a pod that may be accessed by any container in the pod.
      properties:
        awsElasticBlockStore:
          $ref: '#/components/schemas/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource'
          description: 'awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet''s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
        azureDisk:
          $ref: '#/components/schemas/io.k8s.api.core.v1.AzureDiskVolumeSource'
          description: azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        azureFile:
          $ref: '#/components/schemas/io.k8s.api.core.v1.AzureFileVolumeSource'
          description: azureFile represents an Azure File Service mount on the host and bind mount to the pod.
        cephfs:
          $ref: '#/components/schemas/io.k8s.api.core.v1.CephFSVolumeSource'
          description: cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        cinder:
          $ref: '#/components/schemas/io.k8s.api.core.v1.CinderVolumeSource'
          description: 'cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
        configMap:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMapVolumeSource'
          description: configMap represents a configMap that should populate this volume
        csi:
          $ref: '#/components/schemas/io.k8s.api.core.v1.CSIVolumeSource'
          description: csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
        downwardAPI:
          $ref: '#/components/schemas/io.k8s.api.core.v1.DownwardAPIVolumeSource'
          description: downwardAPI represents downward API about the pod that should populate this volume
        emptyDir:
          $ref: '#/components/schemas/io.k8s.api.core.v1.EmptyDirVolumeSource'
          description: 'emptyDir represents a temporary directory that shares a pod''s lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
        ephemeral:
          $ref: '#/components/schemas/io.k8s.api.core.v1.EphemeralVolumeSource'
          description: |-
            ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.

            Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
               tracking are needed,
            c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
               a PersistentVolumeClaim (see EphemeralVolumeSource for more
               information on the connection between this volume type
               and PersistentVolumeClaim).

            Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.

            Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.

            A pod can use both types of ephemeral volumes and persistent volumes at the same time.
        fc:
          $ref: '#/components/schemas/io.k8s.api.core.v1.FCVolumeSource'
          description: fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        flexVolume:
          $ref: '#/components/schemas/io.k8s.api.core.v1.FlexVolumeSource'
          description: flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        flocker:
          $ref: '#/components/schemas/io.k8s.api.core.v1.FlockerVolumeSource'
          description: flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        gcePersistentDisk:
          $ref: '#/components/schemas/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource'
          description: 'gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet''s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
        gitRepo:
          $ref: '#/components/schemas/io.k8s.api.core.v1.GitRepoVolumeSource'
          description: 'gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod''s container.'
        glusterfs:
          $ref: '#/components/schemas/io.k8s.api.core.v1.GlusterfsVolumeSource'
          description: 'glusterfs represents a Glusterfs mount on the host that shares a pod''s lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md'
        hostPath:
          $ref: '#/components/schemas/io.k8s.api.core.v1.HostPathVolumeSource'
          description: 'hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
        iscsi:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ISCSIVolumeSource'
          description: 'iscsi represents an ISCSI Disk resource that is attached to a kubelet''s host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md'
        name:
          description: 'name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
          type: string
        nfs:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NFSVolumeSource'
          description: 'nfs represents an NFS mount on the host that shares a pod''s lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
        persistentVolumeClaim:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource'
          description: 'persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
        photonPersistentDisk:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource'
          description: photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        portworxVolume:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PortworxVolumeSource'
          description: portworxVolume represents a portworx volume attached and mounted on kubelets host machine
        projected:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ProjectedVolumeSource'
          description: projected items for all in one resources secrets, configmaps, and downward API
        quobyte:
          $ref: '#/components/schemas/io.k8s.api.core.v1.QuobyteVolumeSource'
          description: quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        rbd:
          $ref: '#/components/schemas/io.k8s.api.core.v1.RBDVolumeSource'
          description: 'rbd represents a Rados Block Device mount on the host that shares a pod''s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md'
        scaleIO:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ScaleIOVolumeSource'
          description: scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        secret:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SecretVolumeSource'
          description: 'secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
        storageos:
          $ref: '#/components/schemas/io.k8s.api.core.v1.StorageOSVolumeSource'
          description: storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        vsphereVolume:
          $ref: '#/components/schemas/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource'
          description: vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
      required:
        - name
      type: object
    io.k8s.api.core.v1.PodCondition:
      description: PodCondition contains details for the current condition of this pod.
      properties:
        lastProbeTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: Last time we probed the condition.
        lastTransitionTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: Last time the condition transitioned from one status to another.
        message:
          description: Human-readable message indicating details about last transition.
          type: string
        reason:
          description: Unique, one-word, CamelCase reason for the condition's last transition.
          type: string
        status:
          description: 'Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions'
          type: string
        type:
          description: 'Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions'
          type: string
      required:
        - type
        - status
      type: object
    io.k8s.api.core.v1.ContainerStatus:
      description: ContainerStatus contains details for the current status of this container.
      properties:
        containerID:
          description: Container's ID in the format '<type>://<container_id>'.
          type: string
        image:
          description: 'The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.'
          type: string
        imageID:
          description: ImageID of the container's image.
          type: string
        lastState:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerState'
          description: Details about the container's last termination condition.
        name:
          description: This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
          type: string
        ready:
          description: Specifies whether the container has passed its readiness probe.
          type: boolean
        restartCount:
          description: The number of times the container has been restarted.
          format: int32
          type: integer
        started:
          description: Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
          type: boolean
        state:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerState'
          description: Details about the container's current condition.
      required:
        - name
        - ready
        - restartCount
        - image
        - imageID
      type: object
    io.k8s.api.core.v1.PodIP:
      description: |-
        IP address information for entries in the (plural) PodIPs field. Each entry includes:
           IP: An IP address allocated to the pod. Routable at least within the cluster.
      properties:
        ip:
          description: ip is an IP address (IPv4 or IPv6) assigned to the pod
          type: string
      type: object
    io.k8s.api.core.v1.NodeAffinity:
      description: Node affinity is a group of node affinity scheduling rules.
      properties:
        preferredDuringSchedulingIgnoredDuringExecution:
          description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.PreferredSchedulingTerm'
          type: array
        requiredDuringSchedulingIgnoredDuringExecution:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NodeSelector'
          description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
      type: object
    io.k8s.api.core.v1.PodAffinity:
      description: Pod affinity is a group of inter pod affinity scheduling rules.
      properties:
        preferredDuringSchedulingIgnoredDuringExecution:
          description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.WeightedPodAffinityTerm'
          type: array
        requiredDuringSchedulingIgnoredDuringExecution:
          description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.PodAffinityTerm'
          type: array
      type: object
    io.k8s.api.core.v1.PodAntiAffinity:
      description: Pod anti affinity is a group of inter pod anti affinity scheduling rules.
      properties:
        preferredDuringSchedulingIgnoredDuringExecution:
          description: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.WeightedPodAffinityTerm'
          type: array
        requiredDuringSchedulingIgnoredDuringExecution:
          description: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.PodAffinityTerm'
          type: array
      type: object
    io.k8s.api.core.v1.EnvVar:
      description: EnvVar represents an environment variable present in a Container.
      properties:
        name:
          description: Name of the environment variable. Must be a C_IDENTIFIER.
          type: string
        value:
          description: 'Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".'
          type: string
        valueFrom:
          $ref: '#/components/schemas/io.k8s.api.core.v1.EnvVarSource'
          description: Source for the environment variable's value. Cannot be used if value is not empty.
      required:
        - name
      type: object
    io.k8s.api.core.v1.EnvFromSource:
      description: EnvFromSource represents the source of a set of ConfigMaps
      properties:
        configMapRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMapEnvSource'
          description: The ConfigMap to select from
        prefix:
          description: An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
          type: string
        secretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SecretEnvSource'
          description: The Secret to select from
      type: object
    io.k8s.api.core.v1.Lifecycle:
      description: Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
      properties:
        postStart:
          $ref: '#/components/schemas/io.k8s.api.core.v1.LifecycleHandler'
          description: 'PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks'
        preStop:
          $ref: '#/components/schemas/io.k8s.api.core.v1.LifecycleHandler'
          description: 'PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod''s termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod''s termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks'
      type: object
    io.k8s.api.core.v1.Probe:
      description: Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
      properties:
        exec:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ExecAction'
          description: Exec specifies the action to take.
        failureThreshold:
          description: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
          format: int32
          type: integer
        grpc:
          $ref: '#/components/schemas/io.k8s.api.core.v1.GRPCAction'
          description: GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
        httpGet:
          $ref: '#/components/schemas/io.k8s.api.core.v1.HTTPGetAction'
          description: HTTPGet specifies the http request to perform.
        initialDelaySeconds:
          description: 'Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
          format: int32
          type: integer
        periodSeconds:
          description: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
          format: int32
          type: integer
        successThreshold:
          description: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
          format: int32
          type: integer
        tcpSocket:
          $ref: '#/components/schemas/io.k8s.api.core.v1.TCPSocketAction'
          description: TCPSocket specifies an action involving a TCP port.
        terminationGracePeriodSeconds:
          description: Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
          format: int64
          type: integer
        timeoutSeconds:
          description: 'Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
          format: int32
          type: integer
      type: object
    io.k8s.api.core.v1.ContainerPort:
      description: ContainerPort represents a network port in a single container.
      properties:
        containerPort:
          description: Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
          format: int32
          type: integer
        hostIP:
          description: What host IP to bind the external port to.
          type: string
        hostPort:
          description: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
          format: int32
          type: integer
        name:
          description: If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
          type: string
        protocol:
          description: |+
            Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".

          type: string
      required:
        - containerPort
      type: object
    io.k8s.api.core.v1.SecurityContext:
      description: SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
      properties:
        allowPrivilegeEscalation:
          description: 'AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.'
          type: boolean
        capabilities:
          $ref: '#/components/schemas/io.k8s.api.core.v1.Capabilities'
          description: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
        privileged:
          description: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
          type: boolean
        procMount:
          description: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
          type: string
        readOnlyRootFilesystem:
          description: Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
          type: boolean
        runAsGroup:
          description: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
          format: int64
          type: integer
        runAsNonRoot:
          description: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          type: boolean
        runAsUser:
          description: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
          format: int64
          type: integer
        seLinuxOptions:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SELinuxOptions'
          description: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
        seccompProfile:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SeccompProfile'
          description: The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
        windowsOptions:
          $ref: '#/components/schemas/io.k8s.api.core.v1.WindowsSecurityContextOptions'
          description: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
      type: object
    io.k8s.api.core.v1.VolumeDevice:
      description: volumeDevice describes a mapping of a raw block device within a container.
      properties:
        devicePath:
          description: devicePath is the path inside of the container that the device will be mapped to.
          type: string
        name:
          description: name must match the name of a persistentVolumeClaim in the pod
          type: string
      required:
        - name
        - devicePath
      type: object
    io.k8s.api.core.v1.VolumeMount:
      description: VolumeMount describes a mounting of a Volume within a container.
      properties:
        mountPath:
          description: Path within the container at which the volume should be mounted.  Must not contain ':'.
          type: string
        mountPropagation:
          description: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
          type: string
        name:
          description: This must match the Name of a Volume.
          type: string
        readOnly:
          description: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
          type: boolean
        subPath:
          description: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
          type: string
        subPathExpr:
          description: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
          type: string
      required:
        - name
        - mountPath
      type: object
    io.k8s.api.core.v1.PodDNSConfigOption:
      description: PodDNSConfigOption defines DNS resolver options of a pod.
      properties:
        name:
          description: Required.
          type: string
        value:
          type: string
      type: object
    io.k8s.api.core.v1.SELinuxOptions:
      description: SELinuxOptions are the labels to be applied to the container
      properties:
        level:
          description: Level is SELinux level label that applies to the container.
          type: string
        role:
          description: Role is a SELinux role label that applies to the container.
          type: string
        type:
          description: Type is a SELinux type label that applies to the container.
          type: string
        user:
          description: User is a SELinux user label that applies to the container.
          type: string
      type: object
    io.k8s.api.core.v1.SeccompProfile:
      description: SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
      properties:
        localhostProfile:
          description: localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
          type: string
        type:
          description: |+
            type indicates which kind of seccomp profile will be applied. Valid options are:

            Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.

          type: string
      required:
        - type
      type: object
      x-kubernetes-unions:
        - discriminator:
            propertyName: type
          fields-to-discriminateBy:
            localhostProfile: LocalhostProfile
    io.k8s.api.core.v1.Sysctl:
      description: Sysctl defines a kernel parameter to be set
      properties:
        name:
          description: Name of a property to set
          type: string
        value:
          description: Value of a property to set
          type: string
      required:
        - name
        - value
      type: object
    io.k8s.api.core.v1.WindowsSecurityContextOptions:
      description: WindowsSecurityContextOptions contain Windows-specific options and credentials.
      properties:
        gmsaCredentialSpec:
          description: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
          type: string
        gmsaCredentialSpecName:
          description: GMSACredentialSpecName is the name of the GMSA credential spec to use.
          type: string
        hostProcess:
          description: HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
          type: boolean
        runAsUserName:
          description: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          type: string
      type: object
    io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource:
      description: |-
        Represents a Persistent Disk resource in AWS.

        An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
      properties:
        fsType:
          description: 'fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
          type: string
        partition:
          description: 'partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).'
          format: int32
          type: integer
        readOnly:
          description: 'readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
          type: boolean
        volumeID:
          description: 'volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
          type: string
      required:
        - volumeID
      type: object
    io.k8s.api.core.v1.AzureDiskVolumeSource:
      description: AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
      properties:
        cachingMode:
          description: 'cachingMode is the Host Caching mode: None, Read Only, Read Write.'
          type: string
        diskName:
          description: diskName is the Name of the data disk in the blob storage
          type: string
        diskURI:
          description: diskURI is the URI of data disk in the blob storage
          type: string
        fsType:
          description: fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          type: string
        kind:
          description: 'kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared'
          type: string
        readOnly:
          description: readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
          type: boolean
      required:
        - diskName
        - diskURI
      type: object
    io.k8s.api.core.v1.AzureFileVolumeSource:
      description: AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
      properties:
        readOnly:
          description: readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
          type: boolean
        secretName:
          description: secretName is the  name of secret that contains Azure Storage Account Name and Key
          type: string
        shareName:
          description: shareName is the azure share Name
          type: string
      required:
        - secretName
        - shareName
      type: object
    io.k8s.api.core.v1.CephFSVolumeSource:
      description: Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
      properties:
        monitors:
          description: 'monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
          items:
            type: string
          type: array
        path:
          description: 'path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /'
          type: string
        readOnly:
          description: 'readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
          type: boolean
        secretFile:
          description: 'secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
          type: string
        secretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.LocalObjectReference'
          description: 'secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
        user:
          description: 'user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
          type: string
      required:
        - monitors
      type: object
    io.k8s.api.core.v1.CinderVolumeSource:
      description: Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
      properties:
        fsType:
          description: 'fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
          type: string
        readOnly:
          description: 'readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
          type: boolean
        secretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.LocalObjectReference'
          description: 'secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.'
        volumeID:
          description: 'volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
          type: string
      required:
        - volumeID
      type: object
    io.k8s.api.core.v1.ConfigMapVolumeSource:
      description: |-
        Adapts a ConfigMap into a volume.

        The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
      properties:
        defaultMode:
          description: 'defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
          format: int32
          type: integer
        items:
          description: items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.KeyToPath'
          type: array
        name:
          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
          type: string
        optional:
          description: optional specify whether the ConfigMap or its keys must be defined
          type: boolean
      type: object
    io.k8s.api.core.v1.CSIVolumeSource:
      description: Represents a source location of a volume to mount, managed by an external CSI driver
      properties:
        driver:
          description: driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
          type: string
        fsType:
          description: fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
          type: string
        nodePublishSecretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.LocalObjectReference'
          description: nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
        readOnly:
          description: readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
          type: boolean
        volumeAttributes:
          additionalProperties:
            type: string
          description: volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
          type: object
      required:
        - driver
      type: object
    io.k8s.api.core.v1.DownwardAPIVolumeSource:
      description: DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
      properties:
        defaultMode:
          description: 'Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
          format: int32
          type: integer
        items:
          description: Items is a list of downward API volume file
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.DownwardAPIVolumeFile'
          type: array
      type: object
    io.k8s.api.core.v1.EmptyDirVolumeSource:
      description: Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
      properties:
        medium:
          description: 'medium represents what type of storage medium should back this directory. The default is "" which means to use the node''s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
          type: string
        sizeLimit:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: 'sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir'
      type: object
    io.k8s.api.core.v1.EphemeralVolumeSource:
      description: Represents an ephemeral volume that is handled by a normal storage driver.
      properties:
        volumeClaimTemplate:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimTemplate'
          description: |-
            Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).

            An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.

            This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.

            Required, must not be nil.
      type: object
    io.k8s.api.core.v1.FCVolumeSource:
      description: Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
      properties:
        fsType:
          description: fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          type: string
        lun:
          description: 'lun is Optional: FC target lun number'
          format: int32
          type: integer
        readOnly:
          description: 'readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.'
          type: boolean
        targetWWNs:
          description: 'targetWWNs is Optional: FC target worldwide names (WWNs)'
          items:
            type: string
          type: array
        wwids:
          description: 'wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.'
          items:
            type: string
          type: array
      type: object
    io.k8s.api.core.v1.FlexVolumeSource:
      description: FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
      properties:
        driver:
          description: driver is the name of the driver to use for this volume.
          type: string
        fsType:
          description: fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
          type: string
        options:
          additionalProperties:
            type: string
          description: 'options is Optional: this field holds extra command options if any.'
          type: object
        readOnly:
          description: 'readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.'
          type: boolean
        secretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.LocalObjectReference'
          description: 'secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.'
      required:
        - driver
      type: object
    io.k8s.api.core.v1.FlockerVolumeSource:
      description: Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
      properties:
        datasetName:
          description: datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
          type: string
        datasetUUID:
          description: datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
          type: string
      type: object
    io.k8s.api.core.v1.GCEPersistentDiskVolumeSource:
      description: |-
        Represents a Persistent Disk resource in Google Compute Engine.

        A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
      properties:
        fsType:
          description: 'fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
          type: string
        partition:
          description: 'partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
          format: int32
          type: integer
        pdName:
          description: 'pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
          type: string
        readOnly:
          description: 'readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
          type: boolean
      required:
        - pdName
      type: object
    io.k8s.api.core.v1.GitRepoVolumeSource:
      description: |-
        Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.

        DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
      properties:
        directory:
          description: directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
          type: string
        repository:
          description: repository is the URL
          type: string
        revision:
          description: revision is the commit hash for the specified revision.
          type: string
      required:
        - repository
      type: object
    io.k8s.api.core.v1.GlusterfsVolumeSource:
      description: Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
      properties:
        endpoints:
          description: 'endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
          type: string
        path:
          description: 'path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
          type: string
        readOnly:
          description: 'readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
          type: boolean
      required:
        - endpoints
        - path
      type: object
    io.k8s.api.core.v1.HostPathVolumeSource:
      description: Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
      properties:
        path:
          description: 'path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
          type: string
        type:
          description: 'type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
          type: string
      required:
        - path
      type: object
    io.k8s.api.core.v1.ISCSIVolumeSource:
      description: Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
      properties:
        chapAuthDiscovery:
          description: chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
          type: boolean
        chapAuthSession:
          description: chapAuthSession defines whether support iSCSI Session CHAP authentication
          type: boolean
        fsType:
          description: 'fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi'
          type: string
        initiatorName:
          description: initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
          type: string
        iqn:
          description: iqn is the target iSCSI Qualified Name.
          type: string
        iscsiInterface:
          description: iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
          type: string
        lun:
          description: lun represents iSCSI Target Lun number.
          format: int32
          type: integer
        portals:
          description: portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
          items:
            type: string
          type: array
        readOnly:
          description: readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
          type: boolean
        secretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.LocalObjectReference'
          description: secretRef is the CHAP Secret for iSCSI target and initiator authentication
        targetPortal:
          description: targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
          type: string
      required:
        - targetPortal
        - iqn
        - lun
      type: object
    io.k8s.api.core.v1.NFSVolumeSource:
      description: Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
      properties:
        path:
          description: 'path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
          type: string
        readOnly:
          description: 'readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
          type: boolean
        server:
          description: 'server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
          type: string
      required:
        - server
        - path
      type: object
    io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource:
      description: PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
      properties:
        claimName:
          description: 'claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
          type: string
        readOnly:
          description: readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
          type: boolean
      required:
        - claimName
      type: object
    io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource:
      description: Represents a Photon Controller persistent disk resource.
      properties:
        fsType:
          description: fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          type: string
        pdID:
          description: pdID is the ID that identifies Photon Controller persistent disk
          type: string
      required:
        - pdID
      type: object
    io.k8s.api.core.v1.PortworxVolumeSource:
      description: PortworxVolumeSource represents a Portworx volume resource.
      properties:
        fsType:
          description: fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
          type: string
        readOnly:
          description: readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
          type: boolean
        volumeID:
          description: volumeID uniquely identifies a Portworx volume
          type: string
      required:
        - volumeID
      type: object
    io.k8s.api.core.v1.ProjectedVolumeSource:
      description: Represents a projected volume source
      properties:
        defaultMode:
          description: defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
          format: int32
          type: integer
        sources:
          description: sources is the list of volume projections
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.VolumeProjection'
          type: array
      type: object
    io.k8s.api.core.v1.QuobyteVolumeSource:
      description: Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
      properties:
        group:
          description: group to map volume access to Default is no group
          type: string
        readOnly:
          description: readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
          type: boolean
        registry:
          description: registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
          type: string
        tenant:
          description: tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
          type: string
        user:
          description: user to map volume access to Defaults to serivceaccount user
          type: string
        volume:
          description: volume is a string that references an already created Quobyte volume by name.
          type: string
      required:
        - registry
        - volume
      type: object
    io.k8s.api.core.v1.RBDVolumeSource:
      description: Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
      properties:
        fsType:
          description: 'fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd'
          type: string
        image:
          description: 'image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
          type: string
        keyring:
          description: 'keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
          type: string
        monitors:
          description: 'monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
          items:
            type: string
          type: array
        pool:
          description: 'pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
          type: string
        readOnly:
          description: 'readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
          type: boolean
        secretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.LocalObjectReference'
          description: 'secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
        user:
          description: 'user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
          type: string
      required:
        - monitors
        - image
      type: object
    io.k8s.api.core.v1.ScaleIOVolumeSource:
      description: ScaleIOVolumeSource represents a persistent ScaleIO volume
      properties:
        fsType:
          description: fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
          type: string
        gateway:
          description: gateway is the host address of the ScaleIO API Gateway.
          type: string
        protectionDomain:
          description: protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
          type: string
        readOnly:
          description: readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
          type: boolean
        secretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.LocalObjectReference'
          description: secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        sslEnabled:
          description: sslEnabled Flag enable/disable SSL communication with Gateway, default false
          type: boolean
        storageMode:
          description: storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
          type: string
        storagePool:
          description: storagePool is the ScaleIO Storage Pool associated with the protection domain.
          type: string
        system:
          description: system is the name of the storage system as configured in ScaleIO.
          type: string
        volumeName:
          description: volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
          type: string
      required:
        - gateway
        - system
        - secretRef
      type: object
    io.k8s.api.core.v1.SecretVolumeSource:
      description: |-
        Adapts a Secret into a volume.

        The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
      properties:
        defaultMode:
          description: 'defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
          format: int32
          type: integer
        items:
          description: items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.KeyToPath'
          type: array
        optional:
          description: optional field specify whether the Secret or its keys must be defined
          type: boolean
        secretName:
          description: 'secretName is the name of the secret in the pod''s namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
          type: string
      type: object
    io.k8s.api.core.v1.StorageOSVolumeSource:
      description: Represents a StorageOS persistent volume resource.
      properties:
        fsType:
          description: fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          type: string
        readOnly:
          description: readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
          type: boolean
        secretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.LocalObjectReference'
          description: secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        volumeName:
          description: volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
          type: string
        volumeNamespace:
          description: volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
          type: string
      type: object
    io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource:
      description: Represents a vSphere volume resource.
      properties:
        fsType:
          description: fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          type: string
        storagePolicyID:
          description: storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
          type: string
        storagePolicyName:
          description: storagePolicyName is the storage Policy Based Management (SPBM) profile name.
          type: string
        volumePath:
          description: volumePath is the path that identifies vSphere volume vmdk
          type: string
      required:
        - volumePath
      type: object
    io.k8s.api.core.v1.ContainerState:
      description: ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
      properties:
        running:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerStateRunning'
          description: Details about a running container
        terminated:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerStateTerminated'
          description: Details about a terminated container
        waiting:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerStateWaiting'
          description: Details about a waiting container
      type: object
    io.k8s.api.core.v1.PreferredSchedulingTerm:
      description: An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
      properties:
        preference:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NodeSelectorTerm'
          description: A node selector term, associated with the corresponding weight.
        weight:
          description: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
          format: int32
          type: integer
      required:
        - weight
        - preference
      type: object
    io.k8s.api.core.v1.NodeSelector:
      description: A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
      properties:
        nodeSelectorTerms:
          description: Required. A list of node selector terms. The terms are ORed.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.NodeSelectorTerm'
          type: array
      required:
        - nodeSelectorTerms
      type: object
      x-kubernetes-map-type: atomic
    io.k8s.api.core.v1.WeightedPodAffinityTerm:
      description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
      properties:
        podAffinityTerm:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PodAffinityTerm'
          description: Required. A pod affinity term, associated with the corresponding weight.
        weight:
          description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
          format: int32
          type: integer
      required:
        - weight
        - podAffinityTerm
      type: object
    io.k8s.api.core.v1.PodAffinityTerm:
      description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
      properties:
        labelSelector:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
          description: A label query over a set of resources, in this case pods.
        namespaceSelector:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
          description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
        namespaces:
          description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
          items:
            type: string
          type: array
        topologyKey:
          description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
          type: string
      required:
        - topologyKey
      type: object
    io.k8s.api.core.v1.EnvVarSource:
      description: EnvVarSource represents a source for the value of an EnvVar.
      properties:
        configMapKeyRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMapKeySelector'
          description: Selects a key of a ConfigMap.
        fieldRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectFieldSelector'
          description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
        resourceFieldRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceFieldSelector'
          description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
        secretKeyRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SecretKeySelector'
          description: Selects a key of a secret in the pod's namespace
      type: object
    io.k8s.api.core.v1.ConfigMapEnvSource:
      description: |-
        ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.

        The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
      properties:
        name:
          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
          type: string
        optional:
          description: Specify whether the ConfigMap must be defined
          type: boolean
      type: object
    io.k8s.api.core.v1.SecretEnvSource:
      description: |-
        SecretEnvSource selects a Secret to populate the environment variables with.

        The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
      properties:
        name:
          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
          type: string
        optional:
          description: Specify whether the Secret must be defined
          type: boolean
      type: object
    io.k8s.api.core.v1.LifecycleHandler:
      description: LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
      properties:
        exec:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ExecAction'
          description: Exec specifies the action to take.
        httpGet:
          $ref: '#/components/schemas/io.k8s.api.core.v1.HTTPGetAction'
          description: HTTPGet specifies the http request to perform.
        tcpSocket:
          $ref: '#/components/schemas/io.k8s.api.core.v1.TCPSocketAction'
          description: Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
      type: object
    io.k8s.api.core.v1.ExecAction:
      description: ExecAction describes a "run in container" action.
      properties:
        command:
          description: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          items:
            type: string
          type: array
      type: object
    io.k8s.api.core.v1.GRPCAction:
      properties:
        port:
          description: Port number of the gRPC service. Number must be in the range 1 to 65535.
          format: int32
          type: integer
        service:
          description: |-
            Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

            If this is not specified, the default behavior is defined by gRPC.
          type: string
      required:
        - port
      type: object
    io.k8s.api.core.v1.HTTPGetAction:
      description: HTTPGetAction describes an action based on HTTP Get requests.
      properties:
        host:
          description: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
          type: string
        httpHeaders:
          description: Custom headers to set in the request. HTTP allows repeated headers.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.HTTPHeader'
          type: array
        path:
          description: Path to access on the HTTP server.
          type: string
        port:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
          description: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        scheme:
          description: |+
            Scheme to use for connecting to the host. Defaults to HTTP.

          type: string
      required:
        - port
      type: object
    io.k8s.api.core.v1.TCPSocketAction:
      description: TCPSocketAction describes an action based on opening a socket
      properties:
        host:
          description: 'Optional: Host name to connect to, defaults to the pod IP.'
          type: string
        port:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
          description: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
      required:
        - port
      type: object
    io.k8s.api.core.v1.Capabilities:
      description: Adds and removes POSIX capabilities from running containers.
      properties:
        add:
          description: Added capabilities
          items:
            type: string
          type: array
        drop:
          description: Removed capabilities
          items:
            type: string
          type: array
      type: object
    io.k8s.api.core.v1.KeyToPath:
      description: Maps a string key to a path within a volume.
      properties:
        key:
          description: key is the key to project.
          type: string
        mode:
          description: 'mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
          format: int32
          type: integer
        path:
          description: path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
          type: string
      required:
        - key
        - path
      type: object
    io.k8s.api.core.v1.DownwardAPIVolumeFile:
      description: DownwardAPIVolumeFile represents information to create the file containing the pod field
      properties:
        fieldRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectFieldSelector'
          description: 'Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.'
        mode:
          description: 'Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
          format: int32
          type: integer
        path:
          description: 'Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the ''..'' path. Must be utf-8 encoded. The first item of the relative path must not start with ''..'''
          type: string
        resourceFieldRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceFieldSelector'
          description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.'
      required:
        - path
      type: object
    io.k8s.api.core.v1.PersistentVolumeClaimTemplate:
      description: PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
      properties:
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
        spec:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimSpec'
          description: The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
      required:
        - spec
      type: object
    io.k8s.api.core.v1.VolumeProjection:
      description: Projection that may be projected along with other supported volume types
      properties:
        configMap:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMapProjection'
          description: configMap information about the configMap data to project
        downwardAPI:
          $ref: '#/components/schemas/io.k8s.api.core.v1.DownwardAPIProjection'
          description: downwardAPI information about the downwardAPI data to project
        secret:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SecretProjection'
          description: secret information about the secret data to project
        serviceAccountToken:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccountTokenProjection'
          description: serviceAccountToken is information about the serviceAccountToken data to project
      type: object
    io.k8s.api.core.v1.ContainerStateRunning:
      description: ContainerStateRunning is a running state of a container.
      properties:
        startedAt:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: Time at which the container was last (re-)started
      type: object
    io.k8s.api.core.v1.ContainerStateTerminated:
      description: ContainerStateTerminated is a terminated state of a container.
      properties:
        containerID:
          description: Container's ID in the format '<type>://<container_id>'
          type: string
        exitCode:
          description: Exit status from the last termination of the container
          format: int32
          type: integer
        finishedAt:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: Time at which the container last terminated
        message:
          description: Message regarding the last termination of the container
          type: string
        reason:
          description: (brief) reason from the last termination of the container
          type: string
        signal:
          description: Signal from the last termination of the container
          format: int32
          type: integer
        startedAt:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: Time at which previous execution of the container started
      required:
        - exitCode
      type: object
    io.k8s.api.core.v1.ContainerStateWaiting:
      description: ContainerStateWaiting is a waiting state of a container.
      properties:
        message:
          description: Message regarding why the container is not yet running.
          type: string
        reason:
          description: (brief) reason the container is not yet running.
          type: string
      type: object
    io.k8s.api.core.v1.NodeSelectorTerm:
      description: A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
      properties:
        matchExpressions:
          description: A list of node selector requirements by node's labels.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.NodeSelectorRequirement'
          type: array
        matchFields:
          description: A list of node selector requirements by node's fields.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.NodeSelectorRequirement'
          type: array
      type: object
      x-kubernetes-map-type: atomic
    io.k8s.api.core.v1.ConfigMapKeySelector:
      description: Selects a key from a ConfigMap.
      properties:
        key:
          description: The key to select.
          type: string
        name:
          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
          type: string
        optional:
          description: Specify whether the ConfigMap or its key must be defined
          type: boolean
      required:
        - key
      type: object
      x-kubernetes-map-type: atomic
    io.k8s.api.core.v1.ObjectFieldSelector:
      description: ObjectFieldSelector selects an APIVersioned field of an object.
      properties:
        apiVersion:
          description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
          type: string
        fieldPath:
          description: Path of the field to select in the specified API version.
          type: string
      required:
        - fieldPath
      type: object
      x-kubernetes-map-type: atomic
    io.k8s.api.core.v1.ResourceFieldSelector:
      description: ResourceFieldSelector represents container resources (cpu, memory) and their output format
      properties:
        containerName:
          description: 'Container name: required for volumes, optional for env vars'
          type: string
        divisor:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: Specifies the output format of the exposed resources, defaults to "1"
        resource:
          description: 'Required: resource to select'
          type: string
      required:
        - resource
      type: object
      x-kubernetes-map-type: atomic
    io.k8s.api.core.v1.SecretKeySelector:
      description: SecretKeySelector selects a key of a Secret.
      properties:
        key:
          description: The key of the secret to select from.  Must be a valid secret key.
          type: string
        name:
          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
          type: string
        optional:
          description: Specify whether the Secret or its key must be defined
          type: boolean
      required:
        - key
      type: object
      x-kubernetes-map-type: atomic
    io.k8s.api.core.v1.HTTPHeader:
      description: HTTPHeader describes a custom header to be used in HTTP probes
      properties:
        name:
          description: The header field name
          type: string
        value:
          description: The header field value
          type: string
      required:
        - name
        - value
      type: object
    io.k8s.apimachinery.pkg.util.intstr.IntOrString:
      description: IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
      format: int-or-string
      type: string
    io.k8s.api.core.v1.ConfigMapProjection:
      description: |-
        Adapts a ConfigMap into a projected volume.

        The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
      properties:
        items:
          description: items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.KeyToPath'
          type: array
        name:
          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
          type: string
        optional:
          description: optional specify whether the ConfigMap or its keys must be defined
          type: boolean
      type: object
    io.k8s.api.core.v1.DownwardAPIProjection:
      description: Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
      properties:
        items:
          description: Items is a list of DownwardAPIVolume file
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.DownwardAPIVolumeFile'
          type: array
      type: object
    io.k8s.api.core.v1.SecretProjection:
      description: |-
        Adapts a secret into a projected volume.

        The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
      properties:
        items:
          description: items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.KeyToPath'
          type: array
        name:
          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
          type: string
        optional:
          description: optional field specify whether the Secret or its key must be defined
          type: boolean
      type: object
    io.k8s.api.core.v1.ServiceAccountTokenProjection:
      description: ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
      properties:
        audience:
          description: audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
          type: string
        expirationSeconds:
          description: expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
          format: int64
          type: integer
        path:
          description: path is the path relative to the mount point of the file to project the token into.
          type: string
      required:
        - path
      type: object
    io.k8s.api.core.v1.NodeSelectorRequirement:
      description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
      properties:
        key:
          description: The label key that the selector applies to.
          type: string
        operator:
          description: |+
            Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.

          type: string
        values:
          description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
          items:
            type: string
          type: array
      required:
        - key
        - operator
      type: object
    io.k8s.api.policy.v1.Eviction:
      description: Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        deleteOptions:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
          description: DeleteOptions may be provided
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: ObjectMeta describes the pod that is being evicted.
      type: object
      x-kubernetes-group-version-kind:
        - group: policy
          kind: Eviction
          version: v1
    io.k8s.api.core.v1.PodTemplateList:
      description: PodTemplateList is a list of PodTemplates.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: List of pod templates
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplate'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
          description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
      required:
        - items
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: PodTemplateList
          version: v1
    io.k8s.api.core.v1.PodTemplate:
      description: PodTemplate describes a template for creating copies of a predefined pod.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        template:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplateSpec'
          description: Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: PodTemplate
          version: v1
    io.k8s.api.core.v1.PodTemplateSpec:
      description: PodTemplateSpec describes the data a pod should have when created from a template
      properties:
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        spec:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PodSpec'
          description: 'Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
      type: object
    io.k8s.api.core.v1.ReplicationControllerList:
      description: ReplicationControllerList is a collection of replication controllers.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: 'List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationController'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
          description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
      required:
        - items
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: ReplicationControllerList
          version: v1
    io.k8s.api.core.v1.ReplicationController:
      description: ReplicationController represents the configuration of a replication controller.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        spec:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationControllerSpec'
          description: 'Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
        status:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationControllerStatus'
          description: 'Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: ReplicationController
          version: v1
    io.k8s.api.core.v1.ReplicationControllerSpec:
      description: ReplicationControllerSpec is the specification of a replication controller.
      properties:
        minReadySeconds:
          description: Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
          format: int32
          type: integer
        replicas:
          description: 'Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller'
          format: int32
          type: integer
        selector:
          additionalProperties:
            type: string
          description: 'Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
          type: object
          x-kubernetes-map-type: atomic
        template:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PodTemplateSpec'
          description: 'Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template'
      type: object
    io.k8s.api.core.v1.ReplicationControllerStatus:
      description: ReplicationControllerStatus represents the current status of a replication controller.
      properties:
        availableReplicas:
          description: The number of available replicas (ready for at least minReadySeconds) for this replication controller.
          format: int32
          type: integer
        conditions:
          description: Represents the latest available observations of a replication controller's current state.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ReplicationControllerCondition'
          type: array
          x-kubernetes-patch-merge-key: type
          x-kubernetes-patch-strategy: merge
        fullyLabeledReplicas:
          description: The number of pods that have labels matching the labels of the pod template of the replication controller.
          format: int32
          type: integer
        observedGeneration:
          description: ObservedGeneration reflects the generation of the most recently observed replication controller.
          format: int64
          type: integer
        readyReplicas:
          description: The number of ready replicas for this replication controller.
          format: int32
          type: integer
        replicas:
          description: 'Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller'
          format: int32
          type: integer
      required:
        - replicas
      type: object
    io.k8s.api.core.v1.ReplicationControllerCondition:
      description: ReplicationControllerCondition describes the state of a replication controller at a certain point.
      properties:
        lastTransitionTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: The last time the condition transitioned from one status to another.
        message:
          description: A human readable message indicating details about the transition.
          type: string
        reason:
          description: The reason for the condition's last transition.
          type: string
        status:
          description: Status of the condition, one of True, False, Unknown.
          type: string
        type:
          description: Type of replication controller condition.
          type: string
      required:
        - type
        - status
      type: object
    io.k8s.api.autoscaling.v1.Scale:
      description: Scale represents a scaling request for a resource.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.'
        spec:
          $ref: '#/components/schemas/io.k8s.api.autoscaling.v1.ScaleSpec'
          description: 'defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.'
        status:
          $ref: '#/components/schemas/io.k8s.api.autoscaling.v1.ScaleStatus'
          description: 'current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.'
      type: object
      x-kubernetes-group-version-kind:
        - group: autoscaling
          kind: Scale
          version: v1
    io.k8s.api.autoscaling.v1.ScaleSpec:
      description: ScaleSpec describes the attributes of a scale subresource.
      properties:
        replicas:
          description: desired number of instances for the scaled object.
          format: int32
          type: integer
      type: object
    io.k8s.api.autoscaling.v1.ScaleStatus:
      description: ScaleStatus represents the current status of a scale subresource.
      properties:
        replicas:
          description: actual number of observed instances of the scaled object.
          format: int32
          type: integer
        selector:
          description: 'label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors'
          type: string
      required:
        - replicas
      type: object
    io.k8s.api.core.v1.ResourceQuotaList:
      description: ResourceQuotaList is a list of ResourceQuota items.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: 'Items is a list of ResourceQuota objects. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
          description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
      required:
        - items
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: ResourceQuotaList
          version: v1
    io.k8s.api.core.v1.ResourceQuota:
      description: ResourceQuota sets aggregate quota restrictions enforced per namespace
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        spec:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaSpec'
          description: Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        status:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaStatus'
          description: Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: ResourceQuota
          version: v1
    io.k8s.api.core.v1.ResourceQuotaSpec:
      description: ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
      properties:
        hard:
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: 'hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/'
          type: object
        scopeSelector:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ScopeSelector'
          description: scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
        scopes:
          description: A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
          items:
            type: string
          type: array
      type: object
    io.k8s.api.core.v1.ResourceQuotaStatus:
      description: ResourceQuotaStatus defines the enforced hard limits and observed use.
      properties:
        hard:
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: 'Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/'
          type: object
        used:
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: Used is the current observed total usage of the resource in the namespace.
          type: object
      type: object
    io.k8s.api.core.v1.ScopeSelector:
      description: A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
      properties:
        matchExpressions:
          description: A list of scope selector requirements by scope of the resources.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ScopedResourceSelectorRequirement'
          type: array
      type: object
      x-kubernetes-map-type: atomic
    io.k8s.api.core.v1.ScopedResourceSelectorRequirement:
      description: A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
      properties:
        operator:
          description: |+
            Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.

          type: string
        scopeName:
          description: |+
            The name of the scope that the selector applies to.

          type: string
        values:
          description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
          items:
            type: string
          type: array
      required:
        - scopeName
        - operator
      type: object
    io.k8s.api.core.v1.SecretList:
      description: SecretList is a list of Secret.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: 'Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.Secret'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
          description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
      required:
        - items
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: SecretList
          version: v1
    io.k8s.api.core.v1.Secret:
      description: Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        data:
          additionalProperties:
            format: byte
            type: string
          description: Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
          type: object
        immutable:
          description: Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
          type: boolean
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        stringData:
          additionalProperties:
            type: string
          description: stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
          type: object
        type:
          description: 'Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types'
          type: string
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: Secret
          version: v1
    io.k8s.api.core.v1.ServiceAccountList:
      description: ServiceAccountList is a list of ServiceAccount objects
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: 'List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
          description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
      required:
        - items
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: ServiceAccountList
          version: v1
    io.k8s.api.core.v1.ServiceAccount:
      description: 'ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets'
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        automountServiceAccountToken:
          description: AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
          type: boolean
        imagePullSecrets:
          description: 'ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.LocalObjectReference'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        secrets:
          description: 'Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a "kubernetes.io/enforce-mountable-secrets" annotation set to "true". This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
          type: array
          x-kubernetes-patch-merge-key: name
          x-kubernetes-patch-strategy: merge
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: ServiceAccount
          version: v1
    io.k8s.api.authentication.v1.TokenRequest:
      description: TokenRequest requests a token for a given service account.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        spec:
          $ref: '#/components/schemas/io.k8s.api.authentication.v1.TokenRequestSpec'
          description: Spec holds information about the request being evaluated
        status:
          $ref: '#/components/schemas/io.k8s.api.authentication.v1.TokenRequestStatus'
          description: Status is filled in by the server and indicates whether the token can be authenticated.
      required:
        - spec
      type: object
      x-kubernetes-group-version-kind:
        - group: authentication.k8s.io
          kind: TokenRequest
          version: v1
    io.k8s.api.authentication.v1.TokenRequestSpec:
      description: TokenRequestSpec contains client provided parameters of a token request.
      properties:
        audiences:
          description: Audiences are the intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
          items:
            type: string
          type: array
        boundObjectRef:
          $ref: '#/components/schemas/io.k8s.api.authentication.v1.BoundObjectReference'
          description: 'BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server''s TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.'
        expirationSeconds:
          description: ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
          format: int64
          type: integer
      required:
        - audiences
      type: object
    io.k8s.api.authentication.v1.TokenRequestStatus:
      description: TokenRequestStatus is the result of a token request.
      properties:
        expirationTimestamp:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: ExpirationTimestamp is the time of expiration of the returned token.
        token:
          description: Token is the opaque bearer token.
          type: string
      required:
        - token
        - expirationTimestamp
      type: object
    io.k8s.api.authentication.v1.BoundObjectReference:
      description: BoundObjectReference is a reference to an object that a token is bound to.
      properties:
        apiVersion:
          description: API version of the referent.
          type: string
        kind:
          description: Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
          type: string
        name:
          description: Name of the referent.
          type: string
        uid:
          description: UID of the referent.
          type: string
      type: object
    io.k8s.api.core.v1.ServiceList:
      description: ServiceList holds a list of services.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: List of services
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.Service'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
          description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
      required:
        - items
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: ServiceList
          version: v1
    io.k8s.api.core.v1.Service:
      description: Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        spec:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceSpec'
          description: Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        status:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceStatus'
          description: 'Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: Service
          version: v1
    io.k8s.api.core.v1.ServiceSpec:
      description: ServiceSpec describes the attributes that a user creates on a service.
      properties:
        allocateLoadBalancerNodePorts:
          description: allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.
          type: boolean
        clusterIP:
          description: 'clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
          type: string
        clusterIPs:
          description: |-
            ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.

            This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
          items:
            type: string
          type: array
          x-kubernetes-list-type: atomic
        externalIPs:
          description: externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
          items:
            type: string
          type: array
        externalName:
          description: externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
          type: string
        externalTrafficPolicy:
          description: |+
            externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.

          type: string
        healthCheckNodePort:
          description: healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
          format: int32
          type: integer
        internalTrafficPolicy:
          description: InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
          type: string
        ipFamilies:
          description: |-
            IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.

            This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
          items:
            type: string
          type: array
          x-kubernetes-list-type: atomic
        ipFamilyPolicy:
          description: IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
          type: string
        loadBalancerClass:
          description: loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
          type: string
        loadBalancerIP:
          description: 'Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations, and it cannot support dual-stack. As of Kubernetes v1.24, users are encouraged to use implementation-specific annotations when available. This field may be removed in a future API version.'
          type: string
        loadBalancerSourceRanges:
          description: 'If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/'
          items:
            type: string
          type: array
        ports:
          description: 'The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ServicePort'
          type: array
          x-kubernetes-list-map-keys:
            - port
            - protocol
          x-kubernetes-list-type: map
          x-kubernetes-patch-merge-key: port
          x-kubernetes-patch-strategy: merge
        publishNotReadyAddresses:
          description: publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
          type: boolean
        selector:
          additionalProperties:
            type: string
          description: 'Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/'
          type: object
          x-kubernetes-map-type: atomic
        sessionAffinity:
          description: |+
            Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies

          type: string
        sessionAffinityConfig:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SessionAffinityConfig'
          description: sessionAffinityConfig contains the configurations of session affinity.
        type:
          description: |+
            type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types

          type: string
      type: object
    io.k8s.api.core.v1.ServiceStatus:
      description: ServiceStatus represents the current status of a service.
      properties:
        conditions:
          description: Current service state
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Condition'
          type: array
          x-kubernetes-list-map-keys:
            - type
          x-kubernetes-list-type: map
          x-kubernetes-patch-merge-key: type
          x-kubernetes-patch-strategy: merge
        loadBalancer:
          $ref: '#/components/schemas/io.k8s.api.core.v1.LoadBalancerStatus'
          description: LoadBalancer contains the current status of the load-balancer, if one is present.
      type: object
    io.k8s.api.core.v1.ServicePort:
      description: ServicePort contains information on service's port.
      properties:
        appProtocol:
          description: The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
          type: string
        name:
          description: The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
          type: string
        nodePort:
          description: 'The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
          format: int32
          type: integer
        port:
          description: The port that will be exposed by this service.
          format: int32
          type: integer
        protocol:
          description: |+
            The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.

          type: string
        targetPort:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
          description: 'Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod''s container ports. If this is not specified, the value of the ''port'' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the ''port'' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
      required:
        - port
      type: object
    io.k8s.api.core.v1.SessionAffinityConfig:
      description: SessionAffinityConfig represents the configurations of session affinity.
      properties:
        clientIP:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ClientIPConfig'
          description: clientIP contains the configurations of Client IP based session affinity.
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.Condition:
      description: Condition contains details for one aspect of the current state of this API Resource.
      properties:
        lastTransitionTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        message:
          description: message is a human readable message indicating details about the transition. This may be an empty string.
          type: string
        observedGeneration:
          description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
          format: int64
          type: integer
        reason:
          description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
          type: string
        status:
          description: status of the condition, one of True, False, Unknown.
          type: string
        type:
          description: type of condition in CamelCase or in foo.example.com/CamelCase.
          type: string
      required:
        - type
        - status
        - lastTransitionTime
        - reason
        - message
      type: object
    io.k8s.api.core.v1.LoadBalancerStatus:
      description: LoadBalancerStatus represents the status of a load-balancer.
      properties:
        ingress:
          description: Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.LoadBalancerIngress'
          type: array
      type: object
    io.k8s.api.core.v1.ClientIPConfig:
      description: ClientIPConfig represents the configurations of Client IP based session affinity.
      properties:
        timeoutSeconds:
          description: timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
          format: int32
          type: integer
      type: object
    io.k8s.api.core.v1.LoadBalancerIngress:
      description: 'LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.'
      properties:
        hostname:
          description: Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
          type: string
        ip:
          description: IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
          type: string
        ports:
          description: Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.PortStatus'
          type: array
          x-kubernetes-list-type: atomic
      type: object
    io.k8s.api.core.v1.PortStatus:
      properties:
        error:
          description: |-
            Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
              CamelCase names
            - cloud provider specific error values must have names that comply with the
              format foo.example.com/CamelCase.
          type: string
        port:
          description: Port is the port number of the service port of which status is recorded here
          format: int32
          type: integer
        protocol:
          description: |+
            Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"

          type: string
      required:
        - port
        - protocol
      type: object
    io.k8s.api.core.v1.NodeList:
      description: NodeList is the whole list of all Nodes which have been registered with master.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: List of nodes
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
          description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
      required:
        - items
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: NodeList
          version: v1
    io.k8s.api.core.v1.Node:
      description: Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        spec:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NodeSpec'
          description: Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        status:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NodeStatus'
          description: 'Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: Node
          version: v1
    io.k8s.api.core.v1.NodeSpec:
      description: NodeSpec describes the attributes that a node is created with.
      properties:
        configSource:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NodeConfigSource'
          description: 'Deprecated: Previously used to specify the source of the node''s configuration for the DynamicKubeletConfig feature. This feature is removed from Kubelets as of 1.24 and will be fully removed in 1.26.'
        externalID:
          description: 'Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966'
          type: string
        podCIDR:
          description: PodCIDR represents the pod IP range assigned to the node.
          type: string
        podCIDRs:
          description: podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
          items:
            type: string
          type: array
          x-kubernetes-patch-strategy: merge
        providerID:
          description: 'ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>'
          type: string
        taints:
          description: If specified, the node's taints.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.Taint'
          type: array
        unschedulable:
          description: 'Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration'
          type: boolean
      type: object
    io.k8s.api.core.v1.NodeStatus:
      description: NodeStatus is information about the current status of a node.
      properties:
        addresses:
          description: 'List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.NodeAddress'
          type: array
          x-kubernetes-patch-merge-key: type
          x-kubernetes-patch-strategy: merge
        allocatable:
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
          type: object
        capacity:
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: 'Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity'
          type: object
        conditions:
          description: 'Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.NodeCondition'
          type: array
          x-kubernetes-patch-merge-key: type
          x-kubernetes-patch-strategy: merge
        config:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NodeConfigStatus'
          description: Status of the config assigned to the node via the dynamic Kubelet config feature.
        daemonEndpoints:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NodeDaemonEndpoints'
          description: Endpoints of daemons running on the Node.
        images:
          description: List of container images on this node
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.ContainerImage'
          type: array
        nodeInfo:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NodeSystemInfo'
          description: 'Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info'
        phase:
          description: |+
            NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.

          type: string
        volumesAttached:
          description: List of volumes that are attached to the node.
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.AttachedVolume'
          type: array
        volumesInUse:
          description: List of attachable volumes in use (mounted) by the node.
          items:
            type: string
          type: array
      type: object
    io.k8s.api.core.v1.NodeConfigSource:
      description: NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
      properties:
        configMap:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMapNodeConfigSource'
          description: ConfigMap is a reference to a Node's ConfigMap
      type: object
    io.k8s.api.core.v1.Taint:
      description: The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
      properties:
        effect:
          description: |+
            Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.

          type: string
        key:
          description: Required. The taint key to be applied to a node.
          type: string
        timeAdded:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
        value:
          description: The taint value corresponding to the taint key.
          type: string
      required:
        - key
        - effect
      type: object
    io.k8s.api.core.v1.NodeAddress:
      description: NodeAddress contains information for the node's address.
      properties:
        address:
          description: The node address.
          type: string
        type:
          description: Node address type, one of Hostname, ExternalIP or InternalIP.
          type: string
      required:
        - type
        - address
      type: object
    io.k8s.api.core.v1.NodeCondition:
      description: NodeCondition contains condition information for a node.
      properties:
        lastHeartbeatTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: Last time we got an update on a given condition.
        lastTransitionTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: Last time the condition transit from one status to another.
        message:
          description: Human readable message indicating details about last transition.
          type: string
        reason:
          description: (brief) reason for the condition's last transition.
          type: string
        status:
          description: Status of the condition, one of True, False, Unknown.
          type: string
        type:
          description: Type of node condition.
          type: string
      required:
        - type
        - status
      type: object
    io.k8s.api.core.v1.NodeConfigStatus:
      description: NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
      properties:
        active:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NodeConfigSource'
          description: Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
        assigned:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NodeConfigSource'
          description: Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
        error:
          description: Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
          type: string
        lastKnownGood:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NodeConfigSource'
          description: LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
      type: object
    io.k8s.api.core.v1.NodeDaemonEndpoints:
      description: NodeDaemonEndpoints lists ports opened by daemons running on the Node.
      properties:
        kubeletEndpoint:
          $ref: '#/components/schemas/io.k8s.api.core.v1.DaemonEndpoint'
          description: Endpoint on which Kubelet is listening.
      type: object
    io.k8s.api.core.v1.ContainerImage:
      description: Describe a container image
      properties:
        names:
          description: Names by which this image is known. e.g. ["k8s.gcr.io/hyperkube:v1.0.7", "dockerhub.io/google_containers/hyperkube:v1.0.7"]
          items:
            type: string
          type: array
        sizeBytes:
          description: The size of the image in bytes.
          format: int64
          type: integer
      type: object
    io.k8s.api.core.v1.NodeSystemInfo:
      description: NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
      properties:
        architecture:
          description: The Architecture reported by the node
          type: string
        bootID:
          description: Boot ID reported by the node.
          type: string
        containerRuntimeVersion:
          description: ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
          type: string
        kernelVersion:
          description: Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
          type: string
        kubeProxyVersion:
          description: KubeProxy Version reported by the node.
          type: string
        kubeletVersion:
          description: Kubelet Version reported by the node.
          type: string
        machineID:
          description: 'MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html'
          type: string
        operatingSystem:
          description: The Operating System reported by the node
          type: string
        osImage:
          description: OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
          type: string
        systemUUID:
          description: SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
          type: string
      required:
        - machineID
        - systemUUID
        - bootID
        - kernelVersion
        - osImage
        - containerRuntimeVersion
        - kubeletVersion
        - kubeProxyVersion
        - operatingSystem
        - architecture
      type: object
    io.k8s.api.core.v1.AttachedVolume:
      description: AttachedVolume describes a volume attached to a node
      properties:
        devicePath:
          description: DevicePath represents the device path where the volume should be available
          type: string
        name:
          description: Name of the attached volume
          type: string
      required:
        - name
        - devicePath
      type: object
    io.k8s.api.core.v1.ConfigMapNodeConfigSource:
      description: 'ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration'
      properties:
        kubeletConfigKey:
          description: KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
          type: string
        name:
          description: Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
          type: string
        namespace:
          description: Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
          type: string
        resourceVersion:
          description: ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
          type: string
        uid:
          description: UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
          type: string
      required:
        - namespace
        - name
        - kubeletConfigKey
      type: object
    io.k8s.api.core.v1.DaemonEndpoint:
      description: DaemonEndpoint contains information about a single Daemon endpoint.
      properties:
        Port:
          description: Port number of the given endpoint.
          format: int32
          type: integer
      required:
        - Port
      type: object
    io.k8s.api.core.v1.PersistentVolumeList:
      description: PersistentVolumeList is a list of PersistentVolume items.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        items:
          description: 'items is a list of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes'
          items:
            $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
          description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
      required:
        - items
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: PersistentVolumeList
          version: v1
    io.k8s.api.core.v1.PersistentVolume:
      description: 'PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes'
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        spec:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeSpec'
          description: 'spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes'
        status:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolumeStatus'
          description: 'status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes'
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: PersistentVolume
          version: v1
    io.k8s.api.core.v1.PersistentVolumeSpec:
      description: PersistentVolumeSpec is the specification of a persistent volume.
      properties:
        accessModes:
          description: 'accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes'
          items:
            type: string
          type: array
        awsElasticBlockStore:
          $ref: '#/components/schemas/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource'
          description: 'awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet''s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
        azureDisk:
          $ref: '#/components/schemas/io.k8s.api.core.v1.AzureDiskVolumeSource'
          description: azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        azureFile:
          $ref: '#/components/schemas/io.k8s.api.core.v1.AzureFilePersistentVolumeSource'
          description: azureFile represents an Azure File Service mount on the host and bind mount to the pod.
        capacity:
          additionalProperties:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity'
          description: 'capacity is the description of the persistent volume''s resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity'
          type: object
        cephfs:
          $ref: '#/components/schemas/io.k8s.api.core.v1.CephFSPersistentVolumeSource'
          description: cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        cinder:
          $ref: '#/components/schemas/io.k8s.api.core.v1.CinderPersistentVolumeSource'
          description: 'cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
        claimRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
          description: 'claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding'
        csi:
          $ref: '#/components/schemas/io.k8s.api.core.v1.CSIPersistentVolumeSource'
          description: csi represents storage that is handled by an external CSI driver (Beta feature).
        fc:
          $ref: '#/components/schemas/io.k8s.api.core.v1.FCVolumeSource'
          description: fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        flexVolume:
          $ref: '#/components/schemas/io.k8s.api.core.v1.FlexPersistentVolumeSource'
          description: flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        flocker:
          $ref: '#/components/schemas/io.k8s.api.core.v1.FlockerVolumeSource'
          description: flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
        gcePersistentDisk:
          $ref: '#/components/schemas/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource'
          description: 'gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet''s host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
        glusterfs:
          $ref: '#/components/schemas/io.k8s.api.core.v1.GlusterfsPersistentVolumeSource'
          description: 'glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md'
        hostPath:
          $ref: '#/components/schemas/io.k8s.api.core.v1.HostPathVolumeSource'
          description: 'hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
        iscsi:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ISCSIPersistentVolumeSource'
          description: iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
        local:
          $ref: '#/components/schemas/io.k8s.api.core.v1.LocalVolumeSource'
          description: local represents directly-attached storage with node affinity
        mountOptions:
          description: 'mountOptions is the list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options'
          items:
            type: string
          type: array
        nfs:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NFSVolumeSource'
          description: 'nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
        nodeAffinity:
          $ref: '#/components/schemas/io.k8s.api.core.v1.VolumeNodeAffinity'
          description: nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
        persistentVolumeReclaimPolicy:
          description: |+
            persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming

          type: string
        photonPersistentDisk:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource'
          description: photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        portworxVolume:
          $ref: '#/components/schemas/io.k8s.api.core.v1.PortworxVolumeSource'
          description: portworxVolume represents a portworx volume attached and mounted on kubelets host machine
        quobyte:
          $ref: '#/components/schemas/io.k8s.api.core.v1.QuobyteVolumeSource'
          description: quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        rbd:
          $ref: '#/components/schemas/io.k8s.api.core.v1.RBDPersistentVolumeSource'
          description: 'rbd represents a Rados Block Device mount on the host that shares a pod''s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md'
        scaleIO:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ScaleIOPersistentVolumeSource'
          description: scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        storageClassName:
          description: storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
          type: string
        storageos:
          $ref: '#/components/schemas/io.k8s.api.core.v1.StorageOSPersistentVolumeSource'
          description: 'storageOS represents a StorageOS volume that is attached to the kubelet''s host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md'
        volumeMode:
          description: volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
          type: string
        vsphereVolume:
          $ref: '#/components/schemas/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource'
          description: vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
      type: object
    io.k8s.api.core.v1.PersistentVolumeStatus:
      description: PersistentVolumeStatus is the current status of a persistent volume.
      properties:
        message:
          description: message is a human-readable message indicating details about why the volume is in this state.
          type: string
        phase:
          description: |+
            phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase

          type: string
        reason:
          description: reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
          type: string
      type: object
    io.k8s.api.core.v1.AzureFilePersistentVolumeSource:
      description: AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
      properties:
        readOnly:
          description: readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
          type: boolean
        secretName:
          description: secretName is the name of secret that contains Azure Storage Account Name and Key
          type: string
        secretNamespace:
          description: secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
          type: string
        shareName:
          description: shareName is the azure Share Name
          type: string
      required:
        - secretName
        - shareName
      type: object
    io.k8s.api.core.v1.CephFSPersistentVolumeSource:
      description: Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
      properties:
        monitors:
          description: 'monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
          items:
            type: string
          type: array
        path:
          description: 'path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /'
          type: string
        readOnly:
          description: 'readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
          type: boolean
        secretFile:
          description: 'secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
          type: string
        secretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SecretReference'
          description: 'secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
        user:
          description: 'user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
          type: string
      required:
        - monitors
      type: object
    io.k8s.api.core.v1.CinderPersistentVolumeSource:
      description: Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
      properties:
        fsType:
          description: 'fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
          type: string
        readOnly:
          description: 'readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
          type: boolean
        secretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SecretReference'
          description: 'secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.'
        volumeID:
          description: 'volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
          type: string
      required:
        - volumeID
      type: object
    io.k8s.api.core.v1.CSIPersistentVolumeSource:
      description: Represents storage that is managed by an external CSI volume driver (Beta feature)
      properties:
        controllerExpandSecretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SecretReference'
          description: controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
        controllerPublishSecretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SecretReference'
          description: controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
        driver:
          description: driver is the name of the driver to use for this volume. Required.
          type: string
        fsType:
          description: fsType to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
          type: string
        nodePublishSecretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SecretReference'
          description: nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
        nodeStageSecretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SecretReference'
          description: nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
        readOnly:
          description: readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
          type: boolean
        volumeAttributes:
          additionalProperties:
            type: string
          description: volumeAttributes of the volume to publish.
          type: object
        volumeHandle:
          description: volumeHandle is the unique volume name returned by the CSI volume pluginΓÇÖs CreateVolume to refer to the volume on all subsequent calls. Required.
          type: string
      required:
        - driver
        - volumeHandle
      type: object
    io.k8s.api.core.v1.FlexPersistentVolumeSource:
      description: FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
      properties:
        driver:
          description: driver is the name of the driver to use for this volume.
          type: string
        fsType:
          description: fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
          type: string
        options:
          additionalProperties:
            type: string
          description: 'options is Optional: this field holds extra command options if any.'
          type: object
        readOnly:
          description: 'readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.'
          type: boolean
        secretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SecretReference'
          description: 'secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.'
      required:
        - driver
      type: object
    io.k8s.api.core.v1.GlusterfsPersistentVolumeSource:
      description: Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
      properties:
        endpoints:
          description: 'endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
          type: string
        endpointsNamespace:
          description: 'endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
          type: string
        path:
          description: 'path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
          type: string
        readOnly:
          description: 'readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
          type: boolean
      required:
        - endpoints
        - path
      type: object
    io.k8s.api.core.v1.ISCSIPersistentVolumeSource:
      description: ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
      properties:
        chapAuthDiscovery:
          description: chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
          type: boolean
        chapAuthSession:
          description: chapAuthSession defines whether support iSCSI Session CHAP authentication
          type: boolean
        fsType:
          description: 'fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi'
          type: string
        initiatorName:
          description: initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
          type: string
        iqn:
          description: iqn is Target iSCSI Qualified Name.
          type: string
        iscsiInterface:
          description: iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
          type: string
        lun:
          description: lun is iSCSI Target Lun number.
          format: int32
          type: integer
        portals:
          description: portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
          items:
            type: string
          type: array
        readOnly:
          description: readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
          type: boolean
        secretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SecretReference'
          description: secretRef is the CHAP Secret for iSCSI target and initiator authentication
        targetPortal:
          description: targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
          type: string
      required:
        - targetPortal
        - iqn
        - lun
      type: object
    io.k8s.api.core.v1.LocalVolumeSource:
      description: Local represents directly-attached storage with node affinity (Beta feature)
      properties:
        fsType:
          description: fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
          type: string
        path:
          description: path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
          type: string
      required:
        - path
      type: object
    io.k8s.api.core.v1.VolumeNodeAffinity:
      description: VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
      properties:
        required:
          $ref: '#/components/schemas/io.k8s.api.core.v1.NodeSelector'
          description: required specifies hard node constraints that must be met.
      type: object
    io.k8s.api.core.v1.RBDPersistentVolumeSource:
      description: Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
      properties:
        fsType:
          description: 'fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd'
          type: string
        image:
          description: 'image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
          type: string
        keyring:
          description: 'keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
          type: string
        monitors:
          description: 'monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
          items:
            type: string
          type: array
        pool:
          description: 'pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
          type: string
        readOnly:
          description: 'readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
          type: boolean
        secretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SecretReference'
          description: 'secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
        user:
          description: 'user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
          type: string
      required:
        - monitors
        - image
      type: object
    io.k8s.api.core.v1.ScaleIOPersistentVolumeSource:
      description: ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
      properties:
        fsType:
          description: fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
          type: string
        gateway:
          description: gateway is the host address of the ScaleIO API Gateway.
          type: string
        protectionDomain:
          description: protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
          type: string
        readOnly:
          description: readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
          type: boolean
        secretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.SecretReference'
          description: secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        sslEnabled:
          description: sslEnabled is the flag to enable/disable SSL communication with Gateway, default false
          type: boolean
        storageMode:
          description: storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
          type: string
        storagePool:
          description: storagePool is the ScaleIO Storage Pool associated with the protection domain.
          type: string
        system:
          description: system is the name of the storage system as configured in ScaleIO.
          type: string
        volumeName:
          description: volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
          type: string
      required:
        - gateway
        - system
        - secretRef
      type: object
    io.k8s.api.core.v1.StorageOSPersistentVolumeSource:
      description: Represents a StorageOS persistent volume resource.
      properties:
        fsType:
          description: fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          type: string
        readOnly:
          description: readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
          type: boolean
        secretRef:
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
          description: secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        volumeName:
          description: volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
          type: string
        volumeNamespace:
          description: volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
          type: string
      type: object
    io.k8s.api.core.v1.SecretReference:
      description: SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
      properties:
        name:
          description: name is unique within a namespace to reference a secret resource.
          type: string
        namespace:
          description: namespace defines the space within which the secret name must be unique.
          type: string
      type: object
      x-kubernetes-map-type: atomic
    io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent:
      description: Event represents a single event to a watched resource.
      properties:
        object:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.runtime.RawExtension'
          description: |-
            Object is:
             * If Type is Added or Modified: the new state of the object.
             * If Type is Deleted: the state of the object immediately before deletion.
             * If Type is Error: *Status is recommended; other types may make sense
               depending on context.
        type:
          type: string
      required:
        - type
        - object
      type: object
      x-kubernetes-group-version-kind:
        - group: ''
          kind: WatchEvent
          version: v1
        - group: admission.k8s.io
          kind: WatchEvent
          version: v1
        - group: admission.k8s.io
          kind: WatchEvent
          version: v1beta1
        - group: admissionregistration.k8s.io
          kind: WatchEvent
          version: v1
        - group: admissionregistration.k8s.io
          kind: WatchEvent
          version: v1beta1
        - group: apiextensions.k8s.io
          kind: WatchEvent
          version: v1
        - group: apiextensions.k8s.io
          kind: WatchEvent
          version: v1beta1
        - group: apiregistration.k8s.io
          kind: WatchEvent
          version: v1
        - group: apiregistration.k8s.io
          kind: WatchEvent
          version: v1beta1
        - group: apps
          kind: WatchEvent
          version: v1
        - group: apps
          kind: WatchEvent
          version: v1beta1
        - group: apps
          kind: WatchEvent
          version: v1beta2
        - group: authentication.k8s.io
          kind: WatchEvent
          version: v1
        - group: authentication.k8s.io
          kind: WatchEvent
          version: v1beta1
        - group: authorization.k8s.io
          kind: WatchEvent
          version: v1
        - group: authorization.k8s.io
          kind: WatchEvent
          version: v1beta1
        - group: autoscaling
          kind: WatchEvent
          version: v1
        - group: autoscaling
          kind: WatchEvent
          version: v2
        - group: autoscaling
          kind: WatchEvent
          version: v2beta1
        - group: autoscaling
          kind: WatchEvent
          version: v2beta2
        - group: batch
          kind: WatchEvent
          version: v1
        - group: batch
          kind: WatchEvent
          version: v1beta1
        - group: certificates.k8s.io
          kind: WatchEvent
          version: v1
        - group: certificates.k8s.io
          kind: WatchEvent
          version: v1beta1
        - group: coordination.k8s.io
          kind: WatchEvent
          version: v1
        - group: coordination.k8s.io
          kind: WatchEvent
          version: v1beta1
        - group: discovery.k8s.io
          kind: WatchEvent
          version: v1
        - group: discovery.k8s.io
          kind: WatchEvent
          version: v1beta1
        - group: events.k8s.io
          kind: WatchEvent
          version: v1
        - group: events.k8s.io
          kind: WatchEvent
          version: v1beta1
        - group: extensions
          kind: WatchEvent
          version: v1beta1
        - group: flowcontrol.apiserver.k8s.io
          kind: WatchEvent
          version: v1alpha1
        - group: flowcontrol.apiserver.k8s.io
          kind: WatchEvent
          version: v1beta1
        - group: flowcontrol.apiserver.k8s.io
          kind: WatchEvent
          version: v1beta2
        - group: imagepolicy.k8s.io
          kind: WatchEvent
          version: v1alpha1
        - group: internal.apiserver.k8s.io
          kind: WatchEvent
          version: v1alpha1
        - group: networking.k8s.io
          kind: WatchEvent
          version: v1
        - group: networking.k8s.io
          kind: WatchEvent
          version: v1beta1
        - group: node.k8s.io
          kind: WatchEvent
          version: v1
        - group: node.k8s.io
          kind: WatchEvent
          version: v1alpha1
        - group: node.k8s.io
          kind: WatchEvent
          version: v1beta1
        - group: policy
          kind: WatchEvent
          version: v1
        - group: policy
          kind: WatchEvent
          version: v1beta1
        - group: rbac.authorization.k8s.io
          kind: WatchEvent
          version: v1
        - group: rbac.authorization.k8s.io
          kind: WatchEvent
          version: v1alpha1
        - group: rbac.authorization.k8s.io
          kind: WatchEvent
          version: v1beta1
        - group: scheduling.k8s.io
          kind: WatchEvent
          version: v1
        - group: scheduling.k8s.io
          kind: WatchEvent
          version: v1alpha1
        - group: scheduling.k8s.io
          kind: WatchEvent
          version: v1beta1
        - group: storage.k8s.io
          kind: WatchEvent
          version: v1
        - group: storage.k8s.io
          kind: WatchEvent
          version: v1alpha1
        - group: storage.k8s.io
          kind: WatchEvent
          version: v1beta1
    io.k8s.apimachinery.pkg.runtime.RawExtension:
      description: "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
      type: object
  parameters: {}
  responses: {}
  securitySchemes: {}
  callbacks: {}
  examples: {}
  requestBodies:
    io.k8s.api.core.v1.Namespace:
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace'
      required: true
    io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions:
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
    io.k8s.api.core.v1.Node:
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/io.k8s.api.core.v1.Node'
      required: true
    io.k8s.api.core.v1.PersistentVolume:
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/io.k8s.api.core.v1.PersistentVolume'
      required: true
  headers: {}
  links: {}
  x-stackQL-resources:
    core_v1:
      id: k8s.core_v1.core_v1
      name: core_v1
      title: Core_v1
      methods:
        getCoreV1APIResources:
          operation:
            $ref: '#/paths/~1api~1v1~1/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/core_v1/methods/getCoreV1APIResources'
        insert: []
        update: []
        delete: []
    component_status:
      id: k8s.core_v1.component_status
      name: component_status
      title: Component_status
      methods:
        listCoreV1ComponentStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1componentstatuses/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        readCoreV1ComponentStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1componentstatuses~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/component_status/methods/readCoreV1ComponentStatus'
          - $ref: '#/components/x-stackQL-resources/component_status/methods/listCoreV1ComponentStatus'
        insert: []
        update: []
        delete: []
    config_map:
      id: k8s.core_v1.config_map
      name: config_map
      title: Config_map
      methods:
        listCoreV1ConfigMapForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1configmaps/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteCoreV1CollectionNamespacedConfigMap:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1configmaps/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        listCoreV1NamespacedConfigMap:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1configmaps/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createCoreV1NamespacedConfigMap:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1configmaps/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        deleteCoreV1NamespacedConfigMap:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1configmaps~1{name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        readCoreV1NamespacedConfigMap:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1configmaps~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedConfigMap:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1configmaps~1{name}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedConfigMap:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1configmaps~1{name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        watchCoreV1ConfigMapListForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1configmaps/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedConfigMapList:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1configmaps/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedConfigMap:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1configmaps~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/config_map/methods/readCoreV1NamespacedConfigMap'
          - $ref: '#/components/x-stackQL-resources/config_map/methods/listCoreV1NamespacedConfigMap'
          - $ref: '#/components/x-stackQL-resources/config_map/methods/listCoreV1ConfigMapForAllNamespaces'
        insert:
          - $ref: '#/components/x-stackQL-resources/config_map/methods/createCoreV1NamespacedConfigMap'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/config_map/methods/deleteCoreV1NamespacedConfigMap'
          - $ref: '#/components/x-stackQL-resources/config_map/methods/deleteCoreV1CollectionNamespacedConfigMap'
    endpoints:
      id: k8s.core_v1.endpoints
      name: endpoints
      title: Endpoints
      methods:
        listCoreV1EndpointsForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1endpoints/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteCoreV1CollectionNamespacedEndpoints:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1endpoints/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        listCoreV1NamespacedEndpoints:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1endpoints/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createCoreV1NamespacedEndpoints:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1endpoints/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        deleteCoreV1NamespacedEndpoints:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1endpoints~1{name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        readCoreV1NamespacedEndpoints:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1endpoints~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedEndpoints:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1endpoints~1{name}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedEndpoints:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1endpoints~1{name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        watchCoreV1EndpointsListForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1endpoints/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedEndpointsList:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1endpoints/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedEndpoints:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1endpoints~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/endpoints/methods/readCoreV1NamespacedEndpoints'
          - $ref: '#/components/x-stackQL-resources/endpoints/methods/listCoreV1NamespacedEndpoints'
          - $ref: '#/components/x-stackQL-resources/endpoints/methods/listCoreV1EndpointsForAllNamespaces'
        insert:
          - $ref: '#/components/x-stackQL-resources/endpoints/methods/createCoreV1NamespacedEndpoints'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/endpoints/methods/deleteCoreV1NamespacedEndpoints'
          - $ref: '#/components/x-stackQL-resources/endpoints/methods/deleteCoreV1CollectionNamespacedEndpoints'
    event:
      id: k8s.core_v1.event
      name: event
      title: Event
      methods:
        listCoreV1EventForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1events/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteCoreV1CollectionNamespacedEvent:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1events/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        listCoreV1NamespacedEvent:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1events/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createCoreV1NamespacedEvent:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1events/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        deleteCoreV1NamespacedEvent:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1events~1{name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        readCoreV1NamespacedEvent:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1events~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedEvent:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1events~1{name}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedEvent:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1events~1{name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        watchCoreV1EventListForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1events/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedEventList:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1events/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedEvent:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1events~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/event/methods/readCoreV1NamespacedEvent'
          - $ref: '#/components/x-stackQL-resources/event/methods/listCoreV1NamespacedEvent'
          - $ref: '#/components/x-stackQL-resources/event/methods/listCoreV1EventForAllNamespaces'
        insert:
          - $ref: '#/components/x-stackQL-resources/event/methods/createCoreV1NamespacedEvent'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/event/methods/deleteCoreV1NamespacedEvent'
          - $ref: '#/components/x-stackQL-resources/event/methods/deleteCoreV1CollectionNamespacedEvent'
    limit_range:
      id: k8s.core_v1.limit_range
      name: limit_range
      title: Limit_range
      methods:
        listCoreV1LimitRangeForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1limitranges/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deleteCoreV1CollectionNamespacedLimitRange:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1limitranges/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        listCoreV1NamespacedLimitRange:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1limitranges/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createCoreV1NamespacedLimitRange:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1limitranges/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        deleteCoreV1NamespacedLimitRange:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1limitranges~1{name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        readCoreV1NamespacedLimitRange:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1limitranges~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedLimitRange:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1limitranges~1{name}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedLimitRange:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1limitranges~1{name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        watchCoreV1LimitRangeListForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1limitranges/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedLimitRangeList:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1limitranges/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedLimitRange:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1limitranges~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/limit_range/methods/readCoreV1NamespacedLimitRange'
          - $ref: '#/components/x-stackQL-resources/limit_range/methods/listCoreV1NamespacedLimitRange'
          - $ref: '#/components/x-stackQL-resources/limit_range/methods/listCoreV1LimitRangeForAllNamespaces'
        insert:
          - $ref: '#/components/x-stackQL-resources/limit_range/methods/createCoreV1NamespacedLimitRange'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/limit_range/methods/deleteCoreV1NamespacedLimitRange'
          - $ref: '#/components/x-stackQL-resources/limit_range/methods/deleteCoreV1CollectionNamespacedLimitRange'
    namespace:
      id: k8s.core_v1.namespace
      name: namespace
      title: Namespace
      methods:
        listCoreV1Namespace:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createCoreV1Namespace:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        deleteCoreV1Namespace:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        readCoreV1Namespace:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1Namespace:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{name}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1Namespace:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespaceFinalize:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{name}~1finalize/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        readCoreV1NamespaceStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{name}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespaceStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{name}~1status/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespaceStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{name}~1status/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        watchCoreV1NamespaceList:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1Namespace:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/namespace/methods/readCoreV1Namespace'
          - $ref: '#/components/x-stackQL-resources/namespace/methods/listCoreV1Namespace'
        insert:
          - $ref: '#/components/x-stackQL-resources/namespace/methods/createCoreV1Namespace'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/namespace/methods/deleteCoreV1Namespace'
    binding:
      id: k8s.core_v1.binding
      name: binding
      title: Binding
      methods:
        createCoreV1NamespacedBinding:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1bindings/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        createCoreV1NamespacedPodBinding:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1binding/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/binding/methods/createCoreV1NamespacedPodBinding'
          - $ref: '#/components/x-stackQL-resources/binding/methods/createCoreV1NamespacedBinding'
        update: []
        delete: []
    persistent_volume_claim:
      id: k8s.core_v1.persistent_volume_claim
      name: persistent_volume_claim
      title: Persistent_volume_claim
      methods:
        deleteCoreV1CollectionNamespacedPersistentVolumeClaim:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1persistentvolumeclaims/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        listCoreV1NamespacedPersistentVolumeClaim:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1persistentvolumeclaims/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createCoreV1NamespacedPersistentVolumeClaim:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1persistentvolumeclaims/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        deleteCoreV1NamespacedPersistentVolumeClaim:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1persistentvolumeclaims~1{name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        readCoreV1NamespacedPersistentVolumeClaim:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1persistentvolumeclaims~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedPersistentVolumeClaim:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1persistentvolumeclaims~1{name}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedPersistentVolumeClaim:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1persistentvolumeclaims~1{name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        readCoreV1NamespacedPersistentVolumeClaimStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1persistentvolumeclaims~1{name}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedPersistentVolumeClaimStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1persistentvolumeclaims~1{name}~1status/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedPersistentVolumeClaimStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1persistentvolumeclaims~1{name}~1status/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        listCoreV1PersistentVolumeClaimForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1persistentvolumeclaims/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedPersistentVolumeClaimList:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1persistentvolumeclaims/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedPersistentVolumeClaim:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1persistentvolumeclaims~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1PersistentVolumeClaimListForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1persistentvolumeclaims/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/persistent_volume_claim/methods/readCoreV1NamespacedPersistentVolumeClaim'
          - $ref: '#/components/x-stackQL-resources/persistent_volume_claim/methods/listCoreV1NamespacedPersistentVolumeClaim'
          - $ref: '#/components/x-stackQL-resources/persistent_volume_claim/methods/listCoreV1PersistentVolumeClaimForAllNamespaces'
        insert:
          - $ref: '#/components/x-stackQL-resources/persistent_volume_claim/methods/createCoreV1NamespacedPersistentVolumeClaim'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/persistent_volume_claim/methods/deleteCoreV1NamespacedPersistentVolumeClaim'
          - $ref: '#/components/x-stackQL-resources/persistent_volume_claim/methods/deleteCoreV1CollectionNamespacedPersistentVolumeClaim'
    pod:
      id: k8s.core_v1.pod
      name: pod
      title: Pod
      methods:
        deleteCoreV1CollectionNamespacedPod:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        listCoreV1NamespacedPod:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createCoreV1NamespacedPod:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        deleteCoreV1NamespacedPod:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        readCoreV1NamespacedPod:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedPod:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedPod:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        readCoreV1NamespacedPodEphemeralcontainers:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1ephemeralcontainers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedPodEphemeralcontainers:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1ephemeralcontainers/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedPodEphemeralcontainers:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1ephemeralcontainers/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        readCoreV1NamespacedPodLog:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1log/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        readCoreV1NamespacedPodStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedPodStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1status/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedPodStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1status/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        listCoreV1PodForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1pods/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: items
        watchCoreV1NamespacedPodList:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1pods/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedPod:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1pods~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1PodListForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1pods/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/pod/methods/readCoreV1NamespacedPod'
          - $ref: '#/components/x-stackQL-resources/pod/methods/listCoreV1NamespacedPod'
          - $ref: '#/components/x-stackQL-resources/pod/methods/listCoreV1PodForAllNamespaces'
        insert:
          - $ref: '#/components/x-stackQL-resources/pod/methods/createCoreV1NamespacedPod'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/pod/methods/deleteCoreV1NamespacedPod'
          - $ref: '#/components/x-stackQL-resources/pod/methods/deleteCoreV1CollectionNamespacedPod'
    pod_attach_options:
      id: k8s.core_v1.pod_attach_options
      name: pod_attach_options
      title: Pod_attach_options
      methods:
        connectCoreV1GetNamespacedPodAttach:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1attach/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PostNamespacedPodAttach:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1attach/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    eviction:
      id: k8s.core_v1.eviction
      name: eviction
      title: Eviction
      methods:
        createCoreV1NamespacedPodEviction:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1eviction/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/eviction/methods/createCoreV1NamespacedPodEviction'
        update: []
        delete: []
    pod_exec_options:
      id: k8s.core_v1.pod_exec_options
      name: pod_exec_options
      title: Pod_exec_options
      methods:
        connectCoreV1GetNamespacedPodExec:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1exec/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PostNamespacedPodExec:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1exec/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    pod_port_forward_options:
      id: k8s.core_v1.pod_port_forward_options
      name: pod_port_forward_options
      title: Pod_port_forward_options
      methods:
        connectCoreV1GetNamespacedPodPortforward:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1portforward/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PostNamespacedPodPortforward:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1portforward/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    pod_proxy_options:
      id: k8s.core_v1.pod_proxy_options
      name: pod_proxy_options
      title: Pod_proxy_options
      methods:
        connectCoreV1DeleteNamespacedPodProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1proxy/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1GetNamespacedPodProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1proxy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1HeadNamespacedPodProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1proxy/head'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1OptionsNamespacedPodProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1proxy/options'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PatchNamespacedPodProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1proxy/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PostNamespacedPodProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1proxy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PutNamespacedPodProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1proxy/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1DeleteNamespacedPodProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1proxy~1{path}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1GetNamespacedPodProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1proxy~1{path}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1HeadNamespacedPodProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1proxy~1{path}/head'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1OptionsNamespacedPodProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1proxy~1{path}/options'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PatchNamespacedPodProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1proxy~1{path}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PostNamespacedPodProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1proxy~1{path}/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PutNamespacedPodProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1pods~1{name}~1proxy~1{path}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    pod_template:
      id: k8s.core_v1.pod_template
      name: pod_template
      title: Pod_template
      methods:
        deleteCoreV1CollectionNamespacedPodTemplate:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1podtemplates/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        listCoreV1NamespacedPodTemplate:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1podtemplates/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createCoreV1NamespacedPodTemplate:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1podtemplates/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        deleteCoreV1NamespacedPodTemplate:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1podtemplates~1{name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        readCoreV1NamespacedPodTemplate:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1podtemplates~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedPodTemplate:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1podtemplates~1{name}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedPodTemplate:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1podtemplates~1{name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        listCoreV1PodTemplateForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1podtemplates/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedPodTemplateList:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1podtemplates/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedPodTemplate:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1podtemplates~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1PodTemplateListForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1podtemplates/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/pod_template/methods/readCoreV1NamespacedPodTemplate'
          - $ref: '#/components/x-stackQL-resources/pod_template/methods/listCoreV1NamespacedPodTemplate'
          - $ref: '#/components/x-stackQL-resources/pod_template/methods/listCoreV1PodTemplateForAllNamespaces'
        insert:
          - $ref: '#/components/x-stackQL-resources/pod_template/methods/createCoreV1NamespacedPodTemplate'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/pod_template/methods/deleteCoreV1NamespacedPodTemplate'
          - $ref: '#/components/x-stackQL-resources/pod_template/methods/deleteCoreV1CollectionNamespacedPodTemplate'
    replication_controller:
      id: k8s.core_v1.replication_controller
      name: replication_controller
      title: Replication_controller
      methods:
        deleteCoreV1CollectionNamespacedReplicationController:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1replicationcontrollers/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        listCoreV1NamespacedReplicationController:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1replicationcontrollers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createCoreV1NamespacedReplicationController:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1replicationcontrollers/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        deleteCoreV1NamespacedReplicationController:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1replicationcontrollers~1{name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        readCoreV1NamespacedReplicationController:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1replicationcontrollers~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedReplicationController:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1replicationcontrollers~1{name}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedReplicationController:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1replicationcontrollers~1{name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        readCoreV1NamespacedReplicationControllerStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1replicationcontrollers~1{name}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedReplicationControllerStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1replicationcontrollers~1{name}~1status/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedReplicationControllerStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1replicationcontrollers~1{name}~1status/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        listCoreV1ReplicationControllerForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1replicationcontrollers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedReplicationControllerList:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1replicationcontrollers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedReplicationController:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1replicationcontrollers~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1ReplicationControllerListForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1replicationcontrollers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/replication_controller/methods/readCoreV1NamespacedReplicationController'
          - $ref: '#/components/x-stackQL-resources/replication_controller/methods/listCoreV1NamespacedReplicationController'
          - $ref: '#/components/x-stackQL-resources/replication_controller/methods/listCoreV1ReplicationControllerForAllNamespaces'
        insert:
          - $ref: '#/components/x-stackQL-resources/replication_controller/methods/createCoreV1NamespacedReplicationController'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/replication_controller/methods/deleteCoreV1NamespacedReplicationController'
          - $ref: '#/components/x-stackQL-resources/replication_controller/methods/deleteCoreV1CollectionNamespacedReplicationController'
    scale:
      id: k8s.core_v1.scale
      name: scale
      title: Scale
      methods:
        readCoreV1NamespacedReplicationControllerScale:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1replicationcontrollers~1{name}~1scale/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedReplicationControllerScale:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1replicationcontrollers~1{name}~1scale/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedReplicationControllerScale:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1replicationcontrollers~1{name}~1scale/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/scale/methods/readCoreV1NamespacedReplicationControllerScale'
        insert: []
        update: []
        delete: []
    resource_quota:
      id: k8s.core_v1.resource_quota
      name: resource_quota
      title: Resource_quota
      methods:
        deleteCoreV1CollectionNamespacedResourceQuota:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1resourcequotas/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        listCoreV1NamespacedResourceQuota:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1resourcequotas/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createCoreV1NamespacedResourceQuota:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1resourcequotas/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        deleteCoreV1NamespacedResourceQuota:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1resourcequotas~1{name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        readCoreV1NamespacedResourceQuota:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1resourcequotas~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedResourceQuota:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1resourcequotas~1{name}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedResourceQuota:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1resourcequotas~1{name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        readCoreV1NamespacedResourceQuotaStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1resourcequotas~1{name}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedResourceQuotaStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1resourcequotas~1{name}~1status/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedResourceQuotaStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1resourcequotas~1{name}~1status/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        listCoreV1ResourceQuotaForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1resourcequotas/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedResourceQuotaList:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1resourcequotas/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedResourceQuota:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1resourcequotas~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1ResourceQuotaListForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1resourcequotas/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/resource_quota/methods/readCoreV1NamespacedResourceQuota'
          - $ref: '#/components/x-stackQL-resources/resource_quota/methods/listCoreV1NamespacedResourceQuota'
          - $ref: '#/components/x-stackQL-resources/resource_quota/methods/listCoreV1ResourceQuotaForAllNamespaces'
        insert:
          - $ref: '#/components/x-stackQL-resources/resource_quota/methods/createCoreV1NamespacedResourceQuota'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/resource_quota/methods/deleteCoreV1NamespacedResourceQuota'
          - $ref: '#/components/x-stackQL-resources/resource_quota/methods/deleteCoreV1CollectionNamespacedResourceQuota'
    secret:
      id: k8s.core_v1.secret
      name: secret
      title: Secret
      methods:
        deleteCoreV1CollectionNamespacedSecret:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1secrets/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        listCoreV1NamespacedSecret:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1secrets/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createCoreV1NamespacedSecret:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1secrets/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        deleteCoreV1NamespacedSecret:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1secrets~1{name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        readCoreV1NamespacedSecret:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1secrets~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedSecret:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1secrets~1{name}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedSecret:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1secrets~1{name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        listCoreV1SecretForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1secrets/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedSecretList:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1secrets/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedSecret:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1secrets~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1SecretListForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1secrets/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/secret/methods/readCoreV1NamespacedSecret'
          - $ref: '#/components/x-stackQL-resources/secret/methods/listCoreV1NamespacedSecret'
          - $ref: '#/components/x-stackQL-resources/secret/methods/listCoreV1SecretForAllNamespaces'
        insert:
          - $ref: '#/components/x-stackQL-resources/secret/methods/createCoreV1NamespacedSecret'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/secret/methods/deleteCoreV1NamespacedSecret'
          - $ref: '#/components/x-stackQL-resources/secret/methods/deleteCoreV1CollectionNamespacedSecret'
    service_account:
      id: k8s.core_v1.service_account
      name: service_account
      title: Service_account
      methods:
        deleteCoreV1CollectionNamespacedServiceAccount:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1serviceaccounts/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        listCoreV1NamespacedServiceAccount:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1serviceaccounts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createCoreV1NamespacedServiceAccount:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1serviceaccounts/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        deleteCoreV1NamespacedServiceAccount:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1serviceaccounts~1{name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        readCoreV1NamespacedServiceAccount:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1serviceaccounts~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedServiceAccount:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1serviceaccounts~1{name}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedServiceAccount:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1serviceaccounts~1{name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        listCoreV1ServiceAccountForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1serviceaccounts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedServiceAccountList:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1serviceaccounts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedServiceAccount:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1serviceaccounts~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1ServiceAccountListForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1serviceaccounts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/service_account/methods/readCoreV1NamespacedServiceAccount'
          - $ref: '#/components/x-stackQL-resources/service_account/methods/listCoreV1NamespacedServiceAccount'
          - $ref: '#/components/x-stackQL-resources/service_account/methods/listCoreV1ServiceAccountForAllNamespaces'
        insert:
          - $ref: '#/components/x-stackQL-resources/service_account/methods/createCoreV1NamespacedServiceAccount'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/service_account/methods/deleteCoreV1NamespacedServiceAccount'
          - $ref: '#/components/x-stackQL-resources/service_account/methods/deleteCoreV1CollectionNamespacedServiceAccount'
    token_request:
      id: k8s.core_v1.token_request
      name: token_request
      title: Token_request
      methods:
        createCoreV1NamespacedServiceAccountToken:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1serviceaccounts~1{name}~1token/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/token_request/methods/createCoreV1NamespacedServiceAccountToken'
        update: []
        delete: []
    service:
      id: k8s.core_v1.service
      name: service
      title: Service
      methods:
        deleteCoreV1CollectionNamespacedService:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        listCoreV1NamespacedService:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createCoreV1NamespacedService:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        deleteCoreV1NamespacedService:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        readCoreV1NamespacedService:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedService:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedService:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        readCoreV1NamespacedServiceStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NamespacedServiceStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}~1status/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NamespacedServiceStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}~1status/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        listCoreV1ServiceForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1services/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedServiceList:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1services/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1NamespacedService:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1namespaces~1{namespace}~1services~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1ServiceListForAllNamespaces:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1services/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/service/methods/readCoreV1NamespacedService'
          - $ref: '#/components/x-stackQL-resources/service/methods/listCoreV1NamespacedService'
          - $ref: '#/components/x-stackQL-resources/service/methods/listCoreV1ServiceForAllNamespaces'
        insert:
          - $ref: '#/components/x-stackQL-resources/service/methods/createCoreV1NamespacedService'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/service/methods/deleteCoreV1NamespacedService'
          - $ref: '#/components/x-stackQL-resources/service/methods/deleteCoreV1CollectionNamespacedService'
    service_proxy_options:
      id: k8s.core_v1.service_proxy_options
      name: service_proxy_options
      title: Service_proxy_options
      methods:
        connectCoreV1DeleteNamespacedServiceProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}~1proxy/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1GetNamespacedServiceProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}~1proxy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1HeadNamespacedServiceProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}~1proxy/head'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1OptionsNamespacedServiceProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}~1proxy/options'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PatchNamespacedServiceProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}~1proxy/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PostNamespacedServiceProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}~1proxy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PutNamespacedServiceProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}~1proxy/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1DeleteNamespacedServiceProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}~1proxy~1{path}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1GetNamespacedServiceProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}~1proxy~1{path}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1HeadNamespacedServiceProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}~1proxy~1{path}/head'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1OptionsNamespacedServiceProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}~1proxy~1{path}/options'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PatchNamespacedServiceProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}~1proxy~1{path}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PostNamespacedServiceProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}~1proxy~1{path}/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PutNamespacedServiceProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1namespaces~1{namespace}~1services~1{name}~1proxy~1{path}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    node:
      id: k8s.core_v1.node
      name: node
      title: Node
      methods:
        deleteCoreV1CollectionNode:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        listCoreV1Node:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createCoreV1Node:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        deleteCoreV1Node:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        readCoreV1Node:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1Node:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1Node:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        readCoreV1NodeStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1NodeStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}~1status/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1NodeStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}~1status/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        watchCoreV1NodeList:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1nodes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1Node:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1nodes~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/node/methods/readCoreV1Node'
          - $ref: '#/components/x-stackQL-resources/node/methods/listCoreV1Node'
        insert:
          - $ref: '#/components/x-stackQL-resources/node/methods/createCoreV1Node'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/node/methods/deleteCoreV1Node'
          - $ref: '#/components/x-stackQL-resources/node/methods/deleteCoreV1CollectionNode'
    node_proxy_options:
      id: k8s.core_v1.node_proxy_options
      name: node_proxy_options
      title: Node_proxy_options
      methods:
        connectCoreV1DeleteNodeProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}~1proxy/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1GetNodeProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}~1proxy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1HeadNodeProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}~1proxy/head'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1OptionsNodeProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}~1proxy/options'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PatchNodeProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}~1proxy/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PostNodeProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}~1proxy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PutNodeProxy:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}~1proxy/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1DeleteNodeProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}~1proxy~1{path}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1GetNodeProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}~1proxy~1{path}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1HeadNodeProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}~1proxy~1{path}/head'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1OptionsNodeProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}~1proxy~1{path}/options'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PatchNodeProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}~1proxy~1{path}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PostNodeProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}~1proxy~1{path}/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        connectCoreV1PutNodeProxyWithPath:
          operation:
            $ref: '#/paths/~1api~1v1~1nodes~1{name}~1proxy~1{path}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    persistent_volume:
      id: k8s.core_v1.persistent_volume
      name: persistent_volume
      title: Persistent_volume
      methods:
        deleteCoreV1CollectionPersistentVolume:
          operation:
            $ref: '#/paths/~1api~1v1~1persistentvolumes/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        listCoreV1PersistentVolume:
          operation:
            $ref: '#/paths/~1api~1v1~1persistentvolumes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createCoreV1PersistentVolume:
          operation:
            $ref: '#/paths/~1api~1v1~1persistentvolumes/post'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        deleteCoreV1PersistentVolume:
          operation:
            $ref: '#/paths/~1api~1v1~1persistentvolumes~1{name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '202'
        readCoreV1PersistentVolume:
          operation:
            $ref: '#/paths/~1api~1v1~1persistentvolumes~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1PersistentVolume:
          operation:
            $ref: '#/paths/~1api~1v1~1persistentvolumes~1{name}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1PersistentVolume:
          operation:
            $ref: '#/paths/~1api~1v1~1persistentvolumes~1{name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        readCoreV1PersistentVolumeStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1persistentvolumes~1{name}~1status/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patchCoreV1PersistentVolumeStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1persistentvolumes~1{name}~1status/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        replaceCoreV1PersistentVolumeStatus:
          operation:
            $ref: '#/paths/~1api~1v1~1persistentvolumes~1{name}~1status/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        watchCoreV1PersistentVolumeList:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1persistentvolumes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watchCoreV1PersistentVolume:
          operation:
            $ref: '#/paths/~1api~1v1~1watch~1persistentvolumes~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/persistent_volume/methods/readCoreV1PersistentVolume'
          - $ref: '#/components/x-stackQL-resources/persistent_volume/methods/listCoreV1PersistentVolume'
        insert:
          - $ref: '#/components/x-stackQL-resources/persistent_volume/methods/createCoreV1PersistentVolume'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/persistent_volume/methods/deleteCoreV1PersistentVolume'
          - $ref: '#/components/x-stackQL-resources/persistent_volume/methods/deleteCoreV1CollectionPersistentVolume'
openapi: 3.0.0
servers:
  - url: https://{cluster_addr}/
    variables:
      cluster_addr:
        default: localhost
security:
  - BearerToken: []
info:
  title: Kubernetes - core_v1
  version: unversioned
  description: core_v1
